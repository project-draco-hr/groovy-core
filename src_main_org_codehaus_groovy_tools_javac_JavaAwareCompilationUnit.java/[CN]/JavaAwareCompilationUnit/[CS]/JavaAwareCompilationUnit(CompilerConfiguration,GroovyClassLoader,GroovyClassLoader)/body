{
  super(configuration,null,groovyClassLoader,transformClassLoader);
  javaSources=new LinkedList<String>();
  Map options=configuration.getJointCompilationOptions();
  generationGoal=(File)options.get("stubDir");
  boolean useJava5=CompilerConfiguration.isPostJDK5(configuration.getTargetBytecode());
  String encoding=configuration.getSourceEncoding();
  stubGenerator=new JavaStubGenerator(generationGoal,false,useJava5,encoding);
  keepStubs=Boolean.TRUE.equals(options.get("keepStubs"));
  addPhaseOperation(new PrimaryClassNodeOperation(){
    public void call(    SourceUnit source,    GeneratorContext context,    ClassNode node) throws CompilationFailedException {
      if (javaSources.size() != 0) {
        VariableScopeVisitor scopeVisitor=new VariableScopeVisitor(source);
        scopeVisitor.visitClass(node);
        new JavaAwareResolveVisitor(JavaAwareCompilationUnit.this).startResolving(node,source);
        AnnotationConstantsVisitor acv=new AnnotationConstantsVisitor();
        acv.visitClass(node,source);
      }
    }
  }
,Phases.CONVERSION);
  addPhaseOperation(new CompilationUnit.PrimaryClassNodeOperation(){
    public void call(    SourceUnit source,    GeneratorContext context,    ClassNode classNode) throws CompilationFailedException {
      ASTTransformationCollectorCodeVisitor collector=new ASTTransformationCollectorCodeVisitor(source,JavaAwareCompilationUnit.this.getTransformLoader());
      collector.visitClass(classNode);
    }
  }
,Phases.SEMANTIC_ANALYSIS);
  addPhaseOperation(new PrimaryClassNodeOperation(){
    public void call(    SourceUnit source,    GeneratorContext context,    ClassNode classNode) throws CompilationFailedException {
      try {
        if (javaSources.size() != 0)         stubGenerator.generateClass(classNode);
      }
 catch (      FileNotFoundException fnfe) {
        source.addException(fnfe);
      }
    }
  }
,Phases.CONVERSION);
}
