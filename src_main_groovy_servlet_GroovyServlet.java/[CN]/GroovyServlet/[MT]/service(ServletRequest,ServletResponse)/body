{
  final HttpServletRequest httpRequest=(HttpServletRequest)request;
  final HttpServletResponse httpResponse=(HttpServletResponse)response;
  int contextLength=httpRequest.getContextPath().length();
  String scriptFilename=httpRequest.getRequestURI().substring(contextLength).intern();
  URL groovyScriptURL=sc.getResource(scriptFilename);
  if (groovyScriptURL == null) {
    sc.log("Groovy script " + scriptFilename + " not found");
    httpResponse.sendError(404);
    return;
  }
  ScriptContext binding=new ScriptContext();
  binding.setVariable("request",httpRequest);
  binding.setVariable("response",httpResponse);
  binding.setVariable("application",sc);
  binding.setVariable("session",httpRequest.getSession(true));
  binding.setVariable("out",httpResponse.getWriter());
  for (Enumeration paramEnum=request.getParameterNames(); paramEnum.hasMoreElements(); ) {
    String key=(String)paramEnum.nextElement();
    if (binding.getVariable(key) == null) {
      String[] values=request.getParameterValues(key);
      if (values.length == 1) {
        binding.setVariable(key,values[0]);
      }
 else {
        binding.setVariable(key,values);
      }
    }
  }
  ServletCacheEntry entry;
synchronized (scriptFilename) {
    URLConnection groovyScriptConn=groovyScriptURL.openConnection();
    long lastModified=groovyScriptConn.getLastModified();
    entry=(ServletCacheEntry)servletCache.get(scriptFilename);
    boolean dependencyOutOfDate=false;
    if (entry != null) {
      for (Iterator i=entry.dependencies.keySet().iterator(); i.hasNext(); ) {
        URLConnection urlc=null;
        try {
          URL url=(URL)i.next();
          urlc=url.openConnection();
          if (urlc.getLastModified() > ((Long)entry.dependencies.get(url)).longValue()) {
            dependencyOutOfDate=true;
            break;
          }
        }
  finally {
          urlc.getInputStream().close();
        }
      }
    }
    if (entry == null || entry.lastModified < lastModified || dependencyOutOfDate) {
      entry=new ServletCacheEntry();
      final ServletCacheEntry finalEntry=entry;
      GroovyClassLoader groovyLoader=new GroovyClassLoader(parent){
        protected Class findClass(        String className) throws ClassNotFoundException {
          String filename=className.replace('.',File.separatorChar) + ".groovy";
          URL dependentScript;
          try {
            dependentScript=sc.getResource("/WEB-INF/groovy/" + filename);
            if (dependentScript == null) {
              String servletPath=httpRequest.getServletPath();
              String current=servletPath.substring(0,servletPath.lastIndexOf("/") + 1);
              dependentScript=sc.getResource(current + filename);
            }
          }
 catch (          MalformedURLException e) {
            throw new ClassNotFoundException(className + ": " + e);
          }
          if (dependentScript == null) {
            throw new ClassNotFoundException("Could not find " + className + " in webapp");
          }
 else {
            URLConnection dependentScriptConn;
            try {
              dependentScriptConn=dependentScript.openConnection();
              finalEntry.dependencies.put(dependentScript,new Long(dependentScriptConn.getLastModified()));
            }
 catch (            IOException e1) {
              throw new ClassNotFoundException("Could not read " + className + ": "+ e1);
            }
            try {
              return parseClass(dependentScriptConn.getInputStream(),filename);
            }
 catch (            SyntaxException e2) {
              throw new ClassNotFoundException("Syntax error in " + className + ": "+ e2);
            }
catch (            IOException e2) {
              throw new ClassNotFoundException("Problem reading " + className + ": "+ e2);
            }
          }
        }
      }
;
      Class scriptClass;
      try {
        scriptClass=groovyLoader.parseClass(groovyScriptConn.getInputStream(),scriptFilename.substring(1));
      }
 catch (      SyntaxException e) {
        throw new ServletException("Could not parse script: " + scriptFilename,e);
      }
      entry.servletScriptClass=scriptClass;
      entry.lastModified=lastModified;
      servletCache.put(scriptFilename,entry);
    }
  }
  response.setContentType("text/html");
  Script script=InvokerHelper.createScript(entry.servletScriptClass,binding);
  script.run();
}
