{
  if (!(annotatedNode instanceof ClassNode)) {
    transform.addError("Error during " + BuilderASTTransformation.MY_TYPE_NAME + " processing: building for "+ annotatedNode.getClass().getSimpleName()+ " not supported by "+ getClass().getSimpleName(),annotatedNode);
    return;
  }
  ClassNode buildee=(ClassNode)annotatedNode;
  if (unsupportedAttribute(transform,anno,"builderClassName"))   return;
  if (unsupportedAttribute(transform,anno,"buildMethodName"))   return;
  if (unsupportedAttribute(transform,anno,"builderMethodName"))   return;
  if (unsupportedAttribute(transform,anno,"forClass"))   return;
  List<String> excludes=new ArrayList<String>();
  List<String> includes=new ArrayList<String>();
  if (!getIncludeExclude(transform,anno,buildee,excludes,includes))   return;
  String prefix=transform.getMemberStringValue(anno,"prefix","set");
  List<FieldNode> fields=getInstancePropertyFields(buildee);
  for (  String name : includes) {
    checkKnownField(transform,anno,name,fields);
  }
  for (  FieldNode field : fields) {
    String fieldName=field.getName();
    if (!AbstractASTTransformation.shouldSkip(fieldName,excludes,includes)) {
      String methodName=getSetterName(prefix,fieldName);
      Parameter parameter=param(field.getType(),fieldName);
      buildee.addMethod(methodName,Opcodes.ACC_PUBLIC,newClass(buildee),params(parameter),NO_EXCEPTIONS,block(stmt(assignX(fieldX(field),varX(parameter))),returnS(varX("this"))));
    }
  }
}
