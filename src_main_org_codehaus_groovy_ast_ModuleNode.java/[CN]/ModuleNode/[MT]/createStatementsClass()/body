{
  ClassNode classNode=getScriptClassDummy();
  if (classNode.getName().endsWith("package-info")) {
    return classNode;
  }
  handleMainMethodIfPresent(methods);
  classNode.addMethod(new MethodNode("main",ACC_PUBLIC | ACC_STATIC,ClassHelper.VOID_TYPE,new Parameter[]{new Parameter(ClassHelper.STRING_TYPE.makeArray(),"args")},ClassNode.EMPTY_ARRAY,new ExpressionStatement(new MethodCallExpression(new ClassExpression(ClassHelper.make(InvokerHelper.class)),"runScript",new ArgumentListExpression(new ClassExpression(classNode),new VariableExpression("args"))))));
  MethodNode methodNode=new MethodNode("run",ACC_PUBLIC,ClassHelper.OBJECT_TYPE,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,statementBlock);
  methodNode.setIsScriptBody();
  classNode.addMethod(methodNode);
  classNode.addConstructor(ACC_PUBLIC,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,new BlockStatement());
  Statement stmt=new ExpressionStatement(new MethodCallExpression(new VariableExpression("super"),"setBinding",new ArgumentListExpression(new VariableExpression("context"))));
  classNode.addConstructor(ACC_PUBLIC,new Parameter[]{new Parameter(ClassHelper.make(Binding.class),"context")},ClassNode.EMPTY_ARRAY,stmt);
  for (  MethodNode node : methods) {
    int modifiers=node.getModifiers();
    if ((modifiers & ACC_ABSTRACT) != 0) {
      throw new RuntimeException("Cannot use abstract methods in a script, they are only available inside classes. Method: " + node.getName());
    }
    node.setModifiers(modifiers);
    classNode.addMethod(node);
  }
  return classNode;
}
