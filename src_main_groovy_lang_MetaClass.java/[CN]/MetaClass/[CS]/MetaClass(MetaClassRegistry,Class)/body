{
  this.registry=registry;
  this.theClass=theClass;
  constructors=Arrays.asList(theClass.getDeclaredConstructors());
  addMethods(theClass);
  BeanInfo info=null;
  try {
    info=(BeanInfo)AccessController.doPrivileged(new PrivilegedExceptionAction(){
      public Object run() throws IntrospectionException {
        return Introspector.getBeanInfo(theClass);
      }
    }
);
  }
 catch (  PrivilegedActionException pae) {
    if (pae.getException() instanceof IntrospectionException) {
      throw (IntrospectionException)pae.getException();
    }
 else {
      throw new RuntimeException(pae.getException());
    }
  }
  PropertyDescriptor[] descriptors=info.getPropertyDescriptors();
  for (int i=0; i < descriptors.length; i++) {
    PropertyDescriptor descriptor=descriptors[i];
    propertyDescriptors.put(descriptor.getName(),descriptor);
  }
  EventSetDescriptor[] eventDescriptors=info.getEventSetDescriptors();
  for (int i=0; i < eventDescriptors.length; i++) {
    EventSetDescriptor descriptor=eventDescriptors[i];
    Method[] listenerMethods=descriptor.getListenerMethods();
    for (int j=0; j < listenerMethods.length; j++) {
      Method listenerMethod=listenerMethods[j];
      MetaMethod metaMethod=createMetaMethod(descriptor.getAddListenerMethod());
      listeners.put(listenerMethod.getName(),metaMethod);
    }
  }
}
