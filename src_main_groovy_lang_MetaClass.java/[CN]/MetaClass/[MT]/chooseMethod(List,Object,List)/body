{
  int methodCount=methods.size();
  if (methodCount <= 0) {
    return null;
  }
 else   if (methodCount == 1) {
    return (Method)methods.get(0);
  }
  Object answer=null;
  if (arguments == null) {
    answer=chooseMostGeneralMethodWith1Param(methods);
  }
 else   if (argumentList.isEmpty()) {
    answer=chooseEmptyMethodParams(methods);
  }
 else {
    Class closestClass=null;
    Object singleParameterMatch=null;
    boolean wasMethodWithMultiArgs=false;
    for (Iterator iter=methods.iterator(); iter.hasNext(); ) {
      Object method=iter.next();
      Class[] paramTypes=getParameterTypes(method);
      if (paramTypes.length == 1) {
        Class theType=paramTypes[0];
        if (isCompatibleInstance(theType,arguments)) {
          if (closestClass == null || !theType.isAssignableFrom(closestClass)) {
            closestClass=theType;
            singleParameterMatch=method;
          }
        }
 else {
          wasMethodWithMultiArgs=true;
        }
      }
    }
    Object multiParamMatch=null;
    int size=argumentList.size();
    int matches=0;
    if (size > 1) {
      for (Iterator iter=methods.iterator(); iter.hasNext(); ) {
        Object method=iter.next();
        Class[] paramTypes=getParameterTypes(method);
        if (paramTypes.length == size) {
          boolean validMethod=true;
          for (int i=0; i < size; i++) {
            Object value=argumentList.get(i);
            if (!isCompatibleInstance(paramTypes[i],value)) {
              validMethod=false;
            }
          }
          if (validMethod && multiParamMatch == null) {
            multiParamMatch=method;
            matches++;
          }
        }
      }
    }
    if (singleParameterMatch != null) {
      if (multiParamMatch == null) {
        return singleParameterMatch;
      }
      int answerSize=getParameterTypes(singleParameterMatch).length;
      int matchingArgSize=getParameterTypes(multiParamMatch).length;
      if (answerSize == matchingArgSize) {
        return singleParameterMatch;
      }
 else {
        return multiParamMatch;
      }
    }
 else     if (multiParamMatch != null) {
      return multiParamMatch;
    }
  }
  if (answer != null) {
    return answer;
  }
  throw new InvokerException("Could not find which method to invoke from this list: " + methods + " for arguments: "+ arguments);
}
