{
  MetaProperty mp=(MetaProperty)propertyMap.get(property);
  if (mp != null) {
    try {
      return mp.getProperty(object);
    }
 catch (    Exception e) {
      throw new GroovyRuntimeException("Cannot read property: " + property);
    }
  }
  if (genericGetMethod == null) {
    List possibleGenericMethods=getMethods("get");
    if (possibleGenericMethods != null) {
      for (Iterator i=possibleGenericMethods.iterator(); i.hasNext(); ) {
        MetaMethod mmethod=(MetaMethod)i.next();
        Class[] paramTypes=mmethod.getParameterTypes();
        if (paramTypes.length == 1 && paramTypes[0] == String.class) {
          Object[] arguments={property};
          Object answer=doMethodInvoke(object,mmethod,arguments);
          return answer;
        }
      }
    }
  }
 else {
    Object[] arguments={property};
    Object answer=doMethodInvoke(object,genericGetMethod,arguments);
    if (answer != null) {
      return answer;
    }
  }
  if (!CompilerConfiguration.isJsrGroovy()) {
    List methods=getMethods(property);
    if (!methods.isEmpty()) {
      return new MethodClosure(object,property);
    }
  }
  Exception lastException=null;
  try {
    MetaMethod method=findGetter(object,"get" + capitalize(property));
    if (method != null) {
      return doMethodInvoke(object,method,EMPTY_ARRAY);
    }
  }
 catch (  GroovyRuntimeException e) {
    lastException=e;
  }
  if (genericGetMethod != null) {
    return null;
  }
 else {
    if (object instanceof Class) {
      return getStaticProperty((Class)object,property);
    }
    if (object instanceof Collection) {
      return DefaultGroovyMethods.getAt((Collection)object,property);
    }
    if (object instanceof Object[]) {
      return DefaultGroovyMethods.getAt(Arrays.asList((Object[])object),property);
    }
    if (object instanceof Object) {
      Field field=null;
      try {
        field=object.getClass().getDeclaredField(property);
        return field.get(object);
      }
 catch (      IllegalAccessException iae) {
        lastException=new IllegalPropertyAccessException(field,object.getClass());
      }
catch (      Exception e1) {
      }
    }
    MetaMethod addListenerMethod=(MetaMethod)listeners.get(property);
    if (addListenerMethod != null) {
      return null;
    }
    if (lastException == null)     throw new MissingPropertyException(property,theClass);
 else     throw new MissingPropertyException(property,theClass,lastException);
  }
}
