{
  if (classNode == null && GroovyObject.class.isAssignableFrom(theClass)) {
    String className=theClass.getName();
    String groovyFile=className;
    int idx=groovyFile.indexOf('$');
    if (idx > 0) {
      groovyFile=groovyFile.substring(0,idx);
    }
    groovyFile=groovyFile.replace('.','/') + ".groovy";
    URL url=theClass.getClassLoader().getResource(groovyFile);
    if (url == null) {
      url=Thread.currentThread().getContextClassLoader().getResource(groovyFile);
    }
    if (url != null) {
      try {
        CompilationUnit.ClassgenCallback search=new CompilationUnit.ClassgenCallback(){
          public void call(          ClassVisitor writer,          ClassNode node){
            if (node.getName().equals(theClass.getName())) {
              MetaClass.this.classNode=node;
            }
          }
        }
;
        CompilationUnit unit=new CompilationUnit(getClass().getClassLoader());
        unit.setClassgenCallback(search);
        unit.addSource(url);
        unit.compile(Phases.CLASS_GENERATION);
      }
 catch (      Exception e) {
        throw new GroovyRuntimeException("Exception thrown parsing: " + groovyFile + ". Reason: "+ e,e);
      }
    }
  }
  return classNode;
}
