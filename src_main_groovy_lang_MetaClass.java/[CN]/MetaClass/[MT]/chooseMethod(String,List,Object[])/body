{
  int methodCount=methods.size();
  if (methodCount <= 0) {
    return null;
  }
 else   if (methodCount == 1) {
    return methods.get(0);
  }
  Object answer=null;
  if (arguments.length == 1 && arguments[0] == null) {
    answer=chooseMostGeneralMethodWith1Param(methods);
  }
 else   if (arguments.length == 0) {
    answer=chooseEmptyMethodParams(methods);
  }
 else {
    int size=arguments.length;
    List matchingMethods=new ArrayList();
    for (Iterator iter=methods.iterator(); iter.hasNext(); ) {
      Object method=iter.next();
      Class[] paramTypes=getParameterTypes(method);
      if (paramTypes.length == size) {
        boolean validMethod=true;
        for (int i=0; i < size; i++) {
          Object value=arguments[i];
          if (!isCompatibleInstance(paramTypes[i],value)) {
            validMethod=false;
          }
        }
        if (validMethod) {
          matchingMethods.add(method);
        }
      }
    }
    if (matchingMethods.isEmpty()) {
      return null;
    }
 else     if (matchingMethods.size() == 1) {
      return matchingMethods.get(0);
    }
    return chooseMostSpecificParams(methodName,matchingMethods,arguments);
  }
  if (answer != null) {
    return answer;
  }
  throw new InvokerException("Could not find which method to invoke from this list: " + methods + " for arguments: "+ InvokerHelper.toString(arguments));
}
