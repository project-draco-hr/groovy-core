{
  Object[] ans=null;
  boolean coerced=false;
  Class[] params=method.getParameterTypes();
  if (params.length != arguments.length) {
    return null;
  }
  ans=new Object[arguments.length];
  for (int i=0, size=arguments.length; i < size; i++) {
    Object argument=arguments[i];
    Class param=params[i];
    if ((Number.class.isAssignableFrom(param) || param.isPrimitive()) && argument instanceof Number) {
      if (param == Byte.class || param == Byte.TYPE) {
        ans[i]=new Byte(((Number)argument).byteValue());
        coerced=true;
        continue;
      }
      if (param == Double.class || param == Double.TYPE) {
        ans[i]=new Double(((Number)argument).doubleValue());
        coerced=true;
        continue;
      }
      if (param == Float.class || param == Float.TYPE) {
        ans[i]=new Float(((Number)argument).floatValue());
        coerced=true;
        continue;
      }
      if (param == Integer.class || param == Integer.TYPE) {
        ans[i]=new Integer(((Number)argument).intValue());
        coerced=true;
        continue;
      }
      if (param == Long.class || param == Long.TYPE) {
        ans[i]=new Long(((Number)argument).longValue());
        coerced=true;
        continue;
      }
      if (param == Short.class || param == Short.TYPE) {
        ans[i]=new Short(((Number)argument).shortValue());
        coerced=true;
        continue;
      }
      if (param == BigDecimal.class) {
        ans[i]=new BigDecimal(((Number)argument).doubleValue());
        coerced=true;
        continue;
      }
      if (param == BigInteger.class) {
        ans[i]=new BigInteger(String.valueOf(((Number)argument).longValue()));
        coerced=true;
        continue;
      }
    }
 else     if (param.isArray() && argument.getClass().isArray()) {
      Class paramElem=param.getComponentType();
      if (paramElem.isPrimitive()) {
        if (paramElem == boolean.class && argument.getClass().getName().equals("[Ljava.lang.Boolean;")) {
          ans[i]=InvokerHelper.convertToBooleanArray(argument);
          coerced=true;
          continue;
        }
        if (paramElem == byte.class && argument.getClass().getName().equals("[Ljava.lang.Byte;")) {
          ans[i]=InvokerHelper.convertToByteArray(argument);
          coerced=true;
          continue;
        }
        if (paramElem == char.class && argument.getClass().getName().equals("[Ljava.lang.Character;")) {
          ans[i]=InvokerHelper.convertToCharArray(argument);
          coerced=true;
          continue;
        }
        if (paramElem == short.class && argument.getClass().getName().equals("[Ljava.lang.Short;")) {
          ans[i]=InvokerHelper.convertToShortArray(argument);
          coerced=true;
          continue;
        }
        if (paramElem == int.class && argument.getClass().getName().equals("[Ljava.lang.Integer;")) {
          ans[i]=InvokerHelper.convertToIntArray(argument);
          coerced=true;
          continue;
        }
        if (paramElem == long.class && argument.getClass().getName().equals("[Ljava.lang.Long;") && argument.getClass().getName().equals("[Ljava.lang.Integer;")) {
          ans[i]=InvokerHelper.convertToLongArray(argument);
          coerced=true;
          continue;
        }
        if (paramElem == float.class && argument.getClass().getName().equals("[Ljava.lang.Float;") && argument.getClass().getName().equals("[Ljava.lang.Integer;")) {
          ans[i]=InvokerHelper.convertToFloatArray(argument);
          coerced=true;
          continue;
        }
        if (paramElem == double.class && argument.getClass().getName().equals("[Ljava.lang.Double;") && argument.getClass().getName().equals("[Ljava.lang.BigDecimal;") && argument.getClass().getName().equals("[Ljava.lang.Float;")) {
          ans[i]=InvokerHelper.convertToDoubleArray(argument);
          coerced=true;
          continue;
        }
      }
    }
  }
  return coerced ? ans : null;
}
