{
  if (method.isPrivate() || method.isProtected()) {
    return false;
  }
  Class declaringClass=method.getDeclaringClass();
  if (!Modifier.isPublic(declaringClass.getModifiers())) {
    List list=getInterfaceMethods();
    for (Iterator iter=list.iterator(); iter.hasNext(); ) {
      MetaMethod aMethod=(MetaMethod)iter.next();
      if (method.isSame(aMethod)) {
        method.setInterfaceClass(aMethod.getDeclaringClass());
        return true;
      }
    }
    log.warning("Cannot invoke method on protected/private class which isn't visible on an interface so must use reflection instead: " + method);
    return false;
  }
  return true;
}
