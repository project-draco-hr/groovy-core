{
  Class[] paramTypes=method.getParameterTypes();
  try {
    if (argumentArray == null) {
      argumentArray=EMPTY_ARRAY;
    }
 else     if (paramTypes.length == 1 && argumentArray.length == 0) {
      argumentArray=EMPTY_ARRAY;
      if (isVargsMethod(paramTypes,argumentArray))       argumentArray=ARRAY_WITH_EMPTY_ARRAY;
 else       argumentArray=ARRAY_WITH_NULL;
    }
 else     if (isVargsMethod(paramTypes,argumentArray)) {
      Object[] newArg=new Object[paramTypes.length];
      System.arraycopy(argumentArray,0,newArg,0,newArg.length - 1);
      Object[] vargs=new Object[argumentArray.length - newArg.length + 1];
      System.arraycopy(argumentArray,newArg.length - 1,vargs,0,vargs.length);
      if (vargs.length == 1 && vargs[0] == null)       newArg[newArg.length - 1]=null;
 else {
        newArg[newArg.length - 1]=vargs;
      }
      argumentArray=newArg;
    }
    return method.invokeAt(at,object,argumentArray);
  }
 catch (  ClassCastException e) {
    Object[] newArg=new Object[argumentArray.length];
    System.arraycopy(argumentArray,0,newArg,0,newArg.length);
    if (coerceGStrings(newArg)) {
      try {
        return doMethodInvokeAt(at,object,method,newArg);
      }
 catch (      Exception e2) {
      }
    }
    throw new GroovyRuntimeException("failed to invoke method: " + method + " on: "+ object+ " with arguments: "+ InvokerHelper.toString(argumentArray)+ " reason: "+ e,e);
  }
catch (  InvocationTargetException e) {
    throw new InvokerInvocationException(e);
  }
catch (  IllegalAccessException e) {
    throw new GroovyRuntimeException("could not access method: " + method + " on: "+ object+ " with arguments: "+ InvokerHelper.toString(argumentArray)+ " reason: "+ e,e);
  }
catch (  IllegalArgumentException e) {
    if (coerceGStrings(argumentArray)) {
      try {
        return doMethodInvokeAt(at,object,method,argumentArray);
      }
 catch (      Exception e2) {
      }
    }
    Object[] args=coerceNumbers(method,argumentArray);
    if (args != null && !Arrays.equals(argumentArray,args)) {
      try {
        return doMethodInvokeAt(at,object,method,args);
      }
 catch (      Exception e3) {
      }
    }
    throw new GroovyRuntimeException("failed to invoke method: " + method + " on: "+ object+ " with arguments: "+ InvokerHelper.toString(argumentArray)+ "reason: "+ e);
  }
catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new GroovyRuntimeException("failed to invoke method: " + method + " on: "+ object+ " with arguments: "+ InvokerHelper.toString(argumentArray)+ " reason: "+ e,e);
  }
}
