{
  ReflectorGenerator generator=new ReflectorGenerator(methods);
  String className=theClass.getName();
  String packagePrefix="gjdk.";
  String name=packagePrefix + className + "_GroovyReflector";
  if (theClass.isArray()) {
    String componentName=theClass.getComponentType().getName();
    name=packagePrefix + componentName + "_GroovyReflectorArray";
  }
  try {
    Class type=loadReflectorClass(name);
    return (Reflector)type.newInstance();
  }
 catch (  AccessControlException ace) {
    throw ace;
  }
catch (  Exception e) {
  }
  ClassWriter cw=new ClassWriter(true);
  generator.generate(cw,name);
  byte[] bytecode=cw.toByteArray();
  try {
    Class type=loadReflectorClass(name,bytecode);
    return (Reflector)type.newInstance();
  }
 catch (  Exception e) {
    throw new GroovyRuntimeException("Could not load the reflector for class: " + name + ". Reason: "+ e,e);
  }
}
