{
  PropertyDescriptor descriptor=(PropertyDescriptor)propertyDescriptors.get(property);
  if (descriptor != null) {
    Method method=descriptor.getWriteMethod();
    if (method == null) {
      throw new ReadOnlyPropertyException(property,theClass);
    }
    MetaMethod metaMethod=findMethod(method);
    Object[] arguments={newValue};
    try {
      doMethodInvoke(object,metaMethod,arguments);
    }
 catch (    GroovyRuntimeException e) {
      if (newValue instanceof List) {
        List list=(List)newValue;
        int params=list.size();
        Constructor[] constructors=descriptor.getPropertyType().getConstructors();
        for (int i=0; i < constructors.length; i++) {
          Constructor constructor=constructors[i];
          if (constructor.getParameterTypes().length == params) {
            Object value=doConstructorInvoke(constructor,list.toArray());
            doMethodInvoke(object,metaMethod,new Object[]{value});
            return;
          }
        }
      }
      throw new MissingPropertyException(property,theClass,e);
    }
    return;
  }
  try {
    MetaMethod addListenerMethod=(MetaMethod)listeners.get(property);
    if (addListenerMethod != null && newValue instanceof Closure) {
      Object proxy=createListenerProxy(addListenerMethod.getParameterTypes()[0],property,(Closure)newValue);
      doMethodInvoke(object,addListenerMethod,new Object[]{proxy});
      return;
    }
    if (genericSetMethod != null) {
      Object[] arguments={property,newValue};
      doMethodInvoke(object,genericSetMethod,arguments);
      return;
    }
    String method="set" + capitalize(property);
    invokeMethod(object,method,new Object[]{newValue});
  }
 catch (  GroovyRuntimeException e) {
    throw new MissingPropertyException(property,theClass,e);
  }
}
