{
  performOperationOnMetaClass(new Callable(){
    public void call(){
      MetaMethod existing=null;
      try {
        existing=pickMethod(metaMethodFromSuper.getName(),metaMethodFromSuper.getNativeParameterTypes());
      }
 catch (      GroovyRuntimeException e) {
      }
      if (existing == null) {
        addMethodWithKey(metaMethodFromSuper);
      }
 else {
        boolean isGroovyMethod=getMetaMethods().contains(existing);
        if (isGroovyMethod) {
          addMethodWithKey(metaMethodFromSuper);
        }
 else         if (inheritedMetaMethods.contains(existing)) {
          inheritedMetaMethods.remove(existing);
          addMethodWithKey(metaMethodFromSuper);
        }
      }
    }
    private void addMethodWithKey(    final MetaMethod metaMethodFromSuper){
      inheritedMetaMethods.add(metaMethodFromSuper);
      if (metaMethodFromSuper instanceof ClosureMetaMethod) {
        ClosureMetaMethod closureMethod=(ClosureMetaMethod)metaMethodFromSuper;
        Closure cloned=(Closure)closureMethod.getClosure().clone();
        String name=metaMethodFromSuper.getName();
        final Class declaringClass=metaMethodFromSuper.getDeclaringClass().getTheClass();
        ClosureMetaMethod localMethod=new ClosureMetaMethod(name,declaringClass,cloned);
        addMetaMethod(localMethod);
        MethodKey key=new DefaultCachedMethodKey(declaringClass,name,localMethod.getParameterTypes(),false);
        checkIfGroovyObjectMethod(localMethod,name);
        expandoMethods.put(key,localMethod);
      }
    }
  }
);
}
