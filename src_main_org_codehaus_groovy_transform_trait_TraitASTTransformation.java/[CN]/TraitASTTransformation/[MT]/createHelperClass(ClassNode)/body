{
  ClassNode helper=new InnerClassNode(cNode,Traits.helperClassName(cNode),ACC_PUBLIC | ACC_STATIC | ACC_ABSTRACT| ACC_SYNTHETIC,ClassHelper.OBJECT_TYPE,ClassNode.EMPTY_ARRAY,null);
  cNode.setModifiers(ACC_PUBLIC | ACC_INTERFACE | ACC_ABSTRACT);
  checkInnerClasses(cNode);
  MethodNode initializer=createInitMethod(false,cNode,helper);
  MethodNode staticInitializer=createInitMethod(true,cNode,helper);
  generatePropertyMethods(cNode);
  List<FieldNode> fields=new ArrayList<FieldNode>();
  Set<String> fieldNames=new HashSet<String>();
  for (  FieldNode field : cNode.getFields()) {
    if (!"metaClass".equals(field.getName()) && (!field.isSynthetic() || field.getName().indexOf('$') < 0)) {
      fields.add(field);
      fieldNames.add(field.getName());
    }
  }
  ClassNode fieldHelper=null;
  if (!fields.isEmpty()) {
    fieldHelper=new InnerClassNode(cNode,Traits.fieldHelperClassName(cNode),ACC_STATIC | ACC_PUBLIC | ACC_INTERFACE| ACC_ABSTRACT,ClassHelper.OBJECT_TYPE);
  }
  List<MethodNode> methods=cNode.getMethods();
  List<MethodNode> nonPublicAPIMethods=new LinkedList<MethodNode>();
  for (  final MethodNode methodNode : methods) {
    boolean declared=methodNode.getDeclaringClass() == cNode;
    if (declared) {
      if (!methodNode.isSynthetic() && (methodNode.isProtected() || methodNode.getModifiers() == 0)) {
        unit.addError(new SyntaxException("Cannot have protected/package private method in a trait (" + cNode.getName() + "#"+ methodNode.getTypeDescriptor()+ ")",methodNode.getLineNumber(),methodNode.getColumnNumber()));
        return;
      }
      helper.addMethod(processMethod(cNode,methodNode,fieldHelper,fieldNames));
      if (methodNode.isPrivate() || methodNode.isStatic()) {
        nonPublicAPIMethods.add(methodNode);
      }
    }
  }
  for (  MethodNode privateMethod : nonPublicAPIMethods) {
    cNode.removeMethod(privateMethod);
  }
  for (  FieldNode field : fields) {
    processField(field,initializer,staticInitializer,fieldHelper);
  }
  cNode.getProperties().clear();
  copyClassAnnotations(cNode,helper);
  fields=new ArrayList<FieldNode>(cNode.getFields());
  for (  FieldNode field : fields) {
    cNode.removeField(field.getName());
  }
  registerASTTranformations(helper);
  unit.getAST().addClass(helper);
  if (fieldHelper != null) {
    unit.getAST().addClass(fieldHelper);
  }
}
