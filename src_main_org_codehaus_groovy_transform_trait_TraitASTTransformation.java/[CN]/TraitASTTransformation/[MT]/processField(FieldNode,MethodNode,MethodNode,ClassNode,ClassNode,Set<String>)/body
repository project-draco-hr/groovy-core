{
  Expression initialExpression=field.getInitialExpression();
  MethodNode selectedMethod=field.isStatic() ? staticInitializer : initializer;
  if (initialExpression != null) {
    VariableExpression thisObject=new VariableExpression(selectedMethod.getParameters()[0]);
    ExpressionStatement initCode=new ExpressionStatement(initialExpression);
    processBody(thisObject,selectedMethod,initCode,trait,fieldHelper,knownFields);
    BlockStatement code=(BlockStatement)selectedMethod.getCode();
    MethodCallExpression mce=new MethodCallExpression(new CastExpression(createReceiverType(field.isStatic(),fieldHelper),thisObject),Traits.helperSetterName(field),initCode.getExpression());
    mce.setImplicitThis(false);
    mce.setSourcePosition(initialExpression);
    code.addStatement(new ExpressionStatement(mce));
  }
  fieldHelper.addMethod(Traits.helperSetterName(field),ACC_PUBLIC | ACC_ABSTRACT,ClassHelper.VOID_TYPE,new Parameter[]{new Parameter(field.getOriginType(),"val")},ClassNode.EMPTY_ARRAY,null);
  fieldHelper.addMethod(Traits.helperGetterName(field),ACC_PUBLIC | ACC_ABSTRACT,field.getOriginType(),Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,null);
  String dummyFieldName=(field.isStatic() ? Traits.STATIC_FIELD_PREFIX : Traits.FIELD_PREFIX) + (field.isPublic() ? Traits.PUBLIC_FIELD_PREFIX : Traits.PRIVATE_FIELD_PREFIX) + Traits.remappedFieldName(field.getOwner(),field.getName());
  FieldNode dummyField=new FieldNode(dummyFieldName,ACC_STATIC | ACC_PUBLIC | ACC_FINAL| ACC_SYNTHETIC,field.getOriginType(),fieldHelper,null);
  List<AnnotationNode> copied=new LinkedList<AnnotationNode>();
  List<AnnotationNode> notCopied=new LinkedList<AnnotationNode>();
  GeneralUtils.copyAnnotatedNodeAnnotations(field,copied,notCopied);
  dummyField.addAnnotations(copied);
  fieldHelper.addField(dummyField);
}
