{
  MethodCallerMultiAdapter mcma=new MethodCallerMultiAdapter();
  mcma.skipSpreadSafeAndSafe=skipSpreadSafeAndSafe;
  if (createNArgs) {
    int numberOfBaseMethods=mcma.numberOfBaseMethods();
    mcma.methods=new MethodCaller[(MAX_ARGS + 2) * numberOfBaseMethods];
    for (int i=0; i <= MAX_ARGS; i++) {
      mcma.methods[i * numberOfBaseMethods]=MethodCaller.newStatic(theClass,baseName + i);
      if (skipSpreadSafeAndSafe)       continue;
      mcma.methods[i * numberOfBaseMethods + 1]=MethodCaller.newStatic(theClass,baseName + i + "Safe");
      mcma.methods[i * numberOfBaseMethods + 2]=MethodCaller.newStatic(theClass,baseName + i + "SpreadSafe");
    }
    mcma.methods[(MAX_ARGS + 1) * numberOfBaseMethods]=MethodCaller.newStatic(theClass,baseName + "N");
    if (!skipSpreadSafeAndSafe) {
      mcma.methods[(MAX_ARGS + 1) * numberOfBaseMethods + 1]=MethodCaller.newStatic(theClass,baseName + "N" + "Safe");
      mcma.methods[(MAX_ARGS + 1) * numberOfBaseMethods + 2]=MethodCaller.newStatic(theClass,baseName + "N" + "SpreadSafe");
    }
  }
 else   if (!skipSpreadSafeAndSafe) {
    mcma.methods=new MethodCaller[]{MethodCaller.newStatic(theClass,baseName),MethodCaller.newStatic(theClass,baseName + "Safe"),MethodCaller.newStatic(theClass,baseName + "SpreadSafe")};
  }
 else {
    mcma.methods=new MethodCaller[]{MethodCaller.newStatic(theClass,baseName)};
  }
  return mcma;
}
