{
  for (  ClassNode cn : excludeTypes) {
    List<ClassNode> remaining=new LinkedList<ClassNode>();
    remaining.add(cn);
    while (!remaining.isEmpty()) {
      ClassNode next=remaining.remove(0);
      if (!next.equals(ClassHelper.OBJECT_TYPE)) {
        for (        MethodNode mn : next.getMethods()) {
          String md=correctToGenericsSpec(genericsSpec,mn).getTypeDescriptor();
          if (md.equals(descriptor))           return true;
        }
        remaining.addAll(Arrays.asList(next.getInterfaces()));
      }
    }
  }
  if (includeTypes.isEmpty())   return false;
  for (  ClassNode cn : includeTypes) {
    List<ClassNode> remaining=new LinkedList<ClassNode>();
    remaining.add(cn);
    while (!remaining.isEmpty()) {
      ClassNode next=remaining.remove(0);
      if (!next.equals(ClassHelper.OBJECT_TYPE)) {
        for (        MethodNode mn : next.getMethods()) {
          String md=correctToGenericsSpec(genericsSpec,mn).getTypeDescriptor();
          if (md.equals(descriptor))           return false;
        }
        remaining.addAll(Arrays.asList(next.getInterfaces()));
      }
    }
  }
  return true;
}
