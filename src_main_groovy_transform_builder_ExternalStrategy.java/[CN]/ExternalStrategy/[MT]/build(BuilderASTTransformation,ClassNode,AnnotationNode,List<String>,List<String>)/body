{
  String prefix=transform.getMemberStringValue(anno,"prefix","");
  ClassNode buildeeClass=transform.getMemberClassValue(anno,"forClass");
  if (buildeeClass == null) {
    transform.addError("Error during " + MY_TYPE_NAME + " processing: 'forClass' must be specified for "+ getClass().getName(),anno);
    return;
  }
  if (unsupportedAttribute(transform,anno,"builderClassName"))   return;
  if (unsupportedAttribute(transform,anno,"builderMethodName"))   return;
  List<PropertyInfo> props;
  if (buildeeClass.getModule() == null) {
    props=getPropertyInfoFromBeanInfo(buildeeClass,includes,excludes);
  }
 else {
    props=getPropertyInfoFromClassNode(buildeeClass,includes,excludes);
  }
  for (  String name : includes) {
    checkKnownProperty(transform,anno,name,props);
  }
  for (  PropertyInfo prop : props) {
    builderClass.addField(createFieldCopy(builderClass,prop));
    builderClass.addMethod(createBuilderMethodForField(builderClass,prop,prefix));
  }
  builderClass.addMethod(createBuildMethod(transform,anno,buildeeClass,props));
}
