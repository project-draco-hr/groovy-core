{
  OperandStack operandStack=controller.getOperandStack();
  int m1=operandStack.getStackLength();
  prepareSiteAndReceiver(receiver,"power",false,controller.getCompileStack().isLHS());
  visitBoxedArgument(arguments);
  int m2=operandStack.getStackLength();
  MethodVisitor mv=controller.getMethodVisitor();
  if (ClassHelper.BigDecimal_TYPE.equals(rType) && ClassHelper.Integer_TYPE.equals(ClassHelper.getWrapper(aType))) {
    mv.visitMethodInsn(INVOKESTATIC,"org/codehaus/groovy/runtime/DefaultGroovyMethods","power","(Ljava/math/BigDecimal;Ljava/lang/Integer;)Ljava/lang/Number;");
  }
 else   if (ClassHelper.BigInteger_TYPE.equals(rType) && ClassHelper.Integer_TYPE.equals(ClassHelper.getWrapper(aType))) {
    mv.visitMethodInsn(INVOKESTATIC,"org/codehaus/groovy/runtime/DefaultGroovyMethods","power","(Ljava/math/BigInteger;Ljava/lang/Integer;)Ljava/lang/Number;");
  }
 else   if (ClassHelper.Long_TYPE.equals(ClassHelper.getWrapper(rType)) && ClassHelper.Integer_TYPE.equals(ClassHelper.getWrapper(aType))) {
    mv.visitMethodInsn(INVOKESTATIC,"org/codehaus/groovy/runtime/DefaultGroovyMethods","power","(Ljava/lang/Long;Ljava/lang/Integer;)Ljava/lang/Number;");
  }
 else   if (ClassHelper.Integer_TYPE.equals(ClassHelper.getWrapper(rType)) && ClassHelper.Integer_TYPE.equals(ClassHelper.getWrapper(aType))) {
    mv.visitMethodInsn(INVOKESTATIC,"org/codehaus/groovy/runtime/DefaultGroovyMethods","power","(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Number;");
  }
 else {
    mv.visitMethodInsn(INVOKESTATIC,"org/codehaus/groovy/runtime/DefaultGroovyMethods","power","(Ljava/lang/Number;Ljava/lang/Number;)Ljava/lang/Number;");
  }
  controller.getOperandStack().replace(ClassHelper.Number_TYPE,m2 - m1);
}
