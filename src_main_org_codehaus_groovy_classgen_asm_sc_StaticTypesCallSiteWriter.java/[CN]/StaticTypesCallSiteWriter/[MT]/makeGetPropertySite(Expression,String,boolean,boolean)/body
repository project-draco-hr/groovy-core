{
  TypeChooser typeChooser=controller.getTypeChooser();
  ClassNode classNode=controller.getClassNode();
  ClassNode receiverType=typeChooser.resolveType(receiver,classNode);
  Object type=receiver.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
  if (type == null && receiver instanceof VariableExpression) {
    Variable variable=((VariableExpression)receiver).getAccessedVariable();
    if (variable instanceof Expression) {
      type=((Expression)variable).getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
    }
  }
  if (type != null) {
    receiverType=(ClassNode)type;
  }
  boolean isClassReceiver=false;
  if (receiverType.equals(ClassHelper.CLASS_Type) && receiverType.getGenericsTypes() != null && !receiverType.getGenericsTypes()[0].isPlaceholder()) {
    isClassReceiver=true;
    receiverType=receiverType.getGenericsTypes()[0].getType();
  }
  MethodVisitor mv=controller.getMethodVisitor();
  boolean isStaticProperty=receiver instanceof ClassExpression && (receiverType.isDerivedFrom(receiver.getType()) || receiverType.implementsInterface(receiver.getType()));
  if (!isStaticProperty) {
    if (receiverType.implementsInterface(ClassHelper.MAP_TYPE)) {
      receiver.visit(controller.getAcg());
      mv.visitLdcInsn(methodName);
      mv.visitMethodInsn(INVOKEINTERFACE,"java/util/Map","get","(Ljava/lang/Object;)Ljava/lang/Object;");
      controller.getOperandStack().replace(ClassHelper.OBJECT_TYPE);
      return;
    }
  }
  if (receiverType.isArray() && methodName.equals("length")) {
    receiver.visit(controller.getAcg());
    mv.visitInsn(ARRAYLENGTH);
    controller.getOperandStack().replace(ClassHelper.int_TYPE);
    return;
  }
 else   if (receiverType.implementsInterface(COLLECTION_TYPE) && ("size".equals(methodName) || "length".equals(methodName))) {
    MethodCallExpression expr=new MethodCallExpression(receiver,"size",ArgumentListExpression.EMPTY_ARGUMENTS);
    expr.setMethodTarget(COLLECTION_SIZE_METHOD);
    expr.setImplicitThis(implicitThis);
    expr.visit(controller.getAcg());
    return;
  }
  if (makeGetField(receiver,receiverType,methodName,implicitThis,samePackages(receiverType.getPackageName(),classNode.getPackageName())))   return;
  if (makeGetPropertyWithGetter(receiver,receiverType,methodName))   return;
  if (receiverType.isEnum()) {
    mv.visitFieldInsn(GETSTATIC,BytecodeHelper.getClassInternalName(receiverType),methodName,BytecodeHelper.getTypeDescription(receiverType));
    controller.getOperandStack().push(receiverType);
    return;
  }
  if (receiver instanceof ClassExpression) {
    if (makeGetField(receiver,receiver.getType(),methodName,implicitThis,samePackages(receiver.getType().getPackageName(),classNode.getPackageName())))     return;
    if (makeGetPropertyWithGetter(receiver,receiver.getType(),methodName))     return;
  }
  if (isClassReceiver) {
    if (makeGetField(receiver,ClassHelper.CLASS_Type,methodName,false,true))     return;
    if (makeGetPropertyWithGetter(receiver,ClassHelper.CLASS_Type,methodName))     return;
  }
  if (makeGetPrivateFieldWithBridgeMethod(receiver,receiverType,methodName,implicitThis))   return;
  controller.getSourceUnit().addError(new SyntaxException("Access to " + (receiver instanceof ClassExpression ? receiver.getType() : receiverType).toString(false) + "#"+ methodName+ " is forbidden",receiver.getLineNumber(),receiver.getColumnNumber()));
  controller.getMethodVisitor().visitInsn(ACONST_NULL);
  controller.getOperandStack().push(ClassHelper.OBJECT_TYPE);
}
