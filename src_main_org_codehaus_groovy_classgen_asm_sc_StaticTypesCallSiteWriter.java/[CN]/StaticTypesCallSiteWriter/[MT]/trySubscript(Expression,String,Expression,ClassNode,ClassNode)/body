{
  if (getWrapper(rType).isDerivedFrom(Number_TYPE) && getWrapper(aType).isDerivedFrom(Number_TYPE)) {
    if ("plus".equals(message) || "minus".equals(message) || "multiply".equals(message)|| "div".equals(message)) {
      writeNumberNumberCall(receiver,message,arguments);
      return true;
    }
 else     if ("power".equals(message)) {
      writePowerCall(receiver,arguments,rType,aType);
      return true;
    }
 else     if ("mod".equals(message)) {
      writeModCall(receiver,arguments,rType,aType);
      return true;
    }
  }
 else   if (STRING_TYPE.equals(rType) && "plus".equals(message)) {
    writeStringPlusCall(receiver,message,arguments);
    return true;
  }
 else   if ("getAt".equals(message)) {
    if (rType.isArray() && getWrapper(aType).isDerivedFrom(Number_TYPE)) {
      writeArrayGet(receiver,arguments,rType,aType);
      return true;
    }
 else {
      ClassNode current=rType;
      MethodNode getAtNode=null;
      while (current != null && getAtNode == null) {
        getAtNode=current.getMethod("getAt",new Parameter[]{new Parameter(aType,"index")});
        if (getAtNode == null && isPrimitiveType(aType)) {
          getAtNode=current.getMethod("getAt",new Parameter[]{new Parameter(getWrapper(aType),"index")});
        }
 else         if (getAtNode == null && aType.isDerivedFrom(Number_TYPE)) {
          getAtNode=current.getMethod("getAt",new Parameter[]{new Parameter(getUnwrapper(aType),"index")});
        }
        current=current.getSuperClass();
      }
      if (getAtNode != null) {
        MethodCallExpression call=new MethodCallExpression(receiver,"getAt",arguments);
        call.setSourcePosition(arguments);
        call.setImplicitThis(false);
        call.setMethodTarget(getAtNode);
        call.visit(controller.getAcg());
        return true;
      }
      ClassNode[] args={aType};
      boolean acceptAnyMethod=MAP_TYPE.equals(rType) || rType.implementsInterface(MAP_TYPE) || LIST_TYPE.equals(rType)|| rType.implementsInterface(LIST_TYPE);
      List<MethodNode> nodes=StaticTypeCheckingSupport.findDGMMethodsByNameAndArguments(controller.getSourceUnit().getClassLoader(),rType,message,args);
      if (nodes.isEmpty()) {
        rType=rType.getPlainNodeReference();
        nodes=StaticTypeCheckingSupport.findDGMMethodsByNameAndArguments(controller.getSourceUnit().getClassLoader(),rType,message,args);
      }
      nodes=StaticTypeCheckingSupport.chooseBestMethod(rType,nodes,args);
      if (nodes.size() == 1 || nodes.size() > 1 && acceptAnyMethod) {
        MethodNode methodNode=nodes.get(0);
        MethodCallExpression call=new MethodCallExpression(receiver,message,arguments);
        call.setSourcePosition(arguments);
        call.setImplicitThis(false);
        call.setMethodTarget(methodNode);
        call.visit(controller.getAcg());
        return true;
      }
      if (implementsInterfaceOrIsSubclassOf(rType,MAP_TYPE)) {
        MethodCallExpression call=new MethodCallExpression(receiver,"get",arguments);
        call.setMethodTarget(MAP_GET_METHOD);
        call.setSourcePosition(arguments);
        call.setImplicitThis(false);
        call.visit(controller.getAcg());
        return true;
      }
    }
  }
  return false;
}
