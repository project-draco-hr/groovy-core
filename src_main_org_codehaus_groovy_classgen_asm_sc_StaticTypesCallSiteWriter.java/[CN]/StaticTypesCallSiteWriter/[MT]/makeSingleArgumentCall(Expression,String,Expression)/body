{
  TypeChooser typeChooser=controller.getTypeChooser();
  ClassNode classNode=controller.getClassNode();
  ClassNode rType=typeChooser.resolveType(receiver,classNode);
  ClassNode aType=typeChooser.resolveType(arguments,classNode);
  if (ClassHelper.getWrapper(rType).isDerivedFrom(ClassHelper.Number_TYPE) && ClassHelper.getWrapper(aType).isDerivedFrom(ClassHelper.Number_TYPE)) {
    if ("plus".equals(message) || "minus".equals(message) || "multiply".equals(message)|| "div".equals(message)) {
      writeNumberNumberCall(receiver,message,arguments);
      return;
    }
 else     if ("power".equals(message)) {
      writePowerCall(receiver,arguments,rType,aType);
      return;
    }
  }
 else   if (ClassHelper.STRING_TYPE.equals(rType) && "plus".equals(message)) {
    writeStringPlusCall(receiver,message,arguments);
    return;
  }
 else   if (rType.isArray() && "getAt".equals(message)) {
    writeArrayGet(receiver,arguments,rType,aType);
    return;
  }
  List<MethodNode> nodes=StaticTypeCheckingSupport.findDGMMethodsByNameAndArguments(rType,message,new ClassNode[]{aType});
  if (nodes.size() == 1) {
    MethodNode methodNode=nodes.get(0);
    MethodCallExpression call=new MethodCallExpression(receiver,message,arguments);
    call.setMethodTarget(methodNode);
    call.visit(controller.getAcg());
    return;
  }
  throw new GroovyBugError("This method should not have been called. Please try to create a simple example reproducing this error and file" + "a bug report at http://jira.codehaus.org/browse/GROOVY");
}
