{
  TypeChooser typeChooser=controller.getTypeChooser();
  ClassNode classNode=controller.getClassNode();
  ClassNode rType=typeChooser.resolveType(receiver,classNode);
  ClassNode aType=typeChooser.resolveType(arguments,classNode);
  if (getWrapper(rType).isDerivedFrom(Number_TYPE) && getWrapper(aType).isDerivedFrom(Number_TYPE)) {
    if ("plus".equals(message) || "minus".equals(message) || "multiply".equals(message)|| "div".equals(message)) {
      writeNumberNumberCall(receiver,message,arguments);
      return;
    }
 else     if ("power".equals(message)) {
      writePowerCall(receiver,arguments,rType,aType);
      return;
    }
  }
 else   if (STRING_TYPE.equals(rType) && "plus".equals(message)) {
    writeStringPlusCall(receiver,message,arguments);
    return;
  }
 else   if (rType.isArray() && "getAt".equals(message)) {
    writeArrayGet(receiver,arguments,rType,aType);
    return;
  }
  ClassNode current=rType;
  MethodNode getAtNode=null;
  while (current != null && getAtNode == null) {
    getAtNode=current.getMethod("getAt",new Parameter[]{new Parameter(aType,"index")});
    current=current.getSuperClass();
  }
  if (getAtNode != null) {
    MethodCallExpression call=new MethodCallExpression(receiver,"getAt",arguments);
    call.setSourcePosition(arguments);
    call.setImplicitThis(false);
    call.setMethodTarget(getAtNode);
    call.visit(controller.getAcg());
    return;
  }
  ClassNode[] args={aType};
  boolean acceptAnyMethod=MAP_TYPE.equals(rType) || rType.implementsInterface(MAP_TYPE) || LIST_TYPE.equals(rType)|| rType.implementsInterface(LIST_TYPE);
  List<MethodNode> nodes=StaticTypeCheckingSupport.findDGMMethodsByNameAndArguments(rType,message,args);
  nodes=StaticTypeCheckingSupport.chooseBestMethod(rType,nodes,args);
  if (nodes.size() == 1 || nodes.size() > 1 && acceptAnyMethod) {
    MethodNode methodNode=nodes.get(0);
    MethodCallExpression call=new MethodCallExpression(receiver,message,arguments);
    call.setSourcePosition(arguments);
    call.setImplicitThis(false);
    call.setMethodTarget(methodNode);
    call.visit(controller.getAcg());
    return;
  }
  throw new GroovyBugError("At line " + receiver.getLineNumber() + " column "+ receiver.getColumnNumber()+ "\n"+ "On receiver: "+ receiver.getText()+ " with message: "+ message+ " and arguments: "+ arguments.getText()+ "\n"+ "This method should not have been called. Please try to create a simple example reproducing this error and file"+ "a bug report at http://jira.codehaus.org/browse/GROOVY");
}
