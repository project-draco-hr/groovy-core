{
  FieldNode field=receiverType.getField(fieldName);
  if (field != null && (field.isPublic() || (samePackage && field.isProtected()))) {
    CompileStack compileStack=controller.getCompileStack();
    MethodVisitor mv=controller.getMethodVisitor();
    if (field.isStatic()) {
      mv.visitFieldInsn(GETSTATIC,BytecodeHelper.getClassInternalName(receiverType),fieldName,BytecodeHelper.getTypeDescription(field.getOriginType()));
      controller.getOperandStack().push(ClassHelper.OBJECT_TYPE);
    }
 else {
      if (implicitThis) {
        compileStack.pushImplicitThis(implicitThis);
      }
      receiver.visit(controller.getAcg());
      if (implicitThis)       compileStack.popImplicitThis();
      mv.visitFieldInsn(GETFIELD,BytecodeHelper.getClassInternalName(receiverType),fieldName,BytecodeHelper.getTypeDescription(field.getOriginType()));
    }
    controller.getOperandStack().replace(field.getOriginType());
    return true;
  }
  ClassNode superClass=receiverType.getSuperClass();
  if (superClass != null) {
    String receiverTypePackageName=receiverType.getPackageName();
    String superClassPackageName=superClass.getPackageName();
    boolean same=samePackage && samePackages(receiverTypePackageName,superClassPackageName);
    return makeGetPublicField(receiver,superClass,fieldName,implicitThis,same);
  }
  return false;
}
