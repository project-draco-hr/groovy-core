{
  if (attrType.isArray()) {
    if (attrExp instanceof ListExpression) {
      ListExpression le=(ListExpression)attrExp;
      visitListExpression(attrName,le,attrType.getComponentType());
    }
 else     if (attrExp instanceof ClosureExpression) {
      addError("Annotation list attributes must use Groovy notation [el1, el2]",attrExp);
    }
 else {
      ListExpression listExp=new ListExpression();
      listExp.addExpression(attrExp);
      if (annotation != null) {
        annotation.setMember(attrName,listExp);
      }
      visitExpression(attrName,listExp,attrType);
    }
  }
 else   if (ClassHelper.isPrimitiveType(attrType)) {
    visitConstantExpression(attrName,getConstantExpression(attrExp,attrType),ClassHelper.getWrapper(attrType));
  }
 else   if (ClassHelper.STRING_TYPE.equals(attrType)) {
    visitConstantExpression(attrName,getConstantExpression(attrExp,attrType),ClassHelper.STRING_TYPE);
  }
 else   if (ClassHelper.CLASS_Type.equals(attrType)) {
    if (!(attrExp instanceof ClassExpression || attrExp instanceof ClosureExpression)) {
      addError("Only classes and closures can be used for attribute '" + attrName + "'",attrExp);
    }
  }
 else   if (attrType.isDerivedFrom(ClassHelper.Enum_Type)) {
    if (attrExp instanceof PropertyExpression) {
      visitEnumExpression(attrName,(PropertyExpression)attrExp,attrType);
    }
 else {
      addError("Expected enum value for attribute " + attrName,attrExp);
    }
  }
 else   if (isValidAnnotationClass(attrType)) {
    if (attrExp instanceof AnnotationConstantExpression) {
      visitAnnotationExpression(attrName,(AnnotationConstantExpression)attrExp,attrType);
    }
 else {
      addError("Expected annotation of type '" + attrType.getName() + "' for attribute "+ attrName,attrExp);
    }
  }
 else {
    addError("Unexpected type " + attrType.getName(),attrExp);
  }
}
