{
synchronized (classCache) {
    Class answer=null;
    try {
      CompilationUnit unit=createCompilationUnit(config,codeSource.getCodeSource());
      SourceUnit su=null;
      if (codeSource.getFile() == null) {
        su=unit.addSource(codeSource.getName(),codeSource.getInputStream());
      }
 else {
        su=unit.addSource(codeSource.getFile());
      }
      ClassCollector collector=createCollector(unit,su);
      unit.setClassgenCallback(collector);
      int goalPhase=Phases.CLASS_GENERATION;
      if (config != null && config.getTargetDirectory() != null)       goalPhase=Phases.OUTPUT;
      unit.compile(goalPhase);
      answer=collector.generatedClass;
      if (shouldCache) {
        for (Iterator iter=collector.getLoadedClasses().iterator(); iter.hasNext(); ) {
          Class clazz=(Class)iter.next();
          setClassCacheEntry(clazz);
        }
      }
    }
  finally {
      try {
        codeSource.getInputStream().close();
      }
 catch (      IOException e) {
        throw new GroovyRuntimeException("unable to close stream",e);
      }
    }
    return answer;
  }
}
