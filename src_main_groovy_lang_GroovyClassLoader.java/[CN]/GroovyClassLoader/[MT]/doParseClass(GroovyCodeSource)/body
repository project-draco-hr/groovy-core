{
  validate(codeSource);
  Class answer;
  CompilationUnit unit=createCompilationUnit(config,codeSource.getCodeSource());
  if (recompile != null && recompile || recompile == null && config.getRecompileGroovySource()) {
    unit.addFirstPhaseOperation(TimestampAdder.INSTANCE,CompilePhase.CLASS_GENERATION.getPhaseNumber());
  }
  SourceUnit su=null;
  File file=codeSource.getFile();
  if (file != null) {
    su=unit.addSource(file);
  }
 else {
    URL url=codeSource.getURL();
    if (url != null) {
      su=unit.addSource(url);
    }
 else {
      su=unit.addSource(codeSource.getName(),codeSource.getScriptText());
    }
  }
  ClassCollector collector=createCollector(unit,su);
  unit.setClassgenCallback(collector);
  int goalPhase=Phases.CLASS_GENERATION;
  if (config != null && config.getTargetDirectory() != null)   goalPhase=Phases.OUTPUT;
  unit.compile(goalPhase);
  answer=collector.generatedClass;
  String mainClass=su.getAST().getMainClassName();
  for (  Object o : collector.getLoadedClasses()) {
    Class clazz=(Class)o;
    String clazzName=clazz.getName();
    definePackage(clazzName);
    setClassCacheEntry(clazz);
    if (clazzName.equals(mainClass))     answer=clazz;
  }
  return answer;
}
