{
  Class cls=null;
synchronized (cache) {
    cls=(Class)cache.get(name);
    if (cls == NOT_RESOLVED.class)     throw new ClassNotFoundException(name);
    if (cls != null) {
      boolean reloadable=GroovyObject.class.isAssignableFrom(cls);
      if (!reloadable)       return cls;
    }
  }
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    String className=name.replace('/','.');
    int i=className.lastIndexOf('.');
    if (i != -1) {
      sm.checkPackageAccess(className.substring(0,i));
    }
  }
  ClassNotFoundException last=null;
  try {
    cls=super.loadClass(name,resolve);
  }
 catch (  ClassNotFoundException cnfe) {
    last=cnfe;
  }
catch (  NoClassDefFoundError ncdfe) {
    if (ncdfe.getMessage().indexOf("wrong name") > 0) {
      last=new ClassNotFoundException(name);
    }
 else {
      throw ncdfe;
    }
  }
  if (cls != null) {
    boolean recompile=false;
    recompile=getTimeStamp(cls) < Long.MAX_VALUE && GroovyObject.class.isAssignableFrom(cls);
    preferClassOverScript|=cls.getClassLoader() == this;
    preferClassOverScript|=!recompile;
    if (preferClassOverScript)     return cls;
  }
  if (lookupScriptFiles) {
    try {
      URL source=resourceLoader.loadGroovySource(name);
      if (source != null) {
        if ((cls != null && isSourceNewer(source,cls)) || (cls == null)) {
synchronized (cache) {
            cache.put(name,null);
          }
          cls=parseClass(source.openStream(),name);
        }
      }
    }
 catch (    Exception e) {
      cls=null;
      last=new ClassNotFoundException("Failed to parse groovy file: " + name,e);
    }
  }
  if (cls == null) {
    if (last == null)     throw new AssertionError(true);
synchronized (cache) {
      cache.put(name,NOT_RESOLVED.class);
    }
    throw last;
  }
synchronized (cache) {
    cache.put(name,cls);
  }
  return cls;
}
