{
  Class cls=getClassCacheEntry(name);
  boolean recompile=isRecompilable(cls);
  if (!recompile)   return cls;
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    String className=name.replace('/','.');
    int i=className.lastIndexOf('.');
    if (i != -1) {
      sm.checkPackageAccess(className.substring(0,i));
    }
  }
  ClassNotFoundException last=null;
  try {
    Class parentClassLoaderClass=super.loadClass(name,resolve);
    if (cls != parentClassLoaderClass)     return parentClassLoaderClass;
    cls=parentClassLoaderClass;
  }
 catch (  ClassNotFoundException cnfe) {
    last=cnfe;
  }
catch (  NoClassDefFoundError ncdfe) {
    if (ncdfe.getMessage().indexOf("wrong name") > 0) {
      last=new ClassNotFoundException(name);
    }
 else {
      throw ncdfe;
    }
  }
  if (cls != null) {
    preferClassOverScript|=!recompile;
    if (preferClassOverScript)     return cls;
  }
  if (lookupScriptFiles) {
synchronized (classCache) {
      try {
        if (getClassCacheEntry(name) != cls)         return getClassCacheEntry(name);
        URL source=resourceLoader.loadGroovySource(name);
        Class newCls=recompile(source,name,cls);
        if (newCls != null)         cls=newCls;
      }
 catch (      CompilationFailedException cfe) {
        last=new ClassNotFoundException("Failed to parse groovy source: " + name,cfe);
      }
catch (      IOException ioe) {
        last=new ClassNotFoundException("IOException while openening groovy source: " + name,ioe);
      }
 finally {
        if (cls == null) {
          removeClassCacheEntry(name);
        }
 else {
          setClassCacheEntry(cls);
        }
      }
    }
  }
  if (cls == null) {
    if (last == null)     throw new AssertionError(true);
    throw last;
  }
  return cls;
}
