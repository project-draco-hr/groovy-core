{
  if (klazz == null)   return null;
  if (klazz == Object.class)   return OBJECT_CLASS;
  if (klazz == String.class)   return STRING_CLASS;
  CachedClass cachedClass;
synchronized (CACHED_CLASS_MAP) {
    SoftReference ref=(SoftReference)CACHED_CLASS_MAP.get(klazz);
    if (ref == null || (cachedClass=(CachedClass)ref.get()) == null) {
      if (Number.class.isAssignableFrom(klazz) || klazz.isPrimitive()) {
        if (klazz == Number.class)         cachedClass=new CachedClass.NumberCachedClass(klazz);
 else         if (klazz == Integer.class || klazz == Integer.TYPE)         cachedClass=new CachedClass.IntegerCachedClass(klazz);
 else         if (klazz == Double.class || klazz == Double.TYPE)         cachedClass=new CachedClass.DoubleCachedClass(klazz);
 else         if (klazz == BigDecimal.class)         cachedClass=new CachedClass.BigDecimalCachedClass(klazz);
 else         if (klazz == Long.class || klazz == Long.TYPE)         cachedClass=new CachedClass.LongCachedClass(klazz);
 else         if (klazz == Float.class || klazz == Float.TYPE)         cachedClass=new CachedClass.FloatCachedClass(klazz);
 else         if (klazz == Short.class || klazz == Short.TYPE)         cachedClass=new CachedClass.ShortCachedClass(klazz);
 else         if (klazz == Boolean.TYPE)         cachedClass=new CachedClass.BooleanCachedClass(klazz);
 else         if (klazz == Character.TYPE)         cachedClass=new CachedClass.CharacterCachedClass(klazz);
 else         if (klazz == BigInteger.class)         cachedClass=new CachedClass.BigIntegerCachedClass(klazz);
 else         cachedClass=new CachedClass(klazz);
      }
 else       if (klazz.getName().charAt(0) == '[')       cachedClass=new CachedClass.ArrayCachedClass(klazz);
 else       if (klazz == Boolean.class)       cachedClass=new CachedClass.BooleanCachedClass(klazz);
 else       if (klazz == Character.class)       cachedClass=new CachedClass.CharacterCachedClass(klazz);
 else       cachedClass=new CachedClass(klazz);
      CACHED_CLASS_MAP.put(klazz,new SoftReference(cachedClass));
    }
  }
  return cachedClass;
}
