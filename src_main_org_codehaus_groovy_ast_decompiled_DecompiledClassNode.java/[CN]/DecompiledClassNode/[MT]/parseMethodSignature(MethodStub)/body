{
  Type[] argumentTypes=Type.getArgumentTypes(method.desc);
  Parameter[] parameters=new Parameter[argumentTypes.length];
  for (int i=0; i < argumentTypes.length; i++) {
    parameters[i]=new Parameter(resolver.resolveType(argumentTypes[i]),"param" + i);
  }
  for (  Map.Entry<Integer,List<AnnotationStub>> entry : method.parameterAnnotations.entrySet()) {
    for (    AnnotationStub stub : entry.getValue()) {
      parameters[entry.getKey()].addAnnotation(createAnnotationNode(stub));
    }
  }
  ClassNode[] exceptions=new ClassNode[method.exceptions.length];
  for (int i=0; i < method.exceptions.length; i++) {
    exceptions[i]=resolver.resolveClass(AsmDecompiler.fromInternalName(method.exceptions[i]));
  }
  return "<init>".equals(method.methodName) ? new ConstructorNode(method.accessModifiers,parameters,exceptions,null) : new MethodNode(method.methodName,method.accessModifiers,resolver.resolveType(Type.getReturnType(method.desc)),parameters,exceptions,null);
}
