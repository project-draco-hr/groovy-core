{
  if (value == null) {
    return Collections.EMPTY_LIST;
  }
 else   if (value instanceof Collection) {
    return (Collection)value;
  }
 else   if (value instanceof Map) {
    Map map=(Map)value;
    return map.entrySet();
  }
 else   if (value.getClass().isArray()) {
    return arrayAsCollection(value);
  }
 else   if (value instanceof MethodClosure) {
    MethodClosure method=(MethodClosure)value;
    IteratorClosureAdapter adapter=new IteratorClosureAdapter(method.getDelegate());
    method.call(adapter);
    return adapter.asList();
  }
 else   if (value instanceof String) {
    return StringGroovyMethods.toList((String)value);
  }
 else   if (value instanceof GString) {
    return StringGroovyMethods.toList(value.toString());
  }
 else   if (value instanceof File) {
    try {
      return ResourceGroovyMethods.readLines((File)value);
    }
 catch (    IOException e) {
      throw new GroovyRuntimeException("Error reading file: " + value,e);
    }
  }
 else   if (value instanceof Class && ((Class)value).isEnum()) {
    Object[] values=(Object[])InvokerHelper.invokeMethod(value,"values",EMPTY_OBJECT_ARRAY);
    return Arrays.asList(values);
  }
 else {
    return Collections.singletonList(value);
  }
}
