{
  if (left == right) {
    return 0;
  }
  if (left == null) {
    return -1;
  }
 else   if (right == null) {
    return 1;
  }
  if (left instanceof Comparable) {
    if (left instanceof Number) {
      if (isValidCharacterString(right)) {
        return DefaultGroovyMethods.compareTo((Number)left,ShortTypeHandling.castToChar(right));
      }
      if (right instanceof Character || right instanceof Number) {
        return DefaultGroovyMethods.compareTo((Number)left,castToNumber(right));
      }
    }
 else     if (left instanceof Character) {
      if (isValidCharacterString(right)) {
        return DefaultGroovyMethods.compareTo((Character)left,ShortTypeHandling.castToChar(right));
      }
      if (right instanceof Number) {
        return DefaultGroovyMethods.compareTo((Character)left,(Number)right);
      }
    }
 else     if (right instanceof Number) {
      if (isValidCharacterString(left)) {
        return DefaultGroovyMethods.compareTo(ShortTypeHandling.castToChar(left),(Number)right);
      }
    }
 else     if (left instanceof String && right instanceof Character) {
      return ((String)left).compareTo(right.toString());
    }
 else     if (left instanceof String && right instanceof GString) {
      return ((String)left).compareTo(right.toString());
    }
    if (!equalityCheckOnly || left.getClass().isAssignableFrom(right.getClass()) || (right.getClass() != Object.class && right.getClass().isAssignableFrom(left.getClass()))|| (left instanceof GString && right instanceof String)) {
      Comparable comparable=(Comparable)left;
      return comparable.compareTo(right);
    }
  }
  if (equalityCheckOnly) {
    return -1;
  }
  throw new GroovyRuntimeException("Cannot compare " + left.getClass().getName() + " with value '"+ left+ "' and "+ right.getClass().getName()+ " with value '"+ right+ "'");
}
