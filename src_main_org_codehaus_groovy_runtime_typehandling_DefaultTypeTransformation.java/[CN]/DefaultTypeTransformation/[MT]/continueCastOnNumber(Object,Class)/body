{
  if (Number.class.isAssignableFrom(type)) {
    Number n=castToNumber(object,type);
    if (type == Byte.class) {
      return n.byteValue();
    }
    if (type == Character.class) {
      return (char)n.intValue();
    }
    if (type == Short.class) {
      return n.shortValue();
    }
    if (type == Integer.class) {
      return n.intValue();
    }
    if (type == Long.class) {
      return n.longValue();
    }
    if (type == Float.class) {
      return n.floatValue();
    }
    if (type == Double.class) {
      Double answer=n.doubleValue();
      if (!(n instanceof Double) && (answer == Double.NEGATIVE_INFINITY || answer == Double.POSITIVE_INFINITY)) {
        throw new GroovyRuntimeException("Automatic coercion of " + n.getClass().getName() + " value "+ n+ " to double failed.  Value is out of range.");
      }
      return answer;
    }
    if (type == BigDecimal.class) {
      if (n instanceof Float || n instanceof Double) {
        return new BigDecimal(n.doubleValue());
      }
      return new BigDecimal(n.toString());
    }
    if (type == BigInteger.class) {
      if (object instanceof Float || object instanceof Double) {
        BigDecimal bd=new BigDecimal(n.doubleValue());
        return bd.toBigInteger();
      }
      if (object instanceof BigDecimal) {
        return ((BigDecimal)object).toBigInteger();
      }
      return new BigInteger(n.toString());
    }
  }
  return continueCastOnSAM(object,type);
}
