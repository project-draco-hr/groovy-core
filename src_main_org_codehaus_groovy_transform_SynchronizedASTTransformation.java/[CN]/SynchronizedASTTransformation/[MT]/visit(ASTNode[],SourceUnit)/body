{
  if (nodes.length != 2 || !(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof AnnotatedNode)) {
    throw new RuntimeException("Internal error: expecting [AnnotationNode, AnnotatedNode] but got: " + Arrays.asList(nodes));
  }
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  AnnotationNode node=(AnnotationNode)nodes[0];
  if (!MY_TYPE.equals(node.getClassNode()))   return;
  Expression valueExpr=node.getMember("value");
  String value=null;
  if (valueExpr instanceof ConstantExpression) {
    ConstantExpression ce=(ConstantExpression)valueExpr;
    Object valueObject=ce.getValue();
    if (valueObject != null)     value=valueObject.toString();
  }
  if (parent instanceof MethodNode) {
    MethodNode mNode=(MethodNode)parent;
    ClassNode cNode=mNode.getDeclaringClass();
    String lockExpr=determineLock(value,cNode,mNode.isStatic());
    Statement origCode=mNode.getCode();
    Statement newCode=new SynchronizedStatement(new VariableExpression(lockExpr),origCode);
    mNode.setCode(newCode);
  }
}
