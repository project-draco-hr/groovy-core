{
  List strings=new ArrayList();
  List values=new ArrayList();
  StringBuffer buffer=new StringBuffer();
  boolean isPrevString=false;
  for (AST node=gstringNode.getFirstChild(); node != null; node=node.getNextSibling()) {
    int type=node.getType();
    String text=null;
switch (type) {
case STRING_LITERAL:
      if (isPrevString)       assertNodeType(IDENT,node);
    isPrevString=true;
  text=node.getText();
ConstantExpression constantExpression=new ConstantExpression(text);
configureAST(constantExpression,node);
strings.add(constantExpression);
buffer.append(text);
break;
default :
{
if (!isPrevString) assertNodeType(IDENT,node);
isPrevString=false;
Expression expression=expression(node);
values.add(expression);
buffer.append("$");
buffer.append(expression.getText());
}
break;
}
}
GStringExpression gStringExpression=new GStringExpression(buffer.toString(),strings,values);
configureAST(gStringExpression,gstringNode);
return gStringExpression;
}
