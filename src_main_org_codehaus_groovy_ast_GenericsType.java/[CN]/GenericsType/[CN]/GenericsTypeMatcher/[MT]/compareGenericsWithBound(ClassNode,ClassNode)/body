{
  if (classNode == null)   return false;
  if (!bound.isUsingGenerics()) {
    return true;
  }
  if (!classNode.equals(bound)) {
    if (bound.isInterface()) {
      if (classNode.isInterface()) {
        return compareGenericsWithBound(classNode.getUnresolvedSuperClass(),bound);
      }
      Set<ClassNode> interfaces=classNode.getAllInterfaces();
      for (      ClassNode anInterface : interfaces) {
        if (anInterface.equals(bound)) {
          Map<String,ClassNode> parameters=new HashMap<String,ClassNode>();
          collectParameter(classNode,parameters);
          ClassNode node=ClassHelper.makeWithoutCaching(anInterface.getTypeClass(),false);
          GenericsType[] interfaceGTs=anInterface.getGenericsTypes();
          GenericsType[] types=new GenericsType[interfaceGTs.length];
          for (int i=0; i < interfaceGTs.length; i++) {
            GenericsType interfaceGT=interfaceGTs[i];
            types[i]=interfaceGT;
            if (interfaceGT.isPlaceholder()) {
              String name=interfaceGT.getName();
              if (parameters.containsKey(name)) {
                types[i]=new GenericsType(parameters.get(name));
              }
            }
          }
          node.setGenericsTypes(types);
          return compareGenericsWithBound(node,bound);
        }
      }
    }
    return compareGenericsWithBound(classNode.getUnresolvedSuperClass(),bound);
  }
  GenericsType[] cnTypes=classNode.getGenericsTypes();
  GenericsType[] uBTypes=bound.getGenericsTypes();
  Map<String,ClassNode> resolvedPlaceholders=placeholderToParameterizedType();
  boolean match=true;
  for (int i=0; i < uBTypes.length && match; i++) {
    GenericsType uBType=uBTypes[i];
    GenericsType cnType=cnTypes[i];
    if (cnType.isPlaceholder()) {
      String name=cnType.getName();
      if (resolvedPlaceholders.containsKey(name))       cnType=new GenericsType(resolvedPlaceholders.get(name));
    }
    match=uBType.isWildcard() || cnType.isCompatibleWith(uBType.getType());
  }
  if (!match)   return false;
  return true;
}
