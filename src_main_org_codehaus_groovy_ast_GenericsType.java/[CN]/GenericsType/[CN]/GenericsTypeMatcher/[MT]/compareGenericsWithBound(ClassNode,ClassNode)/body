{
  if (classNode == null)   return false;
  if (!bound.isUsingGenerics()) {
    return true;
  }
  if (!classNode.equals(bound)) {
    if (bound.isInterface()) {
      Set<ClassNode> interfaces=classNode.getAllInterfaces();
      for (      ClassNode anInterface : interfaces) {
        if (anInterface.equals(bound)) {
          ClassNode node=GenericsUtils.parameterizeType(classNode,anInterface);
          return compareGenericsWithBound(node,bound);
        }
      }
    }
    if (bound instanceof WideningCategories.LowestUpperBoundClassNode) {
      boolean success=compareGenericsWithBound(classNode,bound.getSuperClass());
      if (success) {
        ClassNode[] interfaces=bound.getInterfaces();
        for (        ClassNode anInterface : interfaces) {
          success&=compareGenericsWithBound(classNode,anInterface);
          if (!success)           break;
        }
      }
      if (success)       return true;
    }
    return compareGenericsWithBound(getParameterizedSuperClass(classNode),bound);
  }
  GenericsType[] cnTypes=classNode.getGenericsTypes();
  if (cnTypes == null && classNode.isRedirectNode())   cnTypes=classNode.redirect().getGenericsTypes();
  if (cnTypes == null) {
    return true;
  }
  GenericsType[] redirectBoundGenericTypes=bound.redirect().getGenericsTypes();
  Map<String,GenericsType> classNodePlaceholders=GenericsUtils.extractPlaceholders(classNode);
  Map<String,GenericsType> boundPlaceHolders=GenericsUtils.extractPlaceholders(bound);
  boolean match=true;
  for (int i=0; redirectBoundGenericTypes != null && i < redirectBoundGenericTypes.length && match; i++) {
    GenericsType redirectBoundType=redirectBoundGenericTypes[i];
    GenericsType classNodeType=cnTypes[i];
    if (classNodeType.isPlaceholder()) {
      if (redirectBoundType.isPlaceholder()) {
        match=classNodeType.getName().equals(redirectBoundType.getName());
      }
 else {
        String name=classNodeType.getName();
        if (classNodePlaceholders.containsKey(name))         classNodeType=classNodePlaceholders.get(name);
        match=classNodeType.isCompatibleWith(redirectBoundType.getType());
      }
    }
 else {
      if (redirectBoundType.isPlaceholder()) {
        if (classNodeType.isPlaceholder()) {
          match=classNodeType.getName().equals(redirectBoundType.getName());
        }
 else {
          String name=redirectBoundType.getName();
          if (boundPlaceHolders.containsKey(name)) {
            redirectBoundType=boundPlaceHolders.get(name);
            boolean wildcard=redirectBoundType.isWildcard();
            boolean placeholder=redirectBoundType.isPlaceholder();
            if (placeholder || wildcard) {
              if (wildcard) {
                if (redirectBoundType.lowerBound != null) {
                  GenericsType gt=new GenericsType(redirectBoundType.lowerBound);
                  if (gt.isPlaceholder()) {
                    if (classNodePlaceholders.containsKey(gt.getName())) {
                      gt=classNodePlaceholders.get(gt.getName());
                    }
                  }
                  match=implementsInterfaceOrIsSubclassOf(gt.getType(),classNodeType.getType());
                }
                if (match && redirectBoundType.upperBounds != null) {
                  for (                  ClassNode upperBound : redirectBoundType.upperBounds) {
                    GenericsType gt=new GenericsType(upperBound);
                    if (gt.isPlaceholder()) {
                      if (classNodePlaceholders.containsKey(gt.getName())) {
                        gt=classNodePlaceholders.get(gt.getName());
                      }
                    }
                    match=match && implementsInterfaceOrIsSubclassOf(classNodeType.getType(),gt.getType());
                    if (!match)                     break;
                  }
                }
                return match;
              }
 else {
                redirectBoundType=classNodePlaceholders.get(name);
              }
            }
          }
          match=redirectBoundType.isCompatibleWith(classNodeType.getType());
        }
      }
 else {
        match=classNodeType.isCompatibleWith(redirectBoundType.getType());
      }
    }
  }
  if (!match)   return false;
  return true;
}
