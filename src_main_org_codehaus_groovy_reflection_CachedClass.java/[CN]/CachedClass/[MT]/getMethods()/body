{
  if (methods == null) {
    final Method[] declaredMethods=(Method[])AccessController.doPrivileged(new PrivilegedAction(){
      public Object run(){
        return getCachedClass().getDeclaredMethods();
      }
    }
);
    ArrayList methods=new ArrayList(declaredMethods.length);
    ArrayList mopMethods=new ArrayList(declaredMethods.length);
    for (int i=0; i != declaredMethods.length; ++i) {
      final CachedMethod cachedMethod=new CachedMethod(this,declaredMethods[i]);
      final String name=cachedMethod.getName();
      if (name.indexOf('+') >= 0) {
        continue;
      }
      if (name.startsWith("this$") || name.startsWith("super$"))       mopMethods.add(cachedMethod);
 else       methods.add(cachedMethod);
    }
    this.methods=(CachedMethod[])methods.toArray(new CachedMethod[methods.size()]);
    Arrays.sort(this.methods);
    final CachedClass superClass=getCachedSuperClass();
    if (superClass != null) {
      superClass.getMethods();
      final CachedMethod[] superMopMethods=superClass.mopMethods;
      for (int i=0; i != superMopMethods.length; ++i)       mopMethods.add(superMopMethods[i]);
    }
    this.mopMethods=(CachedMethod[])mopMethods.toArray(new CachedMethod[mopMethods.size()]);
    Arrays.sort(this.mopMethods,CachedMethodComparatorByName.INSTANCE);
  }
  return methods;
}
