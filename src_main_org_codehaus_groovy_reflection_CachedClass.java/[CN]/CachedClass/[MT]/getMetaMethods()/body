{
  if (metaMethods == null) {
    getMethods();
    ArrayList arr=new ArrayList(methods.length);
    for (int i=0; i != methods.length; ++i) {
      final CachedMethod cachedMethod=methods[i];
      if (cachedMethod.getName().indexOf('+') >= 0) {
        continue;
      }
      String name=cachedMethod.getName();
      if (name.startsWith("super$") || name.startsWith("this$")) {
        if (mopMethods == null) {
          mopMethods=new ArrayList();
        }
        mopMethods.add(cachedMethod.getReflectionMetaMethod());
      }
 else       arr.add(cachedMethod.getReflectionMetaMethod());
    }
    final MetaClassRegistryImpl metaClassRegistry=(MetaClassRegistryImpl)GroovySystem.getMetaClassRegistry();
    FastArray methods;
    methods=metaClassRegistry.getInstanceMethods();
    for (int i=0; i != methods.size; ++i) {
      MetaMethod element=(MetaMethod)methods.get(i);
      if (element.getDeclaringClass() != this)       continue;
      arr.add(element);
    }
    methods=metaClassRegistry.getStaticMethods();
    for (int i=0; i != methods.size; ++i) {
      MetaMethod element=(MetaMethod)methods.get(i);
      if (element.getDeclaringClass() != this)       continue;
      arr.add(element);
    }
    metaMethods=(MetaMethod[])arr.toArray(new MetaMethod[arr.size()]);
  }
  return metaMethods;
}
