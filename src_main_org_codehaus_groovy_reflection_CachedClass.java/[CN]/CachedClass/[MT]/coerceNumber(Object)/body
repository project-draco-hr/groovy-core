{
  if (argument instanceof Number && (isNumber || isPrimitive)) {
    Object oldArgument=argument;
    boolean wasDouble=false;
    boolean wasFloat=false;
    Class param=getCachedClass();
    if (param == Byte.class || param == Byte.TYPE) {
      argument=new Byte(((Number)argument).byteValue());
    }
 else     if (param == Double.class || param == Double.TYPE) {
      wasDouble=true;
      argument=new Double(((Number)argument).doubleValue());
    }
 else     if (param == Float.class || param == Float.TYPE) {
      wasFloat=true;
      argument=new Float(((Number)argument).floatValue());
    }
 else     if (param == Integer.class || param == Integer.TYPE) {
      argument=new Integer(((Number)argument).intValue());
    }
 else     if (param == Long.class || param == Long.TYPE) {
      argument=new Long(((Number)argument).longValue());
    }
 else     if (param == Short.class || param == Short.TYPE) {
      argument=new Short(((Number)argument).shortValue());
    }
 else     if (param == BigDecimal.class) {
      argument=new BigDecimal(String.valueOf((Number)argument));
    }
 else     if (param == BigInteger.class) {
      argument=new BigInteger(String.valueOf((Number)argument));
    }
    if (oldArgument instanceof BigDecimal) {
      BigDecimal oldbd=(BigDecimal)oldArgument;
      boolean throwException=false;
      if (wasDouble) {
        Double d=(Double)argument;
        if (d.isInfinite())         throwException=true;
      }
 else       if (wasFloat) {
        Float f=(Float)argument;
        if (f.isInfinite())         throwException=true;
      }
 else {
        BigDecimal newbd=new BigDecimal(String.valueOf((Number)argument));
        throwException=!oldArgument.equals(newbd);
      }
      if (throwException)       throw new IllegalArgumentException(param + " out of range while converting from BigDecimal");
    }
  }
  return argument;
}
