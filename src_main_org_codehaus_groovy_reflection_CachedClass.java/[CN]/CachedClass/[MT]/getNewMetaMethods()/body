{
  ArrayList<MetaMethod> arr=new ArrayList<MetaMethod>();
  arr.addAll(Arrays.asList(classInfo.newMetaMethods));
  final MetaClass metaClass=classInfo.getStrongMetaClass();
  if (metaClass != null && metaClass instanceof ExpandoMetaClass) {
    arr.addAll(((ExpandoMetaClass)metaClass).getExpandoMethods());
  }
  if (isInterface) {
    MetaClass mc=ReflectionCache.OBJECT_CLASS.classInfo.getStrongMetaClass();
    addSubclassExpandos(arr,mc);
  }
 else {
    for (CachedClass cls=this; cls != null; cls=cls.getCachedSuperClass()) {
      MetaClass mc=cls.classInfo.getStrongMetaClass();
      addSubclassExpandos(arr,mc);
    }
  }
  for (  CachedClass inf : getInterfaces()) {
    MetaClass mc=inf.classInfo.getStrongMetaClass();
    addSubclassExpandos(arr,mc);
  }
  return arr.toArray(new MetaMethod[arr.size()]);
}
