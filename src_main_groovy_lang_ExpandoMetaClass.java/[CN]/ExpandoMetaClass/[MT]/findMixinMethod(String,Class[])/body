{
  for (  MixinInMetaClass mixin : mixinClasses) {
    final CachedClass mixinClass=mixin.getMixinClass();
    MetaClass metaClass=mixinClass.classInfo.getMetaClassForClass();
    if (metaClass == null) {
      metaClass=GroovySystem.getMetaClassRegistry().getMetaClass(mixinClass.getTheClass());
    }
    MetaMethod metaMethod=metaClass.pickMethod(methodName,arguments);
    if (metaMethod == null && metaClass instanceof MetaClassImpl) {
      MetaClassImpl mc=(MetaClassImpl)metaClass;
      for (CachedClass cl=mc.getTheCachedClass().getCachedSuperClass(); cl != null; cl=cl.getCachedSuperClass()) {
        metaMethod=mc.getMethodWithoutCaching(cl.getTheClass(),methodName,arguments,false);
        if (metaMethod != null)         break;
      }
    }
    if (metaMethod != null) {
      MetaMethod method=new MixinInstanceMetaMethod(metaMethod,mixin);
      if (method.getParameterTypes().length == 1 && !method.getParameterTypes()[0].isPrimitive) {
        MetaMethod noParam=pickMethod(methodName,EMPTY_CLASS_ARRAY);
        if (noParam == null && arguments.length != 0) {
          try {
            findMixinMethod(methodName,EMPTY_CLASS_ARRAY);
          }
 catch (          MethodSelectionException msex) {
          }
        }
      }
      registerInstanceMethod(method);
      return method;
    }
  }
  return null;
}
