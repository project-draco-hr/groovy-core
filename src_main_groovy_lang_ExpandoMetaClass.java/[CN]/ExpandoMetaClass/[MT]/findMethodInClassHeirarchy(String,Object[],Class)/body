{
  MetaMethod method=null;
  final Class superClass=theClass.getSuperclass();
  MetaClass metaClass=this.registry.getMetaClass(superClass);
  if (metaClass instanceof MutableMetaClass) {
    method=getMetaMethodFromMutableMetaClass(methodName,arguments,metaClass);
    if (method == null) {
      if (superClass != Object.class) {
        method=findMethodInClassHeirarchy(methodName,arguments,superClass);
      }
      if (method == null) {
        final Class[] interfaces=theClass.getInterfaces();
        method=searchInterfacesForMetaMethod(methodName,arguments,interfaces);
      }
    }
  }
  return method;
}
