{
  if (parameter == argument)   return 0;
  if (parameter.isInterface()) {
    long ret=PRIMITIVES.length;
    ret=(ret << 32) | getMaximumInterfaceDistance(argument,parameter);
    return ret;
  }
  long objectDistance=0;
  if (argument != null) {
    if (parameter.isArray()) {
      if (argument.isArray()) {
        return calculateParameterDistance(argument.getComponentType(),parameter.getComponentType());
      }
 else {
        parameter=parameter.getComponentType();
        objectDistance++;
      }
    }
 else     if (argument.isArray()) {
      objectDistance++;
    }
    long pd=getPrimitiveDistance(parameter,argument);
    if (pd != -1)     return pd << 33;
    objectDistance+=PRIMITIVES.length << 1 + 1;
    Class clazz=ReflectionCache.autoboxType(argument);
    while (clazz != null) {
      if (clazz == parameter)       break;
      if (clazz == GString.class && parameter == String.class) {
        objectDistance+=2;
        break;
      }
      clazz=clazz.getSuperclass();
      objectDistance+=3;
    }
  }
 else {
    objectDistance--;
    Class clazz=parameter;
    if (clazz.isPrimitive()) {
      objectDistance+=2;
    }
 else {
      while (clazz != Object.class) {
        clazz=clazz.getSuperclass();
        objectDistance+=2;
      }
    }
  }
  return objectDistance << 32;
}
