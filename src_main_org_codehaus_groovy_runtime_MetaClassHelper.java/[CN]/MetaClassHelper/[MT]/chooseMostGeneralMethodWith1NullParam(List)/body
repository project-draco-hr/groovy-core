{
  CachedClass closestClass=null;
  CachedClass closestVargsClass=null;
  Object answer=null;
  int closestDist=-1;
  for (Iterator iter=methods.iterator(); iter.hasNext(); ) {
    Object method=iter.next();
    final ParameterTypes pt=getParameterTypes(method);
    CachedClass[] paramTypes=pt.getParameterTypes();
    int paramLength=paramTypes.length;
    if (paramLength == 0 || paramLength > 2)     continue;
    CachedClass theType=paramTypes[0];
    if (theType.isPrimitive)     continue;
    if (paramLength == 2) {
      if (!pt.isVargsMethod(ARRAY_WITH_NULL))       continue;
      if (closestClass == null) {
        closestVargsClass=paramTypes[1];
        closestClass=theType;
        answer=method;
      }
 else       if (closestClass.cachedClass == theType.cachedClass) {
        if (closestVargsClass == null)         continue;
        CachedClass newVargsClass=paramTypes[1];
        if (closestVargsClass == null || isAssignableFrom(newVargsClass.cachedClass,closestVargsClass.cachedClass)) {
          closestVargsClass=newVargsClass;
          answer=method;
        }
      }
 else       if (isAssignableFrom(theType.cachedClass,closestClass.cachedClass)) {
        closestVargsClass=paramTypes[1];
        closestClass=theType;
        answer=method;
      }
    }
 else {
      if (closestClass == null || isAssignableFrom(theType.cachedClass,closestClass.cachedClass)) {
        closestVargsClass=null;
        closestClass=theType;
        answer=method;
        closestDist=-1;
      }
 else {
        if (closestDist == -1)         closestDist=closestClass.getSuperClassDistance();
        int newDist=theType.getSuperClassDistance();
        if (newDist < closestDist) {
          closestDist=newDist;
          closestVargsClass=null;
          closestClass=theType;
          answer=method;
        }
      }
    }
  }
  return answer;
}
