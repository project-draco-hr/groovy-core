{
  Class closestClass=null;
  Class closestVargsClass=null;
  Object answer=null;
  for (Iterator iter=methods.iterator(); iter.hasNext(); ) {
    Object method=iter.next();
    final ParameterTypes pt=getParameterTypes(method);
    CachedClass[] paramTypes=pt.getParameterTypes();
    int paramLength=paramTypes.length;
    if (paramLength == 0 || paramLength > 2)     continue;
    CachedClass theType=paramTypes[0];
    if (theType.isPrimitive)     continue;
    if (paramLength == 2) {
      if (!isVargsMethod(pt,ARRAY_WITH_NULL))       continue;
      if (closestClass == theType.getCachedClass()) {
        if (closestVargsClass == null)         continue;
        Class newVargsClass=paramTypes[1].getCachedClass();
        if (closestVargsClass == null || isAssignableFrom(newVargsClass,closestVargsClass)) {
          closestVargsClass=newVargsClass;
          answer=method;
        }
      }
 else       if (closestClass == null || isAssignableFrom(theType.getCachedClass(),closestClass)) {
        closestVargsClass=paramTypes[1].getCachedClass();
        closestClass=theType.getCachedClass();
        answer=method;
      }
    }
 else {
      if (closestClass == null || isAssignableFrom(theType.getCachedClass(),closestClass)) {
        closestVargsClass=null;
        closestClass=theType.getCachedClass();
        answer=method;
      }
    }
  }
  return answer;
}
