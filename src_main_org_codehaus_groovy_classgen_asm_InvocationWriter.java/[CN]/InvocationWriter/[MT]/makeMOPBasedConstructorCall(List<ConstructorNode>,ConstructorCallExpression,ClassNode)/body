{
  MethodVisitor mv=controller.getMethodVisitor();
  OperandStack operandStack=controller.getOperandStack();
  call.getArguments().visit(controller.getAcg());
  mv.visitInsn(DUP);
  BytecodeHelper.pushConstant(mv,-1);
  controller.getAcg().visitClassExpression(new ClassExpression(callNode));
  operandStack.remove(1);
  selectConstructorAndTransformArguments.call(mv);
  if (controller.isConstructor()) {
    mv.visitVarInsn(ALOAD,0);
  }
 else {
    mv.visitTypeInsn(NEW,BytecodeHelper.getClassInternalName(callNode));
  }
  mv.visitInsn(SWAP);
  TreeMap<Integer,ConstructorNode> sortedConstructors=new TreeMap<Integer,ConstructorNode>();
  for (  ConstructorNode constructor : constructors) {
    String typeDescriptor=BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE,constructor.getParameters());
    int hash=BytecodeHelper.hashCode(typeDescriptor);
    ConstructorNode sameHashNode=sortedConstructors.put(hash,constructor);
    if (sameHashNode != null) {
      controller.getSourceUnit().addError(new SyntaxException("Unable to compile class " + controller.getClassNode().getName() + " due to hash collision in constructors",call.getLineNumber(),call.getColumnNumber()));
    }
  }
  Label[] targets=new Label[constructors.size()];
  int[] indices=new int[constructors.size()];
  Iterator<Integer> hashIt=sortedConstructors.keySet().iterator();
  Iterator<ConstructorNode> constructorIt=sortedConstructors.values().iterator();
  for (int i=0; i < targets.length; i++) {
    targets[i]=new Label();
    indices[i]=hashIt.next();
  }
  Label defaultLabel=new Label();
  Label afterSwitch=new Label();
  mv.visitLookupSwitchInsn(defaultLabel,indices,targets);
  for (int i=0; i < targets.length; i++) {
    mv.visitLabel(targets[i]);
    if (controller.isConstructor()) {
      mv.visitInsn(SWAP);
      mv.visitInsn(DUP_X1);
    }
 else {
      mv.visitInsn(DUP_X1);
      mv.visitInsn(DUP2_X1);
      mv.visitInsn(POP);
    }
    ConstructorNode cn=constructorIt.next();
    String descriptor=BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE,cn.getParameters());
    Parameter[] parameters=cn.getParameters();
    int lengthWithoutVargs=parameters.length;
    if (parameters.length > 0 && parameters[parameters.length - 1].getType().isArray()) {
      lengthWithoutVargs--;
    }
    for (int p=0; p < lengthWithoutVargs; p++) {
      loadAndCastElement(operandStack,mv,parameters,p);
    }
    if (parameters.length > lengthWithoutVargs) {
      ClassNode type=parameters[lengthWithoutVargs].getType();
      BytecodeHelper.pushConstant(mv,lengthWithoutVargs);
      controller.getAcg().visitClassExpression(new ClassExpression(type));
      operandStack.remove(1);
      castToVargsArray.call(mv);
      BytecodeHelper.doCast(mv,type);
    }
 else {
      mv.visitInsn(POP);
    }
    mv.visitMethodInsn(INVOKESPECIAL,BytecodeHelper.getClassInternalName(callNode),"<init>",descriptor,false);
    mv.visitJumpInsn(GOTO,afterSwitch);
  }
  mv.visitLabel(defaultLabel);
  mv.visitTypeInsn(NEW,"java/lang/IllegalArgumentException");
  mv.visitInsn(DUP);
  mv.visitLdcInsn("This class has been compiled with a super class which is binary incompatible with the current super class found on classpath. You should recompile this class with the new version.");
  mv.visitMethodInsn(INVOKESPECIAL,"java/lang/IllegalArgumentException","<init>","(Ljava/lang/String;)V",false);
  mv.visitInsn(ATHROW);
  mv.visitLabel(afterSwitch);
  if (!controller.isConstructor()) {
    mv.visitInsn(SWAP);
    operandStack.push(callNode);
  }
  mv.visitInsn(POP);
}
