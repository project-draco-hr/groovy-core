{
  if (adapter == invokeMethodOnCurrent && controller.optimizeForInt && controller.isFastPath()) {
    String methodName=getMethodName(message);
    if (methodName != null) {
      List<Parameter> plist=new ArrayList(16);
      TupleExpression args;
      if (arguments instanceof TupleExpression) {
        args=(TupleExpression)arguments;
        for (        Expression arg : args.getExpressions()) {
          plist.add(new Parameter(arg.getType(),""));
        }
      }
 else {
        args=new TupleExpression(receiver);
        plist.add(new Parameter(arguments.getType(),""));
      }
      StatementMeta meta=null;
      if (origin != null)       meta=(StatementMeta)origin.getNodeMetaData(StatementMeta.class);
      MethodNode mn=null;
      if (meta != null)       mn=meta.target;
      if (mn != null) {
        MethodVisitor mv=controller.getMethodVisitor();
        int opcode=INVOKEVIRTUAL;
        if (mn.isStatic()) {
          opcode=INVOKESTATIC;
        }
 else         if (mn.isPrivate()) {
          opcode=INVOKESPECIAL;
        }
        if (opcode != INVOKESTATIC)         mv.visitIntInsn(ALOAD,0);
        for (        Expression arg : args.getExpressions()) {
          arg.visit(controller.getAcg());
          ClassNode type=arg.getType();
          if (!ClassHelper.isPrimitiveType(type)) {
            BytecodeHelper.doCast(mv,type);
          }
        }
        String owner=BytecodeHelper.getClassInternalName(mn.getDeclaringClass());
        String desc=BytecodeHelper.getMethodDescriptor(mn.getReturnType(),mn.getParameters());
        mv.visitMethodInsn(opcode,owner,methodName,desc);
        ClassNode ret=mn.getReturnType().redirect();
        if (ret == ClassHelper.VOID_TYPE) {
          ret=ClassHelper.OBJECT_TYPE;
          mv.visitInsn(ACONST_NULL);
        }
        controller.getOperandStack().replace(ret,args.getExpressions().size());
        return;
      }
    }
  }
  if ((adapter == invokeMethod || adapter == invokeMethodOnCurrent || adapter == invokeStaticMethod) && !spreadSafe) {
    String methodName=getMethodName(message);
    if (methodName != null) {
      controller.getCallSiteWriter().makeCallSite(receiver,methodName,arguments,safe,implicitThis,adapter == invokeMethodOnCurrent,adapter == invokeStaticMethod);
      return;
    }
  }
  OperandStack operandStack=controller.getOperandStack();
  CompileStack compileStack=controller.getCompileStack();
  AsmClassGenerator acg=controller.getAcg();
  compileStack.pushLHS(false);
  if (adapter == AsmClassGenerator.setProperty) {
    ConstantExpression.NULL.visit(acg);
  }
 else {
    sender.visit(acg);
  }
  compileStack.pushImplicitThis(implicitThis);
  receiver.visit(acg);
  operandStack.box();
  compileStack.popImplicitThis();
  int operandsToRemove=2;
  if (message != null) {
    message.visit(acg);
    operandStack.box();
    operandsToRemove++;
  }
  boolean containsSpreadExpression=AsmClassGenerator.containsSpreadExpression(arguments);
  int numberOfArguments=containsSpreadExpression ? -1 : AsmClassGenerator.argumentSize(arguments);
  if (numberOfArguments > MethodCallerMultiAdapter.MAX_ARGS || containsSpreadExpression) {
    ArgumentListExpression ae;
    if (arguments instanceof ArgumentListExpression) {
      ae=(ArgumentListExpression)arguments;
    }
 else     if (arguments instanceof TupleExpression) {
      TupleExpression te=(TupleExpression)arguments;
      ae=new ArgumentListExpression(te.getExpressions());
    }
 else {
      ae=new ArgumentListExpression();
      ae.addExpression(arguments);
    }
    if (containsSpreadExpression) {
      acg.despreadList(ae.getExpressions(),true);
    }
 else {
      ae.visit(acg);
    }
  }
 else   if (numberOfArguments > 0) {
    operandsToRemove+=numberOfArguments;
    TupleExpression te=(TupleExpression)arguments;
    for (int i=0; i < numberOfArguments; i++) {
      Expression argument=te.getExpression(i);
      argument.visit(acg);
      operandStack.box();
      if (argument instanceof CastExpression)       acg.loadWrapper(argument);
    }
  }
  adapter.call(controller.getMethodVisitor(),numberOfArguments,safe,spreadSafe);
  compileStack.popLHS();
  operandStack.replace(ClassHelper.OBJECT_TYPE,operandsToRemove);
}
