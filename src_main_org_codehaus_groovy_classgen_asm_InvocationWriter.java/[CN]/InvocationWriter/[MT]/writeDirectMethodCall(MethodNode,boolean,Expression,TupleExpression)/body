{
  if (target == null)   return false;
  String methodName=target.getName();
  CompileStack compileStack=controller.getCompileStack();
  OperandStack operandStack=controller.getOperandStack();
  ClassNode declaringClass=target.getDeclaringClass();
  ClassNode classNode=controller.getClassNode();
  MethodVisitor mv=controller.getMethodVisitor();
  int opcode=INVOKEVIRTUAL;
  if (target.isStatic()) {
    opcode=INVOKESTATIC;
  }
 else   if (target.isPrivate() || ((receiver instanceof VariableExpression && ((VariableExpression)receiver).isSuperExpression()))) {
    opcode=INVOKESPECIAL;
  }
 else   if (declaringClass.isInterface()) {
    opcode=INVOKEINTERFACE;
  }
  int argumentsToRemove=0;
  if (opcode != INVOKESTATIC) {
    if (receiver != null) {
      if (implicitThis && !classNode.isDerivedFrom(declaringClass) && !classNode.implementsInterface(declaringClass)&& classNode instanceof InnerClassNode) {
        compileStack.pushImplicitThis(false);
        if (controller.isInClosure()) {
          new VariableExpression("thisObject").visit(controller.getAcg());
        }
 else {
          Expression expr=new PropertyExpression(new ClassExpression(declaringClass),"this");
          expr.visit(controller.getAcg());
        }
      }
 else {
        compileStack.pushImplicitThis(implicitThis);
        receiver.visit(controller.getAcg());
      }
      operandStack.doGroovyCast(declaringClass);
      compileStack.popImplicitThis();
      argumentsToRemove++;
    }
 else {
      mv.visitIntInsn(ALOAD,0);
      operandStack.push(classNode);
      argumentsToRemove++;
    }
  }
  int stackSize=operandStack.getStackLength();
  String owner=BytecodeHelper.getClassInternalName(declaringClass);
  ClassNode receiverType=receiver != null ? controller.getTypeChooser().resolveType(receiver,classNode) : target.getDeclaringClass();
  if (opcode == INVOKEVIRTUAL) {
    if (!receiverType.equals(declaringClass) && !receiverType.isArray() && !receiverType.isInterface()&& !ClassHelper.isPrimitiveType(receiverType)&& receiverType.isDerivedFrom(declaringClass)) {
      owner=BytecodeHelper.getClassInternalName(receiverType);
      ClassNode top=operandStack.getTopOperand();
      if (!receiverType.equals(top)) {
        mv.visitTypeInsn(CHECKCAST,owner);
      }
    }
 else     if (target.isPublic() && (!Modifier.isPublic(declaringClass.getModifiers()) && !receiverType.equals(declaringClass)) && receiverType.isDerivedFrom(declaringClass)&& !receiverType.getPackageName().equals(classNode.getPackageName())) {
      owner=BytecodeHelper.getClassInternalName(receiverType);
    }
  }
  loadArguments(args.getExpressions(),target.getParameters());
  String desc=BytecodeHelper.getMethodDescriptor(target.getReturnType(),target.getParameters());
  mv.visitMethodInsn(opcode,owner,methodName,desc,opcode == INVOKEINTERFACE);
  ClassNode ret=target.getReturnType().redirect();
  if (ret == ClassHelper.VOID_TYPE) {
    ret=ClassHelper.OBJECT_TYPE;
    mv.visitInsn(ACONST_NULL);
  }
  argumentsToRemove+=(operandStack.getStackLength() - stackSize);
  controller.getOperandStack().remove(argumentsToRemove);
  controller.getOperandStack().push(ret);
  return true;
}
