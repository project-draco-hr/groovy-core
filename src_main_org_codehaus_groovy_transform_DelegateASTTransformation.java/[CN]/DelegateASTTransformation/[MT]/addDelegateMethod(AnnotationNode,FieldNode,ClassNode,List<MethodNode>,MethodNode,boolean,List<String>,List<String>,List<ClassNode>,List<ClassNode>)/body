{
  if (!candidate.isPublic() || candidate.isStatic() || 0 != (candidate.getModifiers() & Opcodes.ACC_SYNTHETIC))   return;
  if (!candidate.getAnnotations(DEPRECATED_TYPE).isEmpty() && !includeDeprecated)   return;
  if (shouldSkip(candidate.getName(),excludes,includes))   return;
  Map genericsSpec=Verifier.createGenericsSpec(fieldNode.getDeclaringClass(),new HashMap());
  genericsSpec=Verifier.createGenericsSpec(fieldNode.getType(),genericsSpec);
  if (!excludeTypes.isEmpty() || !includeTypes.isEmpty()) {
    String correctedTypeDescriptor=correctToGenericsSpec(genericsSpec,candidate).getTypeDescriptor();
    if (shouldSkipOnDescriptor(genericsSpec,correctedTypeDescriptor,excludeTypes,includeTypes))     return;
  }
  for (  MethodNode mn : GROOVYOBJECT_TYPE.getMethods()) {
    if (mn.getTypeDescriptor().equals(candidate.getTypeDescriptor())) {
      return;
    }
  }
  for (  MethodNode mn : owner.getMethods()) {
    if (mn.getTypeDescriptor().equals(candidate.getTypeDescriptor())) {
      return;
    }
  }
  MethodNode existingNode=null;
  for (  MethodNode mn : ownMethods) {
    if (mn.getTypeDescriptor().equals(candidate.getTypeDescriptor()) && !mn.isAbstract() && !mn.isStatic()) {
      existingNode=mn;
      break;
    }
  }
  if (existingNode == null || existingNode.getCode() == null) {
    final boolean includeParameterAnnotations=hasBooleanValue(node.getMember(MEMBER_PARAMETER_ANNOTATIONS),true);
    final ArgumentListExpression args=new ArgumentListExpression();
    final Parameter[] params=candidate.getParameters();
    final Parameter[] newParams=new Parameter[params.length];
    for (int i=0; i < newParams.length; i++) {
      Parameter newParam=new Parameter(correctToGenericsSpecRecurse(genericsSpec,params[i].getType()),getParamName(params,i,fieldNode.getName()));
      newParam.setInitialExpression(params[i].getInitialExpression());
      if (includeParameterAnnotations)       newParam.addAnnotations(copyAnnotatedNodeAnnotations(params[i].getAnnotations(),newParam));
      newParams[i]=newParam;
      args.addExpression(new VariableExpression(newParam));
    }
    MethodCallExpression mce=new MethodCallExpression(new VariableExpression(fieldNode.getName(),correctToGenericsSpecRecurse(genericsSpec,fieldNode.getType())),candidate.getName(),args);
    mce.setSourcePosition(fieldNode);
    ClassNode returnType=correctToGenericsSpecRecurse(genericsSpec,candidate.getReturnType());
    MethodNode newMethod=owner.addMethod(candidate.getName(),candidate.getModifiers() & (~ACC_ABSTRACT) & (~ACC_NATIVE),returnType,newParams,candidate.getExceptions(),new ExpressionStatement(mce));
    newMethod.setGenericsTypes(candidate.getGenericsTypes());
    if (hasBooleanValue(node.getMember(MEMBER_METHOD_ANNOTATIONS),true)) {
      newMethod.addAnnotations(copyAnnotatedNodeAnnotations(candidate.getAnnotations(),newMethod));
    }
  }
}
