{
  final ArrayList<AnnotationNode> delegateAnnotations=new ArrayList<AnnotationNode>();
  final ClassNode retentionClassNode=ClassHelper.makeWithoutCaching(Retention.class);
  for (  AnnotationNode annotation : candidateAnnotations) {
    List<AnnotationNode> annotations=annotation.getClassNode().getAnnotations(retentionClassNode);
    if (annotations.isEmpty())     continue;
    if (hasClosureMember(annotation)) {
      addError(MY_TYPE_NAME + " does not support keeping Closure annotation members.",annotation);
      continue;
    }
    AnnotationNode retentionPolicyAnnotation=annotations.get(0);
    Expression valueExpression=retentionPolicyAnnotation.getMember("value");
    if (!(valueExpression instanceof PropertyExpression))     continue;
    PropertyExpression propertyExpression=(PropertyExpression)valueExpression;
    boolean processAnnotation=propertyExpression.getProperty() instanceof ConstantExpression && ("RUNTIME".equals(((ConstantExpression)(propertyExpression.getProperty())).getValue()) || "CLASS".equals(((ConstantExpression)(propertyExpression.getProperty())).getValue()));
    if (processAnnotation) {
      AnnotationNode newAnnotation=new AnnotationNode(annotation.getClassNode());
      for (      Map.Entry<String,Expression> member : annotation.getMembers().entrySet()) {
        newAnnotation.addMember(member.getKey(),member.getValue());
      }
      newAnnotation.setSourcePosition(annotatedNode);
      delegateAnnotations.add(newAnnotation);
    }
  }
  return delegateAnnotations;
}
