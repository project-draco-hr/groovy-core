{
  init(nodes,source);
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  AnnotationNode node=(AnnotationNode)nodes[0];
  if (parent instanceof FieldNode) {
    FieldNode fieldNode=(FieldNode)parent;
    final ClassNode type=fieldNode.getType();
    final ClassNode owner=fieldNode.getOwner();
    if (type.equals(ClassHelper.OBJECT_TYPE) || type.equals(GROOVYOBJECT_TYPE)) {
      addError("@Delegate field '" + fieldNode.getName() + "' has an inappropriate type: "+ type.getName()+ ". Please add an explicit type but not java.lang.Object or groovy.lang.GroovyObject.",parent);
      return;
    }
    if (type.equals(owner)) {
      addError("@Delegate field '" + fieldNode.getName() + "' has an inappropriate type: "+ type.getName()+ ". Delegation to own type not supported. Please use a different type.",parent);
      return;
    }
    final List<MethodNode> fieldMethods=getAllMethods(type);
    for (    ClassNode next : type.getAllInterfaces()) {
      fieldMethods.addAll(getAllMethods(next));
    }
    final boolean skipInterfaces=hasBooleanValue(node.getMember(MEMBER_INTERFACES),false);
    final boolean includeDeprecated=hasBooleanValue(node.getMember(MEMBER_DEPRECATED),true) || (type.isInterface() && !skipInterfaces);
    final List<MethodNode> ownerMethods=getAllMethods(owner);
    for (    MethodNode mn : fieldMethods) {
      addDelegateMethod(node,fieldNode,owner,ownerMethods,mn,includeDeprecated);
    }
    for (    PropertyNode prop : getAllProperties(type)) {
      if (prop.isStatic() || !prop.isPublic())       continue;
      String name=prop.getName();
      addGetterIfNeeded(fieldNode,owner,prop,name);
      addSetterIfNeeded(fieldNode,owner,prop,name);
    }
    if (skipInterfaces)     return;
    final Set<ClassNode> allInterfaces=getInterfacesAndSuperInterfaces(type);
    final Set<ClassNode> ownerIfaces=owner.getAllInterfaces();
    for (    ClassNode iface : allInterfaces) {
      if (Modifier.isPublic(iface.getModifiers()) && !ownerIfaces.contains(iface)) {
        final ClassNode[] ifaces=owner.getInterfaces();
        final ClassNode[] newIfaces=new ClassNode[ifaces.length + 1];
        System.arraycopy(ifaces,0,newIfaces,0,ifaces.length);
        newIfaces[ifaces.length]=iface;
        owner.setInterfaces(newIfaces);
      }
    }
  }
}
