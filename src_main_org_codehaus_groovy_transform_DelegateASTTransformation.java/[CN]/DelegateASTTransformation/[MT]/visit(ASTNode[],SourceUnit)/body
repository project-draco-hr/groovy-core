{
  if (!(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof AnnotatedNode)) {
    throw new RuntimeException("Internal error: wrong types: $node.class / $parent.class");
  }
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  AnnotationNode node=(AnnotationNode)nodes[0];
  if (parent instanceof FieldNode) {
    FieldNode fieldNode=(FieldNode)parent;
    final ClassNode type=fieldNode.getType();
    final Map fieldMethods=type.getDeclaredMethodsMap();
    final ClassNode owner=fieldNode.getOwner();
    final Map ownMethods=owner.getDeclaredMethodsMap();
    for (Iterator it=fieldMethods.entrySet().iterator(); it.hasNext(); ) {
      Map.Entry e=(Map.Entry)it.next();
      addDelegateMethod(fieldNode,owner,ownMethods,e);
    }
    final Expression member=node.getMember("interfaces");
    if (member instanceof ConstantExpression && ((ConstantExpression)member).getValue().equals(false))     return;
    final Set allInterfaces=type.getAllInterfaces();
    final Set ownerIfaces=owner.getAllInterfaces();
    for (Iterator it=allInterfaces.iterator(); it.hasNext(); ) {
      ClassNode iface=(ClassNode)it.next();
      if (!ownerIfaces.contains(iface)) {
        final ClassNode[] ifaces=owner.getInterfaces();
        final ClassNode[] newIfaces=new ClassNode[ifaces.length + 1];
        System.arraycopy(ifaces,0,newIfaces,0,ifaces.length);
        newIfaces[ifaces.length]=iface;
        owner.setInterfaces(newIfaces);
      }
    }
  }
}
