{
  Object val=node.getMember("value");
  if (val == null || !(val instanceof ConstantExpression))   return;
  Object allParts=((ConstantExpression)val).getValue();
  if (!(allParts instanceof String))   return;
  String allstr=(String)allParts;
  boolean done=false;
  while (!done) {
    Matcher attrs=ATTRIBUTES_PATTERN.matcher(allstr);
    if (attrs.find()) {
      String attrName=attrs.group(2);
      String attrValue=attrs.group(3);
      if (attrName == null || attrValue == null)       continue;
      boolean isBool=GRAB_BOOLEAN.contains(attrName);
      ConstantExpression value=new ConstantExpression(isBool ? Boolean.valueOf(attrValue) : attrValue);
      value.setSourcePosition(node);
      node.addMember(attrName,value);
      int lastSemi=allstr.lastIndexOf(';');
      if (lastSemi == -1) {
        allstr="";
        break;
      }
      allstr=allstr.substring(0,lastSemi);
    }
 else {
      done=true;
    }
  }
  if (allstr.contains("#")) {
    Matcher m=IVY_PATTERN.matcher(allstr);
    if (!m.find())     return;
    if (m.group(1) == null || m.group(2) == null)     return;
    node.addMember("module",new ConstantExpression(m.group(2)));
    node.addMember("group",new ConstantExpression(m.group(1)));
    if (m.group(6) != null)     node.addMember("conf",new ConstantExpression(m.group(6)));
    if (m.group(4) != null)     node.addMember("version",new ConstantExpression(m.group(4)));
 else     if (!exclude && node.getMember("version") == null)     node.addMember("version",new ConstantExpression("*"));
    node.getMembers().remove("value");
  }
 else   if (allstr.contains(":")) {
    Map<String,Object> parts=GrapeUtil.getIvyParts(allstr);
    for (    String key : parts.keySet()) {
      String value=parts.get(key).toString();
      if (!key.equals("version") || !value.equals("*") || !exclude) {
        node.addMember(key,new ConstantExpression(value));
      }
    }
    node.getMembers().remove("value");
  }
}
