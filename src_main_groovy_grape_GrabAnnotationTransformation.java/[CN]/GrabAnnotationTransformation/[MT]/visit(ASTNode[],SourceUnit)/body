{
  sourceUnit=source;
  loader=null;
  initContextClassLoader=false;
  ModuleNode mn=(ModuleNode)nodes[0];
  allowShortGrab=true;
  allowShortGrabExcludes=true;
  allowShortGrabConfig=true;
  allowShortGrapes=true;
  allowShortGrabResolver=true;
  grabAliases=new HashSet<String>();
  grabExcludeAliases=new HashSet<String>();
  grabConfigAliases=new HashSet<String>();
  grapesAliases=new HashSet<String>();
  grabResolverAliases=new HashSet<String>();
  for (  ImportNode im : mn.getImports()) {
    String alias=im.getAlias();
    String className=im.getClassName();
    if ((className.endsWith(GRAB_DOT_NAME) && ((alias == null) || (alias.length() == 0))) || (GRAB_CLASS_NAME.equals(alias))) {
      allowShortGrab=false;
    }
 else     if (GRAB_CLASS_NAME.equals(className)) {
      grabAliases.add(im.getAlias());
    }
    if ((className.endsWith(GRAPES_DOT_NAME) && ((alias == null) || (alias.length() == 0))) || (GRAPES_CLASS_NAME.equals(alias))) {
      allowShortGrapes=false;
    }
 else     if (GRAPES_CLASS_NAME.equals(className)) {
      grapesAliases.add(im.getAlias());
    }
    if ((className.endsWith(GRABRESOLVER_DOT_NAME) && ((alias == null) || (alias.length() == 0))) || (GRABRESOLVER_CLASS_NAME.equals(alias))) {
      allowShortGrabResolver=false;
    }
 else     if (GRABRESOLVER_CLASS_NAME.equals(className)) {
      grabResolverAliases.add(im.getAlias());
    }
  }
  List<Map<String,Object>> grabMaps=new ArrayList<Map<String,Object>>();
  List<Map<String,Object>> grabExcludeMaps=new ArrayList<Map<String,Object>>();
  for (  ClassNode classNode : sourceUnit.getAST().getClasses()) {
    grabAnnotations=new ArrayList<AnnotationNode>();
    grabExcludeAnnotations=new ArrayList<AnnotationNode>();
    grabConfigAnnotations=new ArrayList<AnnotationNode>();
    grapesAnnotations=new ArrayList<AnnotationNode>();
    grabResolverAnnotations=new ArrayList<AnnotationNode>();
    visitClass(classNode);
    ClassNode grapeClassNode=ClassHelper.make(Grape.class);
    if (!grabResolverAnnotations.isEmpty()) {
      grabResolverAnnotationLoop:       for (      AnnotationNode node : grabResolverAnnotations) {
        Map<String,Object> grapeResolverMap=new HashMap<String,Object>();
        Expression value=node.getMember("value");
        ConstantExpression ce=null;
        if (value != null && value instanceof ConstantExpression) {
          ce=(ConstantExpression)value;
        }
        String sval=null;
        if (ce != null && ce.getValue() instanceof String) {
          sval=(String)ce.getValue();
        }
        if (sval != null && sval.length() > 0) {
          for (          String s : GRABRESOLVER_REQUIRED) {
            Expression member=node.getMember(s);
            if (member != null) {
              addError("The attribute \"" + s + "\" conflicts with attribute 'value' in @"+ node.getClassNode().getNameWithoutPackage()+ " annotations",node);
              continue grabResolverAnnotationLoop;
            }
          }
          grapeResolverMap.put("name",sval);
          grapeResolverMap.put("root",sval);
        }
 else {
          for (          String s : GRABRESOLVER_REQUIRED) {
            Expression member=node.getMember(s);
            if (member == null) {
              addError("The missing attribute \"" + s + "\" is required in @"+ node.getClassNode().getNameWithoutPackage()+ " annotations",node);
              continue grabResolverAnnotationLoop;
            }
 else             if (member != null && !(member instanceof ConstantExpression)) {
              addError("Attribute \"" + s + "\" has value "+ member.getText()+ " but should be an inline constant in @"+ node.getClassNode().getNameWithoutPackage()+ " annotations",node);
              continue grabResolverAnnotationLoop;
            }
            grapeResolverMap.put(s,((ConstantExpression)member).getValue());
          }
        }
        Grape.addResolver(grapeResolverMap);
      }
    }
    if (!grapesAnnotations.isEmpty()) {
      for (      AnnotationNode node : grapesAnnotations) {
        Expression init=node.getMember("initClass");
        Expression value=node.getMember("value");
        if (value instanceof ListExpression) {
          for (          Object o : ((ListExpression)value).getExpressions()) {
            if (o instanceof ConstantExpression) {
              extractGrab(init,(ConstantExpression)o);
            }
          }
        }
 else         if (value instanceof ConstantExpression) {
          extractGrab(init,(ConstantExpression)value);
        }
      }
    }
    if (!grabConfigAnnotations.isEmpty()) {
      for (      AnnotationNode node : grabConfigAnnotations) {
        checkForClassLoader(node);
        checkForInitContextClassLoader(node);
      }
      addInitContextClassLoaderIfNeeded(classNode);
    }
    if (!grabExcludeAnnotations.isEmpty()) {
      grabExcludeAnnotationLoop:       for (      AnnotationNode node : grabExcludeAnnotations) {
        Map<String,Object> grabExcludeMap=new HashMap<String,Object>();
        checkForConvenienceForm(node,true);
        for (        String s : GRABEXCLUDE_REQUIRED) {
          Expression member=node.getMember(s);
          if (member == null) {
            addError("The missing attribute \"" + s + "\" is required in @"+ node.getClassNode().getNameWithoutPackage()+ " annotations",node);
            continue grabExcludeAnnotationLoop;
          }
 else           if (member != null && !(member instanceof ConstantExpression)) {
            addError("Attribute \"" + s + "\" has value "+ member.getText()+ " but should be an inline constant in @"+ node.getClassNode().getNameWithoutPackage()+ " annotations",node);
            continue grabExcludeAnnotationLoop;
          }
          grabExcludeMap.put(s,((ConstantExpression)member).getValue());
        }
        grabExcludeMaps.add(grabExcludeMap);
      }
    }
    if (!grabAnnotations.isEmpty()) {
      grabAnnotationLoop:       for (      AnnotationNode node : grabAnnotations) {
        Map<String,Object> grabMap=new HashMap<String,Object>();
        checkForConvenienceForm(node,false);
        for (        String s : GRAB_ALL) {
          Expression member=node.getMember(s);
          if (member == null && !GRAB_OPTIONAL.contains(s)) {
            addError("The missing attribute \"" + s + "\" is required in @"+ node.getClassNode().getNameWithoutPackage()+ " annotations",node);
            continue grabAnnotationLoop;
          }
 else           if (member != null && !(member instanceof ConstantExpression)) {
            addError("Attribute \"" + s + "\" has value "+ member.getText()+ " but should be an inline constant in @"+ node.getClassNode().getNameWithoutPackage()+ " annotations",node);
            continue grabAnnotationLoop;
          }
          if (node.getMember(s) != null)           grabMap.put(s,((ConstantExpression)member).getValue());
        }
        grabMaps.add(grabMap);
        callGrabAsStaticInitIfNeeded(classNode,grapeClassNode,node,grabExcludeMaps);
      }
    }
  }
  if (!grabMaps.isEmpty()) {
    Map<String,Object> basicArgs=new HashMap<String,Object>();
    basicArgs.put("classLoader",loader != null ? loader : sourceUnit.getClassLoader());
    if (!grabExcludeMaps.isEmpty())     basicArgs.put("excludes",grabExcludeMaps);
    try {
      Grape.grab(basicArgs,grabMaps.toArray(new Map[grabMaps.size()]));
      if (compilationUnit != null) {
        ASTTransformationVisitor.addGlobalTransformsAfterGrab(compilationUnit.getASTTransformationsContext());
      }
    }
 catch (    RuntimeException re) {
      source.addException(re);
    }
  }
}
