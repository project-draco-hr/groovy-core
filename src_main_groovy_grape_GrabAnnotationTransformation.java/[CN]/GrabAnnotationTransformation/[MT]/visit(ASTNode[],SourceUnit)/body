{
  sourceUnit=source;
  ModuleNode mn=(ModuleNode)nodes[0];
  allowShortGrab=true;
  allowShortGrapes=true;
  grabAliases=new HashSet<String>();
  grapesAliases=new HashSet<String>();
  for (  ImportNode im : mn.getImports()) {
    String alias=im.getAlias();
    String className=im.getClassName();
    if ((className.endsWith(GRAB_DOT_NAME) && ((alias == null) || (alias.length() == 0))) || (GRAB_CLASS_NAME.equals(alias))) {
      allowShortGrab=false;
    }
 else     if (GRAB_CLASS_NAME.equals(className)) {
      grabAliases.add(im.getAlias());
    }
    if ((className.endsWith(GRAPES_DOT_NAME) && ((alias == null) || (alias.length() == 0))) || (GRAPES_CLASS_NAME.equals(alias))) {
      allowShortGrapes=false;
    }
 else     if (GRAPES_CLASS_NAME.equals(className)) {
      grapesAliases.add(im.getAlias());
    }
  }
  List<Map<String,Object>> grabMaps=new ArrayList<Map<String,Object>>();
  for (  ClassNode classNode : sourceUnit.getAST().getClasses()) {
    grabAnnotations=new ArrayList<AnnotationNode>();
    grapesAnnotations=new ArrayList<AnnotationNode>();
    visitClass(classNode);
    ClassNode grapeClassNode=new ClassNode(Grape.class);
    if (!grapesAnnotations.isEmpty()) {
      for (      AnnotationNode node : grapesAnnotations) {
        Expression init=node.getMember("initClass");
        Expression value=node.getMember("value");
        if (value instanceof ListExpression) {
          for (          Object o : ((ListExpression)value).getExpressions()) {
            if (o instanceof ConstantExpression) {
              extractGrab(init,(ConstantExpression)o);
            }
          }
        }
 else         if (value instanceof ConstantExpression) {
          extractGrab(init,(ConstantExpression)value);
        }
      }
    }
    if (!grabAnnotations.isEmpty()) {
      grabAnnotationLoop:       for (      AnnotationNode node : grabAnnotations) {
        Map<String,Object> grabMap=new HashMap<String,Object>();
        checkForConvenienceForm(node);
        for (        String s : new String[]{"group","module","version","classifier"}) {
          Expression member=node.getMember(s);
          if (member == null && !s.equals("classifier")) {
            addError("The missing attribute \"" + s + "\" is required in @"+ node.getClassNode().getNameWithoutPackage()+ " annotations",node);
            continue grabAnnotationLoop;
          }
 else           if (member != null && !(member instanceof ConstantExpression)) {
            addError("Attribute \"" + s + "\" has value "+ member.getText()+ " but should be an inline constant in @"+ node.getClassNode().getNameWithoutPackage()+ " annotations",node);
            continue grabAnnotationLoop;
          }
        }
        grabMap.put("group",((ConstantExpression)node.getMember("group")).getValue());
        grabMap.put("module",((ConstantExpression)node.getMember("module")).getValue());
        grabMap.put("version",((ConstantExpression)node.getMember("version")).getValue());
        if (node.getMember("classifier") != null)         grabMap.put("classifier",((ConstantExpression)node.getMember("classifier")).getValue());
        grabMaps.add(grabMap);
        if ((node.getMember("initClass") == null) || (node.getMember("initClass") == ConstantExpression.TRUE)) {
          List<Statement> grabInitializers=new ArrayList<Statement>();
          MapExpression me=new MapExpression();
          me.addMapEntryExpression(new ConstantExpression("group"),node.getMember("group"));
          me.addMapEntryExpression(new ConstantExpression("module"),node.getMember("module"));
          me.addMapEntryExpression(new ConstantExpression("version"),node.getMember("version"));
          if (node.getMember("classifier") != null)           me.addMapEntryExpression(new ConstantExpression("classifier"),node.getMember("classifier"));
          grabInitializers.add(new ExpressionStatement(new StaticMethodCallExpression(grapeClassNode,"grab",new ArgumentListExpression(me))));
          classNode.addStaticInitializerStatements(grabInitializers,true);
        }
      }
    }
  }
  if (!grabMaps.isEmpty()) {
    Map<String,Object> basicArgs=new HashMap<String,Object>();
    basicArgs.put("classLoader",sourceUnit.getClassLoader());
    try {
      Grape.grab(basicArgs,grabMaps.toArray(new Map[grabMaps.size()]));
    }
 catch (    RuntimeException re) {
      source.addException(re);
    }
  }
}
