{
  while (true) {
    Object res;
synchronized (lock) {
      if (!isQueueEmpty()) {
        boolean needNotify=getQueueSize() >= maxCapacity;
        res=get();
        if (needNotify)         lock.notify();
      }
 else       if (!producers.isEmpty()) {
        try {
          lock.wait();
        }
 catch (        InterruptedException e) {
        }
        continue;
      }
 else {
        hasNext=false;
        return;
      }
    }
    if (res instanceof Throwable)     throw new GroovyRuntimeException((Throwable)res);
    lastAcquired=res;
    hasNext=true;
    return;
  }
}
