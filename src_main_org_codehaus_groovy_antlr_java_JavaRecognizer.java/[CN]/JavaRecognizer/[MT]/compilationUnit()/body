{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST compilationUnit_AST=null;
{
    boolean synPredMatched4=false;
    if (((LA(1) == LITERAL_package || LA(1) == AT) && (LA(2) == IDENT))) {
      int _m4=mark();
      synPredMatched4=true;
      inputState.guessing++;
      try {
{
          annotations();
          match(LITERAL_package);
        }
      }
 catch (      RecognitionException pe) {
        synPredMatched4=false;
      }
      rewind(_m4);
      inputState.guessing--;
    }
    if (synPredMatched4) {
      packageDefinition();
      astFactory.addASTChild(currentAST,returnAST);
    }
 else     if ((_tokenSet_0.member(LA(1))) && (_tokenSet_1.member(LA(2)))) {
    }
 else {
      throw new NoViableAltException(LT(1),getFilename());
    }
  }
{
    _loop6:     do {
      if ((LA(1) == LITERAL_import)) {
        importDefinition();
        astFactory.addASTChild(currentAST,returnAST);
      }
 else {
        break _loop6;
      }
    }
 while (true);
  }
{
    _loop8:     do {
      if ((_tokenSet_2.member(LA(1)))) {
        typeDefinition();
        astFactory.addASTChild(currentAST,returnAST);
      }
 else {
        break _loop8;
      }
    }
 while (true);
  }
  match(Token.EOF_TYPE);
  compilationUnit_AST=(AST)currentAST.root;
  returnAST=compilationUnit_AST;
}
