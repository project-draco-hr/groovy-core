{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST enumBlock_AST=null;
  match(LCURLY);
{
switch (LA(1)) {
case IDENT:
case AT:
{
        enumConstant();
        astFactory.addASTChild(currentAST,returnAST);
{
          _loop105:           do {
            if ((LA(1) == COMMA) && (LA(2) == IDENT || LA(2) == AT)) {
              match(COMMA);
              enumConstant();
              astFactory.addASTChild(currentAST,returnAST);
            }
 else {
              break _loop105;
            }
          }
 while (true);
        }
{
switch (LA(1)) {
case COMMA:
{
              match(COMMA);
              break;
            }
case SEMI:
case RCURLY:
{
            break;
          }
default :
{
          throw new NoViableAltException(LT(1),getFilename());
        }
    }
  }
  break;
}
case SEMI:
case RCURLY:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
{
switch (LA(1)) {
case SEMI:
{
match(SEMI);
{
_loop109: do {
switch (LA(1)) {
case FINAL:
case ABSTRACT:
case STRICTFP:
case LITERAL_static:
case IDENT:
case LT:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case AT:
case LCURLY:
case LITERAL_class:
case LITERAL_interface:
case LITERAL_enum:
{
    classField();
    astFactory.addASTChild(currentAST,returnAST);
    break;
  }
case SEMI:
{
  match(SEMI);
  break;
}
default :
{
break _loop109;
}
}
}
 while (true);
}
break;
}
case RCURLY:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
match(RCURLY);
if (inputState.guessing == 0) {
enumBlock_AST=(AST)currentAST.root;
enumBlock_AST=(AST)astFactory.make((new ASTArray(2)).add(astFactory.create(OBJBLOCK,"OBJBLOCK")).add(enumBlock_AST));
currentAST.root=enumBlock_AST;
currentAST.child=enumBlock_AST != null && enumBlock_AST.getFirstChild() != null ? enumBlock_AST.getFirstChild() : enumBlock_AST;
currentAST.advanceChildToEnd();
}
enumBlock_AST=(AST)currentAST.root;
returnAST=enumBlock_AST;
}
