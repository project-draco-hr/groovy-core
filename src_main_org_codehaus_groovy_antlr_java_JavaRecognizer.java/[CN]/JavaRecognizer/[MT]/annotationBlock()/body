{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST annotationBlock_AST=null;
  match(LCURLY);
{
    _loop101:     do {
switch (LA(1)) {
case FINAL:
case ABSTRACT:
case STRICTFP:
case LITERAL_static:
case IDENT:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case AT:
case LITERAL_class:
case LITERAL_interface:
case LITERAL_enum:
{
          annotationField();
          astFactory.addASTChild(currentAST,returnAST);
          break;
        }
case SEMI:
{
        match(SEMI);
        break;
      }
default :
{
      break _loop101;
    }
}
}
 while (true);
}
match(RCURLY);
if (inputState.guessing == 0) {
annotationBlock_AST=(AST)currentAST.root;
annotationBlock_AST=(AST)astFactory.make((new ASTArray(2)).add(astFactory.create(OBJBLOCK,"OBJBLOCK")).add(annotationBlock_AST));
currentAST.root=annotationBlock_AST;
currentAST.child=annotationBlock_AST != null && annotationBlock_AST.getFirstChild() != null ? annotationBlock_AST.getFirstChild() : annotationBlock_AST;
currentAST.advanceChildToEnd();
}
annotationBlock_AST=(AST)currentAST.root;
returnAST=annotationBlock_AST;
}
