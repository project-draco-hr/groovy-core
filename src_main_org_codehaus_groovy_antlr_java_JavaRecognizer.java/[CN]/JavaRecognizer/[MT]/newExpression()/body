{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST newExpression_AST=null;
  AST tmp243_AST=null;
  tmp243_AST=astFactory.create(LT(1));
  astFactory.makeASTRoot(currentAST,tmp243_AST);
  match(LITERAL_new);
{
switch (LA(1)) {
case LT:
{
        typeArguments();
        astFactory.addASTChild(currentAST,returnAST);
        break;
      }
case IDENT:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
{
      break;
    }
default :
{
    throw new NoViableAltException(LT(1),getFilename());
  }
}
}
type();
astFactory.addASTChild(currentAST,returnAST);
{
switch (LA(1)) {
case LPAREN:
{
  match(LPAREN);
  argList();
  astFactory.addASTChild(currentAST,returnAST);
  match(RPAREN);
{
switch (LA(1)) {
case LCURLY:
{
        classBlock();
        astFactory.addASTChild(currentAST,returnAST);
        break;
      }
case SEMI:
case LBRACK:
case RBRACK:
case DOT:
case QUESTION:
case LT:
case COMMA:
case GT:
case SR:
case BSR:
case STAR:
case RPAREN:
case ASSIGN:
case RCURLY:
case BAND:
case COLON:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case STAR_ASSIGN:
case DIV_ASSIGN:
case MOD_ASSIGN:
case SR_ASSIGN:
case BSR_ASSIGN:
case SL_ASSIGN:
case BAND_ASSIGN:
case BXOR_ASSIGN:
case BOR_ASSIGN:
case LOR:
case LAND:
case BOR:
case BXOR:
case NOT_EQUAL:
case EQUAL:
case LE:
case GE:
case LITERAL_instanceof:
case SL:
case PLUS:
case MINUS:
case DIV:
case MOD:
case INC:
case DEC:
{
      break;
    }
default :
{
    throw new NoViableAltException(LT(1),getFilename());
  }
}
}
break;
}
case LBRACK:
{
newArrayDeclarator();
astFactory.addASTChild(currentAST,returnAST);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
newExpression_AST=(AST)currentAST.root;
returnAST=newExpression_AST;
}
