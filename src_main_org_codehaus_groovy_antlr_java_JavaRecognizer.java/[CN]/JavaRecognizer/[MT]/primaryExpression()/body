{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST primaryExpression_AST=null;
  Token lbt=null;
  AST lbt_AST=null;
switch (LA(1)) {
case IDENT:
case LT:
{
      identPrimary();
      astFactory.addASTChild(currentAST,returnAST);
{
        if ((LA(1) == DOT) && (LA(2) == LITERAL_class)) {
          AST tmp231_AST=null;
          tmp231_AST=astFactory.create(LT(1));
          astFactory.makeASTRoot(currentAST,tmp231_AST);
          match(DOT);
          AST tmp232_AST=null;
          tmp232_AST=astFactory.create(LT(1));
          astFactory.addASTChild(currentAST,tmp232_AST);
          match(LITERAL_class);
        }
 else         if ((_tokenSet_44.member(LA(1))) && (_tokenSet_45.member(LA(2)))) {
        }
 else {
          throw new NoViableAltException(LT(1),getFilename());
        }
      }
      primaryExpression_AST=(AST)currentAST.root;
      break;
    }
case NUM_INT:
case STRING_LITERAL:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
{
    constant();
    astFactory.addASTChild(currentAST,returnAST);
    primaryExpression_AST=(AST)currentAST.root;
    break;
  }
case LITERAL_true:
{
  AST tmp233_AST=null;
  tmp233_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp233_AST);
  match(LITERAL_true);
  primaryExpression_AST=(AST)currentAST.root;
  break;
}
case LITERAL_false:
{
AST tmp234_AST=null;
tmp234_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp234_AST);
match(LITERAL_false);
primaryExpression_AST=(AST)currentAST.root;
break;
}
case LITERAL_null:
{
AST tmp235_AST=null;
tmp235_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp235_AST);
match(LITERAL_null);
primaryExpression_AST=(AST)currentAST.root;
break;
}
case LITERAL_new:
{
newExpression();
astFactory.addASTChild(currentAST,returnAST);
primaryExpression_AST=(AST)currentAST.root;
break;
}
case LITERAL_this:
{
AST tmp236_AST=null;
tmp236_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp236_AST);
match(LITERAL_this);
primaryExpression_AST=(AST)currentAST.root;
break;
}
case LITERAL_super:
{
AST tmp237_AST=null;
tmp237_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp237_AST);
match(LITERAL_super);
primaryExpression_AST=(AST)currentAST.root;
break;
}
case LPAREN:
{
match(LPAREN);
assignmentExpression();
astFactory.addASTChild(currentAST,returnAST);
match(RPAREN);
primaryExpression_AST=(AST)currentAST.root;
break;
}
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
{
builtInType();
astFactory.addASTChild(currentAST,returnAST);
{
_loop291: do {
if ((LA(1) == LBRACK)) {
lbt=LT(1);
lbt_AST=astFactory.create(lbt);
astFactory.makeASTRoot(currentAST,lbt_AST);
match(LBRACK);
if (inputState.guessing == 0) {
lbt_AST.setType(ARRAY_DECLARATOR);
}
match(RBRACK);
}
 else {
break _loop291;
}
}
 while (true);
}
AST tmp241_AST=null;
tmp241_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp241_AST);
match(DOT);
AST tmp242_AST=null;
tmp242_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp242_AST);
match(LITERAL_class);
primaryExpression_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=primaryExpression_AST;
}
