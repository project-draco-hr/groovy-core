{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST builtInTypeArraySpec_AST=null;
  Token lb=null;
  AST lb_AST=null;
  Token first=LT(1);
  builtInType();
  astFactory.addASTChild(currentAST,returnAST);
{
    int _cnt40=0;
    _loop40:     do {
      if ((LA(1) == LBRACK) && (LA(2) == RBRACK)) {
        lb=LT(1);
        lb_AST=astFactory.create(lb);
        astFactory.makeASTRoot(currentAST,lb_AST);
        match(LBRACK);
        if (inputState.guessing == 0) {
          lb_AST.setType(ARRAY_DECLARATOR);
        }
        match(RBRACK);
      }
 else {
        if (_cnt40 >= 1) {
          break _loop40;
        }
 else {
          throw new NoViableAltException(LT(1),getFilename());
        }
      }
      _cnt40++;
    }
 while (true);
  }
  if (inputState.guessing == 0) {
    builtInTypeArraySpec_AST=(AST)currentAST.root;
    if (addImagNode) {
      builtInTypeArraySpec_AST=(AST)astFactory.make((new ASTArray(2)).add(create(TYPE,"TYPE",first,LT(1))).add(builtInTypeArraySpec_AST));
    }
    currentAST.root=builtInTypeArraySpec_AST;
    currentAST.child=builtInTypeArraySpec_AST != null && builtInTypeArraySpec_AST.getFirstChild() != null ? builtInTypeArraySpec_AST.getFirstChild() : builtInTypeArraySpec_AST;
    currentAST.advanceChildToEnd();
  }
  builtInTypeArraySpec_AST=(AST)currentAST.root;
  returnAST=builtInTypeArraySpec_AST;
}
