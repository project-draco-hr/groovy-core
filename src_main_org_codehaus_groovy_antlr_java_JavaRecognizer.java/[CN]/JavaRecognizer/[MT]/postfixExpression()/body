{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST postfixExpression_AST=null;
  Token lp=null;
  AST lp_AST=null;
  Token lp3=null;
  AST lp3_AST=null;
  Token lps=null;
  AST lps_AST=null;
  Token lb=null;
  AST lb_AST=null;
  Token in=null;
  AST in_AST=null;
  Token de=null;
  AST de_AST=null;
  primaryExpression();
  astFactory.addASTChild(currentAST,returnAST);
{
    _loop286:     do {
      if ((LA(1) == DOT) && (_tokenSet_45.member(LA(2)))) {
        AST tmp219_AST=null;
        tmp219_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp219_AST);
        match(DOT);
{
switch (LA(1)) {
case LT:
{
              typeArguments();
              astFactory.addASTChild(currentAST,returnAST);
              break;
            }
case IDENT:
case LITERAL_super:
{
            break;
          }
default :
{
          throw new NoViableAltException(LT(1),getFilename());
        }
    }
  }
{
switch (LA(1)) {
case IDENT:
{
        AST tmp220_AST=null;
        tmp220_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp220_AST);
        match(IDENT);
{
switch (LA(1)) {
case LPAREN:
{
              lp=LT(1);
              lp_AST=astFactory.create(lp);
              astFactory.makeASTRoot(currentAST,lp_AST);
              match(LPAREN);
              if (inputState.guessing == 0) {
                lp_AST.setType(METHOD_CALL);
              }
              argList();
              astFactory.addASTChild(currentAST,returnAST);
              match(RPAREN);
              break;
            }
case SEMI:
case LBRACK:
case RBRACK:
case DOT:
case QUESTION:
case LT:
case COMMA:
case GT:
case SR:
case BSR:
case STAR:
case RPAREN:
case ASSIGN:
case RCURLY:
case BAND:
case COLON:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case STAR_ASSIGN:
case DIV_ASSIGN:
case MOD_ASSIGN:
case SR_ASSIGN:
case BSR_ASSIGN:
case SL_ASSIGN:
case BAND_ASSIGN:
case BXOR_ASSIGN:
case BOR_ASSIGN:
case LOR:
case LAND:
case BOR:
case BXOR:
case NOT_EQUAL:
case EQUAL:
case LE:
case GE:
case LITERAL_instanceof:
case SL:
case PLUS:
case MINUS:
case DIV:
case MOD:
case INC:
case DEC:
{
            break;
          }
default :
{
          throw new NoViableAltException(LT(1),getFilename());
        }
    }
  }
  break;
}
case LITERAL_super:
{
AST tmp222_AST=null;
tmp222_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp222_AST);
match(LITERAL_super);
{
switch (LA(1)) {
case LPAREN:
{
      lp3=LT(1);
      lp3_AST=astFactory.create(lp3);
      astFactory.makeASTRoot(currentAST,lp3_AST);
      match(LPAREN);
      argList();
      astFactory.addASTChild(currentAST,returnAST);
      match(RPAREN);
      if (inputState.guessing == 0) {
        lp3_AST.setType(SUPER_CTOR_CALL);
      }
      break;
    }
case DOT:
{
    AST tmp224_AST=null;
    tmp224_AST=astFactory.create(LT(1));
    astFactory.makeASTRoot(currentAST,tmp224_AST);
    match(DOT);
{
switch (LA(1)) {
case LT:
{
          typeArguments();
          astFactory.addASTChild(currentAST,returnAST);
          break;
        }
case IDENT:
{
        break;
      }
default :
{
      throw new NoViableAltException(LT(1),getFilename());
    }
}
}
AST tmp225_AST=null;
tmp225_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp225_AST);
match(IDENT);
{
switch (LA(1)) {
case LPAREN:
{
    lps=LT(1);
    lps_AST=astFactory.create(lps);
    astFactory.makeASTRoot(currentAST,lps_AST);
    match(LPAREN);
    if (inputState.guessing == 0) {
      lps_AST.setType(METHOD_CALL);
    }
    argList();
    astFactory.addASTChild(currentAST,returnAST);
    match(RPAREN);
    break;
  }
case SEMI:
case LBRACK:
case RBRACK:
case DOT:
case QUESTION:
case LT:
case COMMA:
case GT:
case SR:
case BSR:
case STAR:
case RPAREN:
case ASSIGN:
case RCURLY:
case BAND:
case COLON:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case STAR_ASSIGN:
case DIV_ASSIGN:
case MOD_ASSIGN:
case SR_ASSIGN:
case BSR_ASSIGN:
case SL_ASSIGN:
case BAND_ASSIGN:
case BXOR_ASSIGN:
case BOR_ASSIGN:
case LOR:
case LAND:
case BOR:
case BXOR:
case NOT_EQUAL:
case EQUAL:
case LE:
case GE:
case LITERAL_instanceof:
case SL:
case PLUS:
case MINUS:
case DIV:
case MOD:
case INC:
case DEC:
{
  break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
}
 else if ((LA(1) == DOT) && (LA(2) == LITERAL_this)) {
AST tmp227_AST=null;
tmp227_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp227_AST);
match(DOT);
AST tmp228_AST=null;
tmp228_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp228_AST);
match(LITERAL_this);
}
 else if ((LA(1) == DOT) && (LA(2) == LITERAL_new)) {
AST tmp229_AST=null;
tmp229_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp229_AST);
match(DOT);
newExpression();
astFactory.addASTChild(currentAST,returnAST);
}
 else if ((LA(1) == LBRACK)) {
lb=LT(1);
lb_AST=astFactory.create(lb);
astFactory.makeASTRoot(currentAST,lb_AST);
match(LBRACK);
if (inputState.guessing == 0) {
lb_AST.setType(INDEX_OP);
}
expression();
astFactory.addASTChild(currentAST,returnAST);
match(RBRACK);
}
 else {
break _loop286;
}
}
 while (true);
}
{
switch (LA(1)) {
case INC:
{
in=LT(1);
in_AST=astFactory.create(in);
astFactory.makeASTRoot(currentAST,in_AST);
match(INC);
if (inputState.guessing == 0) {
in_AST.setType(POST_INC);
}
break;
}
case DEC:
{
de=LT(1);
de_AST=astFactory.create(de);
astFactory.makeASTRoot(currentAST,de_AST);
match(DEC);
if (inputState.guessing == 0) {
de_AST.setType(POST_DEC);
}
break;
}
case SEMI:
case RBRACK:
case QUESTION:
case LT:
case COMMA:
case GT:
case SR:
case BSR:
case STAR:
case RPAREN:
case ASSIGN:
case RCURLY:
case BAND:
case COLON:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case STAR_ASSIGN:
case DIV_ASSIGN:
case MOD_ASSIGN:
case SR_ASSIGN:
case BSR_ASSIGN:
case SL_ASSIGN:
case BAND_ASSIGN:
case BXOR_ASSIGN:
case BOR_ASSIGN:
case LOR:
case LAND:
case BOR:
case BXOR:
case NOT_EQUAL:
case EQUAL:
case LE:
case GE:
case LITERAL_instanceof:
case SL:
case PLUS:
case MINUS:
case DIV:
case MOD:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
postfixExpression_AST=(AST)currentAST.root;
returnAST=postfixExpression_AST;
}
