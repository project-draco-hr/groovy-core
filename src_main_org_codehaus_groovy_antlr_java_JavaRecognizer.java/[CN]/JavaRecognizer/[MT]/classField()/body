{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST classField_AST=null;
  AST mods_AST=null;
  AST td_AST=null;
  AST tp_AST=null;
  AST h_AST=null;
  AST s_AST=null;
  AST t_AST=null;
  AST param_AST=null;
  AST rt_AST=null;
  AST tc_AST=null;
  AST s2_AST=null;
  AST v_AST=null;
  AST s3_AST=null;
  AST s4_AST=null;
  Token first=LT(1);
  if ((_tokenSet_13.member(LA(1))) && (_tokenSet_14.member(LA(2)))) {
    modifiers();
    mods_AST=(AST)returnAST;
{
switch (LA(1)) {
case AT:
case LITERAL_class:
case LITERAL_interface:
case LITERAL_enum:
{
          typeDefinitionInternal(mods_AST);
          td_AST=(AST)returnAST;
          if (inputState.guessing == 0) {
            classField_AST=(AST)currentAST.root;
            classField_AST=td_AST;
            currentAST.root=classField_AST;
            currentAST.child=classField_AST != null && classField_AST.getFirstChild() != null ? classField_AST.getFirstChild() : classField_AST;
            currentAST.advanceChildToEnd();
          }
          break;
        }
case IDENT:
case LT:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
{
{
switch (LA(1)) {
case LT:
{
              typeParameters();
              tp_AST=(AST)returnAST;
              break;
            }
case IDENT:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
{
            break;
          }
default :
{
          throw new NoViableAltException(LT(1),getFilename());
        }
    }
  }
{
    if ((LA(1) == IDENT) && (LA(2) == LPAREN)) {
      ctorHead();
      h_AST=(AST)returnAST;
      constructorBody();
      s_AST=(AST)returnAST;
      if (inputState.guessing == 0) {
        classField_AST=(AST)currentAST.root;
        classField_AST=(AST)astFactory.make((new ASTArray(5)).add(create(METHOD_DEF,"METHOD_DEF",first,LT(1))).add(mods_AST).add(tp_AST).add(h_AST).add(s_AST));
        currentAST.root=classField_AST;
        currentAST.child=classField_AST != null && classField_AST.getFirstChild() != null ? classField_AST.getFirstChild() : classField_AST;
        currentAST.advanceChildToEnd();
      }
    }
 else     if ((_tokenSet_15.member(LA(1))) && (_tokenSet_16.member(LA(2)))) {
      typeSpec(false);
      t_AST=(AST)returnAST;
{
        if ((LA(1) == IDENT) && (LA(2) == LPAREN)) {
          AST tmp90_AST=null;
          tmp90_AST=astFactory.create(LT(1));
          match(IDENT);
          match(LPAREN);
          parameterDeclarationList();
          param_AST=(AST)returnAST;
          match(RPAREN);
          declaratorBrackets(t_AST);
          rt_AST=(AST)returnAST;
{
switch (LA(1)) {
case LITERAL_throws:
{
                throwsClause();
                tc_AST=(AST)returnAST;
                break;
              }
case SEMI:
case LCURLY:
{
              break;
            }
default :
{
            throw new NoViableAltException(LT(1),getFilename());
          }
      }
    }
{
switch (LA(1)) {
case LCURLY:
{
          compoundStatement();
          s2_AST=(AST)returnAST;
          break;
        }
case SEMI:
{
        AST tmp93_AST=null;
        tmp93_AST=astFactory.create(LT(1));
        match(SEMI);
        break;
      }
default :
{
      throw new NoViableAltException(LT(1),getFilename());
    }
}
}
if (inputState.guessing == 0) {
classField_AST=(AST)currentAST.root;
classField_AST=(AST)astFactory.make((new ASTArray(8)).add(create(METHOD_DEF,"METHOD_DEF",first,LT(1))).add(mods_AST).add(tp_AST).add((AST)astFactory.make((new ASTArray(2)).add(create(TYPE,"TYPE",first,LT(1))).add(rt_AST))).add(tmp90_AST).add(param_AST).add(tc_AST).add(s2_AST));
currentAST.root=classField_AST;
currentAST.child=classField_AST != null && classField_AST.getFirstChild() != null ? classField_AST.getFirstChild() : classField_AST;
currentAST.advanceChildToEnd();
}
}
 else if ((LA(1) == IDENT) && (_tokenSet_17.member(LA(2)))) {
variableDefinitions(mods_AST,t_AST);
v_AST=(AST)returnAST;
AST tmp94_AST=null;
tmp94_AST=astFactory.create(LT(1));
match(SEMI);
if (inputState.guessing == 0) {
classField_AST=(AST)currentAST.root;
classField_AST=v_AST;
currentAST.root=classField_AST;
currentAST.child=classField_AST != null && classField_AST.getFirstChild() != null ? classField_AST.getFirstChild() : classField_AST;
currentAST.advanceChildToEnd();
}
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
}
 else if ((LA(1) == LITERAL_static) && (LA(2) == LCURLY)) {
match(LITERAL_static);
compoundStatement();
s3_AST=(AST)returnAST;
if (inputState.guessing == 0) {
classField_AST=(AST)currentAST.root;
classField_AST=(AST)astFactory.make((new ASTArray(2)).add(create(STATIC_INIT,"STATIC_INIT",first,LT(1))).add(s3_AST));
currentAST.root=classField_AST;
currentAST.child=classField_AST != null && classField_AST.getFirstChild() != null ? classField_AST.getFirstChild() : classField_AST;
currentAST.advanceChildToEnd();
}
}
 else if ((LA(1) == LCURLY)) {
compoundStatement();
s4_AST=(AST)returnAST;
if (inputState.guessing == 0) {
classField_AST=(AST)currentAST.root;
classField_AST=(AST)astFactory.make((new ASTArray(2)).add(create(INSTANCE_INIT,"INSTANCE_INIT",first,LT(1))).add(s4_AST));
currentAST.root=classField_AST;
currentAST.child=classField_AST != null && classField_AST.getFirstChild() != null ? classField_AST.getFirstChild() : classField_AST;
currentAST.advanceChildToEnd();
}
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
returnAST=classField_AST;
}
