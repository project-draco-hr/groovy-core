{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST modifier_AST=null;
switch (LA(1)) {
case LITERAL_private:
{
      AST tmp46_AST=null;
      tmp46_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp46_AST);
      match(LITERAL_private);
      modifier_AST=(AST)currentAST.root;
      break;
    }
case LITERAL_public:
{
    AST tmp47_AST=null;
    tmp47_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp47_AST);
    match(LITERAL_public);
    modifier_AST=(AST)currentAST.root;
    break;
  }
case LITERAL_protected:
{
  AST tmp48_AST=null;
  tmp48_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp48_AST);
  match(LITERAL_protected);
  modifier_AST=(AST)currentAST.root;
  break;
}
case LITERAL_static:
{
AST tmp49_AST=null;
tmp49_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp49_AST);
match(LITERAL_static);
modifier_AST=(AST)currentAST.root;
break;
}
case LITERAL_transient:
{
AST tmp50_AST=null;
tmp50_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp50_AST);
match(LITERAL_transient);
modifier_AST=(AST)currentAST.root;
break;
}
case FINAL:
{
AST tmp51_AST=null;
tmp51_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp51_AST);
match(FINAL);
modifier_AST=(AST)currentAST.root;
break;
}
case ABSTRACT:
{
AST tmp52_AST=null;
tmp52_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp52_AST);
match(ABSTRACT);
modifier_AST=(AST)currentAST.root;
break;
}
case LITERAL_native:
{
AST tmp53_AST=null;
tmp53_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp53_AST);
match(LITERAL_native);
modifier_AST=(AST)currentAST.root;
break;
}
case LITERAL_threadsafe:
{
AST tmp54_AST=null;
tmp54_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp54_AST);
match(LITERAL_threadsafe);
modifier_AST=(AST)currentAST.root;
break;
}
case LITERAL_synchronized:
{
AST tmp55_AST=null;
tmp55_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp55_AST);
match(LITERAL_synchronized);
modifier_AST=(AST)currentAST.root;
break;
}
case LITERAL_volatile:
{
AST tmp56_AST=null;
tmp56_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp56_AST);
match(LITERAL_volatile);
modifier_AST=(AST)currentAST.root;
break;
}
case STRICTFP:
{
AST tmp57_AST=null;
tmp57_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp57_AST);
match(STRICTFP);
modifier_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=modifier_AST;
}
