{
  CompilerConfiguration config=new CompilerConfiguration();
  config.setScriptBaseClass("org.codehaus.groovy.transform.stc.GroovyTypeCheckingExtensionSupport.TypeCheckingDSL");
  ImportCustomizer ic=new ImportCustomizer();
  ic.addStarImports("org.codehaus.groovy.ast.expr");
  ic.addStaticStars("org.codehaus.groovy.ast.ClassHelper");
  ic.addStaticStars("org.codehaus.groovy.transform.stc.StaticTypeCheckingSupport");
  config.addCompilationCustomizers(ic);
  final GroovyClassLoader transformLoader=compilationUnit != null ? compilationUnit.getTransformLoader() : typeCheckingVisitor.getSourceUnit().getClassLoader();
  TypeCheckingDSL script=null;
  try {
    Class<?> clazz=transformLoader.loadClass(scriptPath,false,true);
    if (TypeCheckingDSL.class.isAssignableFrom(clazz)) {
      script=(TypeCheckingDSL)clazz.newInstance();
    }
  }
 catch (  ClassNotFoundException e) {
  }
catch (  InstantiationException e) {
    context.getErrorCollector().addFatalError(new SimpleMessage("Static type checking extension '" + scriptPath + "' could not be loaded.",config.getDebug(),typeCheckingVisitor.getSourceUnit()));
  }
catch (  IllegalAccessException e) {
    context.getErrorCollector().addFatalError(new SimpleMessage("Static type checking extension '" + scriptPath + "' could not be loaded.",config.getDebug(),typeCheckingVisitor.getSourceUnit()));
  }
  if (script == null) {
    ClassLoader cl=typeCheckingVisitor.getSourceUnit().getClassLoader();
    InputStream is=((ClassLoader)transformLoader).getResourceAsStream(scriptPath);
    if (is == null) {
      is=cl.getResourceAsStream(scriptPath);
    }
    if (is == null) {
      cl=GroovyTypeCheckingExtensionSupport.class.getClassLoader();
      is=cl.getResourceAsStream(scriptPath);
    }
    if (is == null) {
      context.getErrorCollector().addFatalError(new SimpleMessage("Static type checking extension '" + scriptPath + "' was not found on the classpath.",config.getDebug(),typeCheckingVisitor.getSourceUnit()));
    }
    try {
      GroovyShell shell=new GroovyShell(transformLoader,new Binding(),config);
      script=(TypeCheckingDSL)shell.parse(new InputStreamReader(is,typeCheckingVisitor.getSourceUnit().getConfiguration().getSourceEncoding()));
    }
 catch (    CompilationFailedException e) {
      throw new GroovyBugError("An unexpected error was thrown during custom type checking",e);
    }
catch (    UnsupportedEncodingException e) {
      throw new GroovyBugError("Unsupported encoding found in compiler configuration",e);
    }
  }
  if (script != null) {
    script.extension=this;
    script.run();
    List<Closure> list=eventHandlers.get("setup");
    if (list != null) {
      for (      Closure closure : list) {
        safeCall(closure);
      }
    }
  }
}
