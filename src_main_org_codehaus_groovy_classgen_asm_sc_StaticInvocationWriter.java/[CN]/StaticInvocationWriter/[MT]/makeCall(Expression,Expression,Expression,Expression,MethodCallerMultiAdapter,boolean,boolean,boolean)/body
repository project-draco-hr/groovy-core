{
  ClassNode dynamicCallReturnType=origin.getNodeMetaData(StaticTypesMarker.DYNAMIC_RESOLUTION);
  if (dynamicCallReturnType != null) {
    StaticTypesWriterController staticController=(StaticTypesWriterController)controller;
    if (origin instanceof MethodCallExpression) {
      ((MethodCallExpression)origin).setMethodTarget(null);
    }
    InvocationWriter dynamicInvocationWriter=staticController.getRegularInvocationWriter();
    dynamicInvocationWriter.makeCall(origin,receiver,message,arguments,adapter,safe,spreadSafe,implicitThis);
    return;
  }
  if (tryImplicitReceiver(origin,message,arguments,adapter,safe,spreadSafe,implicitThis)) {
    return;
  }
  if (spreadSafe && origin instanceof MethodCallExpression) {
    MethodVisitor mv=controller.getMethodVisitor();
    CompileStack compileStack=controller.getCompileStack();
    TypeChooser typeChooser=controller.getTypeChooser();
    OperandStack operandStack=controller.getOperandStack();
    ClassNode classNode=controller.getClassNode();
    int counter=labelCounter.incrementAndGet();
    VariableExpression result=new VariableExpression("spreadresult" + counter,StaticCompilationVisitor.ARRAYLIST_CLASSNODE);
    ConstructorCallExpression cce=new ConstructorCallExpression(StaticCompilationVisitor.ARRAYLIST_CLASSNODE,ArgumentListExpression.EMPTY_ARGUMENTS);
    cce.setNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET,StaticCompilationVisitor.ARRAYLIST_CONSTRUCTOR);
    DeclarationExpression declr=new DeclarationExpression(result,Token.newSymbol("=",origin.getLineNumber(),origin.getColumnNumber()),cce);
    declr.visit(controller.getAcg());
    operandStack.pop();
    receiver.visit(controller.getAcg());
    Label ifnull=compileStack.createLocalLabel("ifnull_" + counter);
    mv.visitJumpInsn(IFNULL,ifnull);
    operandStack.remove(1);
    Label nonull=compileStack.createLocalLabel("nonull_" + counter);
    mv.visitLabel(nonull);
    ClassNode componentType=StaticTypeCheckingVisitor.inferLoopElementType(typeChooser.resolveType(receiver,classNode));
    Parameter iterator=new Parameter(componentType,"for$it$" + counter);
    VariableExpression iteratorAsVar=new VariableExpression(iterator);
    MethodCallExpression origMCE=(MethodCallExpression)origin;
    MethodCallExpression newMCE=new MethodCallExpression(iteratorAsVar,origMCE.getMethodAsString(),origMCE.getArguments());
    newMCE.setImplicitThis(false);
    newMCE.setMethodTarget(origMCE.getMethodTarget());
    newMCE.setSafe(true);
    MethodCallExpression add=new MethodCallExpression(result,"add",newMCE);
    add.setImplicitThis(false);
    add.setMethodTarget(StaticCompilationVisitor.ARRAYLIST_ADD_METHOD);
    ForStatement stmt=new ForStatement(iterator,receiver,new ExpressionStatement(add));
    stmt.visit(controller.getAcg());
    mv.visitLabel(ifnull);
    result.visit(controller.getAcg());
  }
 else   if (safe && origin instanceof MethodCallExpression) {
    MethodVisitor mv=controller.getMethodVisitor();
    CompileStack compileStack=controller.getCompileStack();
    OperandStack operandStack=controller.getOperandStack();
    int counter=labelCounter.incrementAndGet();
    ExpressionAsVariableSlot slot=new ExpressionAsVariableSlot(controller,receiver);
    slot.visit(controller.getAcg());
    operandStack.box();
    Label ifnull=compileStack.createLocalLabel("ifnull_" + counter);
    mv.visitJumpInsn(IFNULL,ifnull);
    operandStack.remove(1);
    Label nonull=compileStack.createLocalLabel("nonull_" + counter);
    mv.visitLabel(nonull);
    MethodCallExpression origMCE=(MethodCallExpression)origin;
    MethodCallExpression newMCE=new MethodCallExpression(new VariableSlotLoader(slot.getType(),slot.getIndex(),controller.getOperandStack()),origMCE.getMethodAsString(),origMCE.getArguments());
    MethodNode methodTarget=origMCE.getMethodTarget();
    newMCE.setMethodTarget(methodTarget);
    newMCE.setSafe(false);
    newMCE.setImplicitThis(origMCE.isImplicitThis());
    newMCE.setSourcePosition(origMCE);
    newMCE.visit(controller.getAcg());
    compileStack.removeVar(slot.getIndex());
    ClassNode returnType=operandStack.getTopOperand();
    if (ClassHelper.isPrimitiveType(returnType) && !ClassHelper.VOID_TYPE.equals(returnType)) {
      operandStack.box();
    }
    Label endof=compileStack.createLocalLabel("endof_" + counter);
    mv.visitJumpInsn(GOTO,endof);
    mv.visitLabel(ifnull);
    mv.visitInsn(ACONST_NULL);
    mv.visitLabel(endof);
  }
 else {
    if ((adapter == AsmClassGenerator.getGroovyObjectField || adapter == AsmClassGenerator.getField) && origin instanceof AttributeExpression) {
      String pname=((PropertyExpression)origin).getPropertyAsString();
      CallSiteWriter callSiteWriter=controller.getCallSiteWriter();
      if (pname != null && callSiteWriter instanceof StaticTypesCallSiteWriter) {
        StaticTypesCallSiteWriter stcsw=(StaticTypesCallSiteWriter)callSiteWriter;
        TypeChooser typeChooser=controller.getTypeChooser();
        if (stcsw.makeGetField(receiver,typeChooser.resolveType(receiver,controller.getClassNode()),pname,false,true)) {
          return;
        }
      }
    }
    super.makeCall(origin,receiver,message,arguments,adapter,safe,spreadSafe,implicitThis);
  }
}
