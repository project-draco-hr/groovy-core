{
  if (target == null)   return false;
  if (target instanceof ExtensionMethodNode) {
    ExtensionMethodNode emn=(ExtensionMethodNode)target;
    MethodNode node=emn.getExtensionMethodNode();
    String methodName=target.getName();
    MethodVisitor mv=controller.getMethodVisitor();
    int argumentsToRemove=0;
    List<Expression> argumentList=new LinkedList<Expression>(args.getExpressions());
    if (emn.isStaticExtension()) {
      argumentList.add(0,ConstantExpression.NULL);
    }
 else {
      argumentList.add(0,receiver);
    }
    Parameter[] parameters=node.getParameters();
    loadArguments(argumentList,parameters);
    String owner=BytecodeHelper.getClassInternalName(node.getDeclaringClass());
    String desc=BytecodeHelper.getMethodDescriptor(target.getReturnType(),parameters);
    mv.visitMethodInsn(INVOKESTATIC,owner,methodName,desc);
    ClassNode ret=target.getReturnType().redirect();
    if (ret == ClassHelper.VOID_TYPE) {
      ret=ClassHelper.OBJECT_TYPE;
      mv.visitInsn(ACONST_NULL);
    }
    argumentsToRemove+=argumentList.size();
    controller.getOperandStack().remove(argumentsToRemove);
    controller.getOperandStack().push(ret);
    return true;
  }
 else {
    if (target == StaticTypeCheckingVisitor.CLOSURE_CALL_VARGS) {
      ArrayExpression arr=new ArrayExpression(ClassHelper.OBJECT_TYPE,args.getExpressions());
      return super.writeDirectMethodCall(target,implicitThis,receiver,new ArgumentListExpression(arr));
    }
    ClassNode classNode=controller.getClassNode();
    if (classNode.isDerivedFrom(ClassHelper.CLOSURE_TYPE) && controller.isInClosure() && !(target.isPublic() || target.isProtected())&& target.getDeclaringClass() != classNode) {
      if (!tryBridgeMethod(target,receiver,implicitThis,args)) {
        ArrayExpression arr=new ArrayExpression(ClassHelper.OBJECT_TYPE,args.getExpressions());
        MethodCallExpression mce=new MethodCallExpression(INVOKERHELER_RECEIVER,target.isStatic() ? "invokeStaticMethod" : "invokeMethodSafe",new ArgumentListExpression(target.isStatic() ? new ClassExpression(target.getDeclaringClass()) : receiver,new ConstantExpression(target.getName()),arr));
        mce.setMethodTarget(target.isStatic() ? INVOKERHELPER_INVOKESTATICMETHOD : INVOKERHELPER_INVOKEMETHOD);
        mce.visit(controller.getAcg());
        return true;
      }
      return true;
    }
    if (target.isPrivate()) {
      ClassNode declaringClass=target.getDeclaringClass();
      if ((isPrivateBridgeMethodsCallAllowed(declaringClass,classNode) || isPrivateBridgeMethodsCallAllowed(classNode,declaringClass)) && declaringClass.getNodeMetaData(PRIVATE_BRIDGE_METHODS) != null && !declaringClass.equals(classNode)) {
        if (tryBridgeMethod(target,receiver,implicitThis,args)) {
          return true;
        }
 else         if (declaringClass != classNode) {
          controller.getSourceUnit().addError(new SyntaxException("Cannot call private method " + (target.isStatic() ? "static " : "") + declaringClass.toString(false)+ "#"+ target.getName()+ " from class "+ classNode.toString(false),receiver.getLineNumber(),receiver.getColumnNumber(),receiver.getLastLineNumber(),receiver.getLastColumnNumber()));
        }
      }
      if (declaringClass != classNode) {
        controller.getSourceUnit().addError(new SyntaxException("Cannot call private method " + (target.isStatic() ? "static " : "") + declaringClass.toString(false)+ "#"+ target.getName()+ " from class "+ classNode.toString(false),receiver.getLineNumber(),receiver.getColumnNumber(),receiver.getLastLineNumber(),receiver.getLastColumnNumber()));
      }
    }
    if (receiver != null) {
      if (!(receiver instanceof VariableExpression) || !((VariableExpression)receiver).isSuperExpression()) {
        Expression checkCastReceiver=new CheckcastReceiverExpression(receiver,target);
        return super.writeDirectMethodCall(target,implicitThis,checkCastReceiver,args);
      }
    }
    return super.writeDirectMethodCall(target,implicitThis,receiver,args);
  }
}
