{
  if (para.length == 0)   return;
  ClassNode lastParaType=para[para.length - 1].getOriginType();
  AsmClassGenerator acg=controller.getAcg();
  TypeChooser typeChooser=controller.getTypeChooser();
  OperandStack operandStack=controller.getOperandStack();
  ClassNode lastArgType=argumentList.size() > 0 ? typeChooser.resolveType(argumentList.get(argumentList.size() - 1),controller.getClassNode()) : null;
  if (lastParaType.isArray() && (argumentList.size() > para.length || (argumentList.size() == para.length - 1 && !lastParaType.equals(lastArgType)))) {
    int stackLen=operandStack.getStackLength() + argumentList.size();
    MethodVisitor mv=controller.getMethodVisitor();
    MethodVisitor orig=mv;
    controller.setMethodVisitor(mv);
    for (int i=0; i < para.length - 1; i++) {
      Expression expression=argumentList.get(i);
      expression.visit(acg);
      if (!isNullConstant(expression)) {
        operandStack.doGroovyCast(para[i].getType());
      }
    }
    List<Expression> lastParams=new LinkedList<Expression>();
    for (int i=para.length - 1; i < argumentList.size(); i++) {
      lastParams.add(argumentList.get(i));
    }
    ArrayExpression array=new ArrayExpression(lastParaType.getComponentType(),lastParams);
    array.visit(acg);
    while (operandStack.getStackLength() < stackLen) {
      operandStack.push(ClassHelper.OBJECT_TYPE);
    }
    if (argumentList.size() == para.length - 1) {
      operandStack.remove(1);
    }
  }
 else   if (argumentList.size() == para.length) {
    for (int i=0; i < argumentList.size(); i++) {
      Expression expression=argumentList.get(i);
      expression.visit(acg);
      if (!isNullConstant(expression)) {
        operandStack.doGroovyCast(para[i].getType());
      }
    }
  }
 else {
    ClassNode classNode=controller.getClassNode();
    Expression[] arguments=new Expression[para.length];
    for (int i=0, j=0; i < para.length; i++) {
      Parameter curParam=para[i];
      ClassNode curParamType=curParam.getType();
      Expression curArg=j < argumentList.size() ? argumentList.get(j) : null;
      Expression initialExpression=(Expression)curParam.getNodeMetaData(StaticTypesMarker.INITIAL_EXPRESSION);
      if (initialExpression == null && curParam.hasInitialExpression())       initialExpression=curParam.getInitialExpression();
      if (initialExpression == null && curParam.getNodeMetaData(Verifier.INITIAL_EXPRESSION) != null) {
        initialExpression=(Expression)curParam.getNodeMetaData(Verifier.INITIAL_EXPRESSION);
      }
      ClassNode curArgType=curArg == null ? null : typeChooser.resolveType(curArg,classNode);
      if (initialExpression != null && !compatibleArgumentType(curArgType,curParamType)) {
        arguments[i]=initialExpression;
      }
 else {
        arguments[i]=curArg;
        j++;
      }
    }
    for (int i=0; i < arguments.length; i++) {
      Expression expression=arguments[i];
      expression.visit(acg);
      if (!isNullConstant(expression)) {
        operandStack.doGroovyCast(para[i].getType());
      }
    }
  }
}
