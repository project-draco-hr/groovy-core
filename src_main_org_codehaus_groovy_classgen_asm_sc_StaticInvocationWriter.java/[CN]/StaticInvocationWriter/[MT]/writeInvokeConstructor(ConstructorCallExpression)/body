{
  MethodNode mn=call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
  if (mn == null) {
    super.writeInvokeConstructor(call);
    return;
  }
  if (writeAICCall(call))   return;
  ConstructorNode cn;
  if (mn instanceof ConstructorNode) {
    cn=(ConstructorNode)mn;
  }
 else {
    cn=new ConstructorNode(mn.getModifiers(),mn.getParameters(),mn.getExceptions(),mn.getCode());
    cn.setDeclaringClass(mn.getDeclaringClass());
  }
  if (cn.isPrivate()) {
    ClassNode classNode=controller.getClassNode();
    ClassNode declaringClass=cn.getDeclaringClass();
    if (declaringClass != classNode) {
      controller.getSourceUnit().addError(new SyntaxException("Cannot call private constructor for " + declaringClass.toString(false) + " from class "+ classNode.toString(false),call.getLineNumber(),call.getColumnNumber(),mn.getLastLineNumber(),call.getLastColumnNumber()));
    }
  }
  String ownerDescriptor=prepareConstructorCall(cn);
  TupleExpression args=makeArgumentList(call.getArguments());
  int before=controller.getOperandStack().getStackLength();
  loadArguments(args.getExpressions(),cn.getParameters());
  finnishConstructorCall(cn,ownerDescriptor,controller.getOperandStack().getStackLength() - before);
}
