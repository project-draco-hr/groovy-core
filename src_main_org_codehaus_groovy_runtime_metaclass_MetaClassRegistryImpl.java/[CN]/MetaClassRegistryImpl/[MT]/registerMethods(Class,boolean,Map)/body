{
  CachedMethod[] methods=ReflectionCache.getCachedClass(theClass).getMethods();
  if (useInstanceMethods) {
    for (int i=0; ; ++i) {
      try {
        final String className="org.codehaus.groovy.runtime.dgm$" + i;
        final Class aClass=Class.forName(className);
        try {
          MetaMethod method=(MetaMethod)aClass.newInstance();
          final CachedClass declClass=method.getDeclaringClass();
          ArrayList arr=(ArrayList)map.get(declClass);
          if (arr == null) {
            arr=new ArrayList(4);
            map.put(declClass,arr);
          }
          arr.add(method);
          instanceMethods.add(method);
        }
 catch (        InstantiationException e) {
        }
catch (        IllegalAccessException e) {
        }
      }
 catch (      ClassNotFoundException e) {
        break;
      }
    }
  }
 else {
    for (int i=0; i < methods.length; i++) {
      CachedMethod method=methods[i];
      final int mod=method.getModifiers();
      if (Modifier.isStatic(mod) && Modifier.isPublic(mod)) {
        CachedClass[] paramTypes=method.getParameterTypes();
        if (paramTypes.length > 0) {
          ArrayList arr=(ArrayList)map.get(paramTypes[0]);
          if (arr == null) {
            arr=new ArrayList(4);
            map.put(paramTypes[0],arr);
          }
          if (useInstanceMethods) {
            final NewInstanceMetaMethod metaMethod=new NewInstanceMetaMethod(method);
            arr.add(metaMethod);
            instanceMethods.add(metaMethod);
          }
 else {
            final NewStaticMetaMethod metaMethod=new NewStaticMetaMethod(method);
            arr.add(metaMethod);
            staticMethods.add(metaMethod);
          }
        }
      }
    }
  }
}
