{
  final String name=getReflectorName(theClass);
  ClassLoader loader=(ClassLoader)AccessController.doPrivileged(new PrivilegedAction(){
    public Object run(){
      ClassLoader loader=theClass.getClassLoader();
      if (loader == null)       loader=this.getClass().getClassLoader();
      return loader;
    }
  }
);
  final ReflectorLoader rloader=getReflectorLoader(loader);
  Class ref=rloader.getLoadedClass(name);
  if (ref == null) {
    ReflectorGenerator generator=new ReflectorGenerator(methods);
    ClassWriter cw=new ClassWriter(true);
    generator.generate(cw,name);
    final byte[] bytecode=cw.toByteArray();
    ref=(Class)AccessController.doPrivileged(new PrivilegedAction(){
      public Object run(){
        return rloader.defineClass(name,bytecode,getClass().getProtectionDomain());
      }
    }
);
  }
  try {
    return (Reflector)ref.getDeclaredFields()[0].get(null);
  }
 catch (  Exception e) {
    throw new GroovyRuntimeException("Could not generate and load the reflector for class: " + name + ". Reason: "+ e,e);
  }
}
