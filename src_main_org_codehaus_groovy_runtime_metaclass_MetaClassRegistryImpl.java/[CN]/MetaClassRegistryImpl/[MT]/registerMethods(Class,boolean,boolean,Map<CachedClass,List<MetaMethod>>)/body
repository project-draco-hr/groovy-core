{
  if (useMethodWrapper) {
    try {
      ArrayList<GeneratedMetaMethod.DgmMethodRecord> records=GeneratedMetaMethod.DgmMethodRecord.loadDgmInfo();
      for (      GeneratedMetaMethod.DgmMethodRecord record : records) {
        Class[] newParams=new Class[record.parameters.length - 1];
        System.arraycopy(record.parameters,1,newParams,0,record.parameters.length - 1);
        MetaMethod method=new GeneratedMetaMethod.Proxy(record.className,record.methodName,ReflectionCache.getCachedClass(record.parameters[0]),record.returnType,newParams);
        final CachedClass declClass=method.getDeclaringClass();
        List<MetaMethod> arr=map.get(declClass);
        if (arr == null) {
          arr=new ArrayList<MetaMethod>(4);
          map.put(declClass,arr);
        }
        arr.add(method);
        instanceMethods.add(method);
      }
    }
 catch (    Throwable e) {
      e.printStackTrace();
      System.exit(0);
    }
  }
 else {
    CachedMethod[] methods=ReflectionCache.getCachedClass(theClass).getMethods();
    for (    CachedMethod method : methods) {
      final int mod=method.getModifiers();
      if (Modifier.isStatic(mod) && Modifier.isPublic(mod) && method.getCachedMethod().getAnnotation(Deprecated.class) == null) {
        CachedClass[] paramTypes=method.getParameterTypes();
        if (paramTypes.length > 0) {
          List<MetaMethod> arr=map.get(paramTypes[0]);
          if (arr == null) {
            arr=new ArrayList<MetaMethod>(4);
            map.put(paramTypes[0],arr);
          }
          if (useInstanceMethods) {
            final NewInstanceMetaMethod metaMethod=new NewInstanceMetaMethod(method);
            arr.add(metaMethod);
            instanceMethods.add(metaMethod);
          }
 else {
            final NewStaticMetaMethod metaMethod=new NewStaticMetaMethod(method);
            arr.add(metaMethod);
            staticMethods.add(metaMethod);
          }
        }
      }
    }
  }
}
