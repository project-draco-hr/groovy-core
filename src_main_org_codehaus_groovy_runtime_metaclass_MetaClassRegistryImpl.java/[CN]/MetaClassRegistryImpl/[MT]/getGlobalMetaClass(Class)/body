{
  MetaClass answer=null;
  if (constantMetaClassCount != 0)   answer=(MetaClass)constantMetaClasses.get(theClass);
  if (answer != null)   return answer;
  answer=(MetaClass)weakMetaClasses.get(theClass);
  if (answer != null)   return answer;
synchronized (theClass) {
    answer=(MetaClass)weakMetaClasses.get(theClass);
    if (answer != null)     return answer;
    answer=metaClassCreationHandle.create(theClass,this);
    answer.initialize();
    if (GroovySystem.isKeepJavaMetaClasses()) {
      constantMetaClassCount++;
      constantMetaClasses.put(theClass,answer);
      final CachedClass aClass=ReflectionCache.getCachedClass(theClass);
      aClass.setStaticMetaClassField(answer);
      aClass.setMetaClassForClass(answer,true);
    }
 else {
      final CachedClass aClass=ReflectionCache.getCachedClass(theClass);
      aClass.setStaticMetaClassField(answer);
      aClass.setMetaClassForClass(answer,false);
      weakMetaClasses.put(theClass,answer);
    }
  }
  return answer;
}
