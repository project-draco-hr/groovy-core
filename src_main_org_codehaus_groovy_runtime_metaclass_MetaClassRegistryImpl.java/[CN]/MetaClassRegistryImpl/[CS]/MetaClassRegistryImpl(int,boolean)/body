{
  this.useAccessible=useAccessible;
  if (loadDefault == LOAD_DEFAULT) {
    Map<CachedClass,List<MetaMethod>> map=new HashMap<CachedClass,List<MetaMethod>>();
    registerMethods(null,true,true,map);
    final Class[] additionals=DefaultGroovyMethods.additionals;
    for (int i=0; i != additionals.length; ++i) {
      createMetaMethodFromClass(map,additionals[i]);
    }
    Class[] pluginDGMs=VMPluginFactory.getPlugin().getPluginDefaultGroovyMethods();
    for (    Class plugin : pluginDGMs) {
      registerMethods(plugin,false,true,map);
    }
    registerMethods(DefaultGroovyStaticMethods.class,false,false,map);
    Class[] staticPluginDGMs=VMPluginFactory.getPlugin().getPluginStaticGroovyMethods();
    for (    Class plugin : staticPluginDGMs) {
      registerMethods(plugin,false,false,map);
    }
    registerClasspathModules(map,this.getClass().getClassLoader());
    refreshMopMethods(map);
  }
  installMetaClassCreationHandle();
  final MetaClass emcMetaClass=metaClassCreationHandle.create(ExpandoMetaClass.class,this);
  emcMetaClass.initialize();
  ClassInfo.getClassInfo(ExpandoMetaClass.class).setStrongMetaClass(emcMetaClass);
  addMetaClassRegistryChangeEventListener(new MetaClassRegistryChangeEventListener(){
    public void updateConstantMetaClass(    MetaClassRegistryChangeEvent cmcu){
synchronized (metaClassInfo) {
        metaClassInfo.add(cmcu.getNewMetaClass());
        DefaultMetaClassInfo.getNewConstantMetaClassVersioning();
        Class c=cmcu.getClassToUpdate();
        DefaultMetaClassInfo.setPrimitiveMeta(c,cmcu.getNewMetaClass() == null);
        Field sdyn;
        try {
          sdyn=c.getDeclaredField(Verifier.STATIC_METACLASS_BOOL);
          sdyn.setBoolean(null,cmcu.getNewMetaClass() != null);
        }
 catch (        Throwable e) {
        }
      }
    }
  }
);
}
