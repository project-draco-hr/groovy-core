{
  ClassNode result=baseType.getPlainNodeReference();
  if (result.isUsingGenerics()) {
    GenericsType[] gts=new GenericsType[genericsTypeArguments.length];
    int expectedLength=result.getGenericsTypes().length;
    if (expectedLength != genericsTypeArguments.length) {
      throw new GroovyBugError("Expected number of generic type arguments for " + baseType.toString(false) + " is "+ expectedLength+ " but you gave "+ genericsTypeArguments.length);
    }
    for (int i=0; i < gts.length; i++) {
      gts[i]=new GenericsType(genericsTypeArguments[i]);
    }
    result.setGenericsTypes(gts);
  }
  return result;
}
