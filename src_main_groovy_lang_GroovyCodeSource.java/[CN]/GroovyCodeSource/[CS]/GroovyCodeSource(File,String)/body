{
  final File file=new File(infile.getCanonicalPath());
  if (!file.exists()) {
    throw new FileNotFoundException(file.toString() + " (" + file.getAbsolutePath()+ ")");
  }
  if (file.isDirectory()) {
    throw new IllegalArgumentException(file.toString() + " (" + file.getAbsolutePath()+ ") is a directory not a Groovy source file.");
  }
  try {
    if (!file.canRead())     throw new RuntimeException(file.toString() + " can not be read. Check the read permission of the file \"" + file.toString()+ "\" ("+ file.getAbsolutePath()+ ").");
  }
 catch (  SecurityException e) {
    throw e;
  }
  this.file=file;
  this.cachable=true;
  try {
    Object[] info=AccessController.doPrivileged(new PrivilegedExceptionAction<Object[]>(){
      public Object[] run() throws IOException {
        if (encoding != null) {
          scriptText=DefaultGroovyMethods.getText(infile,encoding);
        }
 else {
          scriptText=DefaultGroovyMethods.getText(infile);
        }
        Object[] info=new Object[2];
        URL url=file.toURI().toURL();
        info[0]=url.toExternalForm();
        info[1]=new CodeSource(url,(Certificate[])null);
        return info;
      }
    }
);
    this.name=(String)info[0];
    this.codeSource=(CodeSource)info[1];
  }
 catch (  PrivilegedActionException pae) {
    throw new RuntimeException("Could not construct a URL from: " + file);
  }
}
