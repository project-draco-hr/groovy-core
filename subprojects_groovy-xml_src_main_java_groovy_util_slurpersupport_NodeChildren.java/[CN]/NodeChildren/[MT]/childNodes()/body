{
  return new Iterator(){
    private final Iterator iter=nodeIterator();
    private Iterator childIter=nextChildIter();
    public boolean hasNext(){
      return childIter != null;
    }
    public Object next(){
      while (childIter != null) {
        try {
          if (childIter.hasNext()) {
            return childIter.next();
          }
        }
  finally {
          if (!childIter.hasNext()) {
            childIter=nextChildIter();
          }
        }
      }
      return null;
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
    private Iterator nextChildIter(){
      while (iter.hasNext()) {
        final Node node=(Node)iter.next();
        final Iterator result=node.childNodes();
        if (result.hasNext())         return result;
      }
      return null;
    }
  }
;
}
