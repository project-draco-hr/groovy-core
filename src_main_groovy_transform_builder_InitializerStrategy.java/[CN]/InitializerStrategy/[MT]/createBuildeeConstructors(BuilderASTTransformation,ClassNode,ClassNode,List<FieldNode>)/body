{
  ClassNode paramType=makeClassSafeWithGenerics(builder,setGenTypes(fields.size()));
  List<Expression> argsList=new ArrayList<Expression>();
  for (  FieldNode fieldNode : fields) {
    argsList.add(propX(varX("initializer"),fieldNode.getName()));
  }
  Expression args=new ArgumentListExpression(argsList);
  ConstructorNode initializer=buildee.addConstructor(ACC_PUBLIC,params(param(paramType,"initializer")),NO_EXCEPTIONS,block(ctorThisS(args)));
  if (transform.hasAnnotation(buildee,ImmutableASTTransformation.MY_TYPE)) {
    initializer.putNodeMetaData(ImmutableASTTransformation.IMMUTABLE_SAFE_FLAG,Boolean.TRUE);
  }
 else {
    final BlockStatement body=new BlockStatement();
    body.addStatement(ctorSuperS());
    initializeFields(fields,body);
    buildee.addConstructor(ACC_PRIVATE | ACC_SYNTHETIC,getParams(fields),NO_EXCEPTIONS,body);
  }
}
