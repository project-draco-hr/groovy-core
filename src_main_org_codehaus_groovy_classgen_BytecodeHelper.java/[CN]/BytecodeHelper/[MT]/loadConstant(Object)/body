{
  if (value == null) {
    cv.visitInsn(ACONST_NULL);
  }
 else   if (value instanceof String) {
    cv.visitLdcInsn(value);
  }
 else   if (value instanceof Character) {
    String className="java/lang/Character";
    cv.visitTypeInsn(NEW,className);
    cv.visitInsn(DUP);
    cv.visitLdcInsn(value);
    String methodType="(C)V";
    cv.visitMethodInsn(INVOKESPECIAL,className,"<init>",methodType);
  }
 else   if (value instanceof Number) {
    Number n=(Number)value;
    String className=BytecodeHelper.getClassInternalName(value.getClass().getName());
    cv.visitTypeInsn(NEW,className);
    cv.visitInsn(DUP);
    String methodType;
    if (n instanceof Integer) {
      cv.visitLdcInsn(n);
      methodType="(I)V";
    }
 else     if (n instanceof Double) {
      cv.visitLdcInsn(n);
      methodType="(D)V";
    }
 else     if (n instanceof Float) {
      cv.visitLdcInsn(n);
      methodType="(F)V";
    }
 else     if (n instanceof Long) {
      cv.visitLdcInsn(n);
      methodType="(J)V";
    }
 else     if (n instanceof BigDecimal) {
      cv.visitLdcInsn(n.toString());
      methodType="(Ljava/lang/String;)V";
    }
 else     if (n instanceof BigInteger) {
      cv.visitLdcInsn(n.toString());
      methodType="(Ljava/lang/String;)V";
    }
 else     if (n instanceof Short) {
      cv.visitLdcInsn(n);
      methodType="(S)V";
    }
 else     if (n instanceof Byte) {
      cv.visitLdcInsn(n);
      methodType="(B)V";
    }
 else {
      throw new ClassGeneratorException("Cannot generate bytecode for constant: " + value + " of type: "+ value.getClass().getName()+ ".  Numeric constant type not supported.");
    }
    cv.visitMethodInsn(INVOKESPECIAL,className,"<init>",methodType);
  }
 else   if (value instanceof Boolean) {
    Boolean bool=(Boolean)value;
    String text=(bool.booleanValue()) ? "TRUE" : "FALSE";
    cv.visitFieldInsn(GETSTATIC,"java/lang/Boolean",text,"Ljava/lang/Boolean;");
  }
 else   if (value instanceof Class) {
    Class vc=(Class)value;
    if (vc.getName().equals("java.lang.Void")) {
    }
 else {
      throw new ClassGeneratorException("Cannot generate bytecode for constant: " + value + " of type: "+ value.getClass().getName());
    }
  }
 else {
    throw new ClassGeneratorException("Cannot generate bytecode for constant: " + value + " of type: "+ value.getClass().getName());
  }
}
