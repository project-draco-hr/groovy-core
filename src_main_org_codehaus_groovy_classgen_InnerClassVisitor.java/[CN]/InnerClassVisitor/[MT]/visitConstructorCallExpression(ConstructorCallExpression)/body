{
  super.visitConstructorCallExpression(call);
  if (!call.isUsingAnnonymousInnerClass()) {
    passThisReference(call);
    return;
  }
  InnerClassNode innerClass=(InnerClassNode)call.getType();
  if (!innerClass.getDeclaredConstructors().isEmpty())   return;
  if ((innerClass.getModifiers() & ACC_STATIC) != 0)   return;
  VariableScope scope=innerClass.getVariableScope();
  if (scope == null)   return;
  boolean isStatic=scope.isInStaticContext();
  List<Expression> expressions=((TupleExpression)call.getArguments()).getExpressions();
  BlockStatement block=new BlockStatement();
  List parameters=new ArrayList(expressions.size() + 1 + scope.getReferencedLocalVariablesCount());
  List superCallArguments=new ArrayList(expressions.size());
  int pCount=0;
  for (  Expression expr : expressions) {
    pCount++;
    Parameter param=new Parameter(ClassHelper.OBJECT_TYPE,"p" + pCount);
    parameters.add(param);
    superCallArguments.add(new VariableExpression(param));
  }
  ConstructorCallExpression cce=new ConstructorCallExpression(ClassNode.SUPER,new TupleExpression(superCallArguments));
  block.addStatement(new ExpressionStatement(cce));
  expressions.add(VariableExpression.THIS_EXPRESSION);
  pCount++;
  ClassNode outerClassType=getClassNode(innerClass.getOuterClass(),isStatic);
  Parameter thisParameter=new Parameter(outerClassType,"p" + pCount);
  parameters.add(thisParameter);
  thisField=innerClass.addField("this$0",publicSynthetic,outerClassType,null);
  addFieldInit(thisParameter,thisField,block);
  for (Iterator it=scope.getReferencedLocalVariablesIterator(); it.hasNext(); ) {
    pCount++;
    org.codehaus.groovy.ast.Variable var=(org.codehaus.groovy.ast.Variable)it.next();
    VariableExpression ve=new VariableExpression(var);
    ve.setClosureSharedVariable(true);
    ve.setUseReferenceDirectly(true);
    expressions.add(ve);
    Parameter p=new Parameter(ClassHelper.REFERENCE_TYPE,"p" + pCount);
    parameters.add(p);
    final VariableExpression initial=new VariableExpression(p);
    initial.setUseReferenceDirectly(true);
    final FieldNode pField=innerClass.addFieldFirst(ve.getName(),publicSynthetic,ClassHelper.REFERENCE_TYPE,initial);
    final int finalPCount=pCount;
    pField.setHolder(true);
  }
  innerClass.addConstructor(ACC_PUBLIC,(Parameter[])parameters.toArray(new Parameter[0]),ClassNode.EMPTY_ARRAY,block);
}
