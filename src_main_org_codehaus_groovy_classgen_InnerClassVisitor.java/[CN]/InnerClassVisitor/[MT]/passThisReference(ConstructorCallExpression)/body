{
  ClassNode cn=call.getType().redirect();
  if (!shouldHandleImplicitThisForInnerClass(cn))   return;
  boolean isInStaticContext=true;
  if (currentMethod != null)   isInStaticContext=currentMethod.getVariableScope().isInStaticContext();
 else   if (currentField != null)   isInStaticContext=currentField.isStatic();
  if (isInStaticContext) {
    Expression args=call.getArguments();
    if (args instanceof TupleExpression && ((TupleExpression)args).getExpressions().isEmpty()) {
      addError("No enclosing instance passed in constructor call of a non-static inner class",call);
    }
    return;
  }
  ClassNode parent=classNode;
  int level=0;
  for (; parent != null && parent != cn.getOuterClass(); parent=parent.getOuterClass()) {
    level++;
  }
  if (parent == null)   return;
  Expression argsExp=call.getArguments();
  if (argsExp instanceof TupleExpression) {
    TupleExpression argsListExp=(TupleExpression)argsExp;
    Expression this0=VariableExpression.THIS_EXPRESSION;
    for (int i=0; i != level; ++i)     this0=new PropertyExpression(this0,"this$0");
    argsListExp.getExpressions().add(0,this0);
  }
}
