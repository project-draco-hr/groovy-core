{
  final int objectDistance=getObjectDistance(classNode);
  Parameter[] parameters=new Parameter[]{new Parameter(ClassHelper.STRING_TYPE,"name"),new Parameter(ClassHelper.OBJECT_TYPE,"args")};
  MethodNode method=classNode.addSyntheticMethod("this$dist$invoke$" + objectDistance,ACC_PUBLIC + ACC_SYNTHETIC,ClassHelper.OBJECT_TYPE,parameters,ClassNode.EMPTY_ARRAY,null);
  BlockStatement block=new BlockStatement();
  setMethodDispatcherCode(block,VariableExpression.THIS_EXPRESSION,parameters);
  method.setCode(block);
  parameters=new Parameter[]{new Parameter(ClassHelper.STRING_TYPE,"name"),new Parameter(ClassHelper.OBJECT_TYPE,"value")};
  method=classNode.addSyntheticMethod("this$dist$set$" + objectDistance,ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,ClassHelper.VOID_TYPE,parameters,ClassNode.EMPTY_ARRAY,null);
  block=new BlockStatement();
  setPropertySetDispatcher(block,VariableExpression.THIS_EXPRESSION,parameters);
  method.setCode(block);
  parameters=new Parameter[]{new Parameter(ClassHelper.STRING_TYPE,"name")};
  method=classNode.addSyntheticMethod("this$dist$get$" + objectDistance,ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,ClassHelper.OBJECT_TYPE,parameters,ClassNode.EMPTY_ARRAY,null);
  block=new BlockStatement();
  setPropertyGetterDispatcher(block,VariableExpression.THIS_EXPRESSION,parameters);
  method.setCode(block);
}
