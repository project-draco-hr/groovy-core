{
  String name=properties.getProperty(PropertiesModuleFactory.MODULE_NAME_KEY);
  if (name == null)   throw new GroovyRuntimeException("Module file hasn't set the module name using key [" + PropertiesModuleFactory.MODULE_NAME_KEY + "]");
  String version=properties.getProperty(PropertiesModuleFactory.MODULE_VERSION_KEY);
  if (version == null)   throw new GroovyRuntimeException("Module file hasn't set the module version using key [" + PropertiesModuleFactory.MODULE_VERSION_KEY + "]");
  String[] extensionClasses=properties.getProperty(MODULE_INSTANCE_CLASSES_KEY,"").trim().split("[,; ]");
  String[] staticExtensionClasses=properties.getProperty(MODULE_STATIC_CLASSES_KEY,"").trim().split("[,; ]");
  List<Class> instanceClasses=new ArrayList<Class>(extensionClasses.length);
  List<Class> staticClasses=new ArrayList<Class>(staticExtensionClasses.length);
  List<String> errors=new LinkedList<String>();
  for (  String extensionClass : extensionClasses) {
    try {
      extensionClass=extensionClass.trim();
      if (extensionClass.length() > 0) {
        instanceClasses.add(loader.loadClass(extensionClass));
      }
    }
 catch (    ClassNotFoundException e) {
      errors.add(extensionClass);
    }
  }
  for (  String extensionClass : staticExtensionClasses) {
    try {
      extensionClass=extensionClass.trim();
      if (extensionClass.length() > 0) {
        staticClasses.add(loader.loadClass(extensionClass));
      }
    }
 catch (    ClassNotFoundException e) {
      errors.add(extensionClass);
    }
  }
  if (!errors.isEmpty()) {
    for (    String error : errors) {
      LOG.warning("Module [" + name + "] - Unable to load extension class ["+ error+ "]");
    }
  }
  return new MetaInfExtensionModule(name,version,instanceClasses,staticClasses);
}
