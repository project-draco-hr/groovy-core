{
  Parameter[] params=selectAccessibleConstructorFromSuper(node);
  if (params != null) {
    out.print("super (");
    for (int i=0; i < params.length; i++) {
      printDefaultValue(out,params[i].getType());
      if (i + 1 < params.length) {
        out.print(", ");
      }
    }
    out.println(");");
    return;
  }
  Expression arguments=constrCall.getArguments();
  if (constrCall.isSuperCall()) {
    out.print("super(");
  }
 else {
    out.print("this(");
  }
  if (arguments instanceof ArgumentListExpression) {
    ArgumentListExpression argumentListExpression=(ArgumentListExpression)arguments;
    List args=argumentListExpression.getExpressions();
    for (Iterator it=args.iterator(); it.hasNext(); ) {
      Expression arg=(Expression)it.next();
      if (arg instanceof ConstantExpression) {
        ConstantExpression expression=(ConstantExpression)arg;
        Object o=expression.getValue();
        if (o instanceof String) {
          out.print("(String)null");
        }
 else {
          out.print(expression.getText());
        }
      }
 else {
        ClassNode type=getConstructorArgumentType(arg,node);
        printDefaultValue(out,type);
      }
      if (arg != args.get(args.size() - 1)) {
        out.print(", ");
      }
    }
  }
  out.println(");");
}
