{
  super.visitBinaryExpression(expression);
  ClassNode lType=getType(expression.getLeftExpression(),classNode);
  final Expression rightExpression=expression.getRightExpression();
  ClassNode rType=getType(rightExpression,classNode);
  int op=expression.getOperation().getType();
  ClassNode resultType=getResultType(lType,op,rType,expression);
  if (resultType == null) {
    addStaticTypeError("tbd...",expression);
    resultType=lType;
  }
  storeType(expression,resultType);
  if (isAssignment(op)) {
    ClassNode leftRedirect;
    if (isArrayAccessExpression(expression.getLeftExpression())) {
      leftRedirect=lType;
    }
 else {
      leftRedirect=expression.getLeftExpression().getType().redirect();
    }
    final boolean compatible=checkCompatibleAssignmentTypes(leftRedirect,resultType);
    if (!compatible) {
      addStaticTypeError("Cannot assign value of type " + resultType + " to variable of type "+ lType,expression);
    }
 else {
      if (lType.isArray()) {
        ClassNode leftComponentType=lType.getComponentType();
        ClassNode rightRedirect=rightExpression.getType().redirect();
        if (rightRedirect.isArray()) {
          ClassNode rightComponentType=rightRedirect.getComponentType();
          if (!checkCompatibleAssignmentTypes(leftComponentType,rightComponentType)) {
            addStaticTypeError("Cannot assign value of type " + rightComponentType + " into array of type "+ lType,expression);
          }
        }
 else         if (rightExpression instanceof ListExpression) {
          for (          Expression element : ((ListExpression)rightExpression).getExpressions()) {
            ClassNode rightComponentType=element.getType().redirect();
            if (!checkCompatibleAssignmentTypes(leftComponentType,rightComponentType)) {
              addStaticTypeError("Cannot assign value of type " + rightComponentType + " into array of type "+ lType,expression);
            }
          }
        }
      }
    }
    storeType(expression.getLeftExpression(),resultType);
  }
 else   if (op == KEYWORD_INSTANCEOF) {
    Expression left=expression.getLeftExpression();
    final Map<Object,List<ClassNode>> tempo=temporaryIfBranchTypeInformation.peek();
    Object key=left.getText();
    if (left instanceof VariableExpression && rightExpression instanceof ClassExpression) {
      key=findTargetVariable((VariableExpression)left);
    }
    List<ClassNode> potentialTypes=tempo.get(key);
    if (potentialTypes == null) {
      potentialTypes=new LinkedList<ClassNode>();
      tempo.put(key,potentialTypes);
    }
    potentialTypes.add(rightExpression.getType());
  }
}
