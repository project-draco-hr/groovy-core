{
  AnnotationNode annotationInformation=(AnnotationNode)nodes[0];
  Map<String,Expression> members=annotationInformation.getMembers();
  TypeCheckerPluginFactory pluginFactory=null;
  if (members != null) {
    Expression exp=members.get("pluginFactory");
    if (exp instanceof ClassExpression) {
      ClassNode type=exp.getType();
      Class clazz=type.getTypeClass();
      if (TypeCheckerPluginFactory.class.isAssignableFrom(TypeCheckerPluginFactory.class)) {
        try {
          pluginFactory=(TypeCheckerPluginFactory)clazz.newInstance();
        }
 catch (        InstantiationException e) {
          throw new GroovyBugError(e);
        }
catch (        IllegalAccessException e) {
          throw new GroovyBugError(e);
        }
      }
    }
  }
  AnnotatedNode node=(AnnotatedNode)nodes[1];
  StaticTypeCheckingVisitor visitor=null;
  if (node instanceof ClassNode) {
    ClassNode classNode=(ClassNode)node;
    visitor=newVisitor(source,classNode,pluginFactory);
    visitor.visitClass(classNode);
  }
 else   if (node instanceof MethodNode) {
    MethodNode methodNode=(MethodNode)node;
    visitor=newVisitor(source,methodNode.getDeclaringClass(),pluginFactory);
    visitor.setMethodsToBeVisited(Collections.singleton(methodNode));
    visitor.visitMethod(methodNode);
  }
 else {
    source.addError(new SyntaxException(STATIC_ERROR_PREFIX + "Unimplemented node type",node.getLineNumber(),node.getColumnNumber()));
  }
  if (visitor != null) {
    visitor.performSecondPass();
  }
}
