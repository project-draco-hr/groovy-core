{
  BeanInfo info;
  final Class stopClass;
  try {
    if (isBeanDerivative(theClass)) {
      info=(BeanInfo)AccessController.doPrivileged(new PrivilegedExceptionAction(){
        public Object run() throws IntrospectionException {
          return Introspector.getBeanInfo(theClass,Introspector.IGNORE_ALL_BEANINFO);
        }
      }
);
    }
 else {
      info=(BeanInfo)AccessController.doPrivileged(new PrivilegedExceptionAction(){
        public Object run() throws IntrospectionException {
          return Introspector.getBeanInfo(theClass);
        }
      }
);
    }
  }
 catch (  PrivilegedActionException pae) {
    throw new GroovyRuntimeException("exception during bean introspection",pae.getException());
  }
  PropertyDescriptor[] descriptors=info.getPropertyDescriptors();
  setupProperties(descriptors);
  EventSetDescriptor[] eventDescriptors=info.getEventSetDescriptors();
  for (int i=0; i < eventDescriptors.length; i++) {
    EventSetDescriptor descriptor=eventDescriptors[i];
    Method[] listenerMethods=descriptor.getListenerMethods();
    for (int j=0; j < listenerMethods.length; j++) {
      Method listenerMethod=listenerMethods[j];
      final MetaMethod metaMethod=CachedMethod.find(descriptor.getAddListenerMethod());
      addToAllMethodsIfPublic(metaMethod);
      String name=listenerMethod.getName();
      if (listeners.containsKey(name)) {
        listeners.put(name,AMBIGUOUS_LISTENER_METHOD);
      }
 else {
        listeners.put(name,metaMethod);
      }
    }
  }
}
