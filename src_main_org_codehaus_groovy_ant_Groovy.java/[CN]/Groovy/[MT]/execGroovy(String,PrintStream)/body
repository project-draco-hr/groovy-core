{
  log("execGroovy()",Project.MSG_VERBOSE);
  if ("".equals(txt.trim())) {
    return;
  }
  log("Groovy: " + txt,Project.MSG_VERBOSE);
  GroovyShell groovy=new GroovyShell(GroovyShell.class.getClassLoader());
  try {
    Script script=groovy.parse(txt);
    Project project=getProject();
    script.setProperty("ant",new AntBuilder(project));
    script.setProperty("project",project);
    script.setProperty("properties",project.getProperties());
    script.setProperty("target",getOwningTarget());
    script.setProperty("task",this);
    if ("org.apache.commons.grant.GrantProject".equals(project.getClass().getName())) {
      try {
        Object propsHandler=project.getClass().getMethod("getPropsHandler",new Class[0]).invoke(project,new Object[0]);
        Field contextField=propsHandler.getClass().getDeclaredField("context");
        contextField.setAccessible(true);
        Object context=contextField.get(propsHandler);
        Object mavenPom=InvokerHelper.invokeMethod(context,"getProject",new Object[0]);
        script.setProperty("pom",mavenPom);
      }
 catch (      Exception e) {
        throw new BuildException("Impossible to retrieve Maven's Ant project: " + e.getMessage(),getLocation());
      }
    }
    script.run();
  }
 catch (  CompilationFailedException e) {
    throw new BuildException("Script Failed: " + e.getMessage(),getLocation());
  }
  if (print) {
    StringBuffer line=new StringBuffer();
    line.append(" foo bar");
    out.println(line);
  }
}
