{
  log("execGroovy()",Project.MSG_VERBOSE);
  if ("".equals(txt.trim())) {
    return;
  }
  log("Groovy: " + txt,Project.MSG_VERBOSE);
  GroovyShell groovy=null;
  Object mavenPom=null;
  Project project=getProject();
  if ("org.apache.commons.grant.GrantProject".equals(project.getClass().getName())) {
    try {
      Object propsHandler=project.getClass().getMethod("getPropsHandler",new Class[0]).invoke(project,new Object[0]);
      Field contextField=propsHandler.getClass().getDeclaredField("context");
      contextField.setAccessible(true);
      Object context=contextField.get(propsHandler);
      mavenPom=InvokerHelper.invokeMethod(context,"getProject",new Object[0]);
    }
 catch (    Exception e) {
      throw new BuildException("Impossible to retrieve Maven's Ant project: " + e.getMessage(),getLocation());
    }
    Thread.currentThread().setContextClassLoader(GroovyShell.class.getClassLoader());
    groovy=new GroovyShell(mavenPom.getClass().getClassLoader(),new Binding(),configuration);
  }
 else {
    groovy=new GroovyShell(GroovyShell.class.getClassLoader(),new Binding(),configuration);
  }
  try {
    Script script=groovy.parse(txt);
    script.setProperty("ant",new AntBuilder(project));
    script.setProperty("project",project);
    script.setProperty("properties",new AntProjectPropertiesDelegate(project));
    script.setProperty("target",getOwningTarget());
    script.setProperty("task",this);
    if (mavenPom != null) {
      script.setProperty("pom",mavenPom);
    }
    script.run();
  }
 catch (  CompilationFailedException e) {
    StringWriter writer=new StringWriter();
    new ErrorReporter(e,false).write(new PrintWriter(writer));
    String message=writer.toString();
    throw new BuildException("Script Failed: " + message,getLocation());
  }
}
