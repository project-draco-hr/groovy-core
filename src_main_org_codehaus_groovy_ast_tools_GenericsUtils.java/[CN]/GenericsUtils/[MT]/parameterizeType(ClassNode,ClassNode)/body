{
  ClassNode interfaceFromClassNode=null;
  if (hint.equals(target))   interfaceFromClassNode=hint;
  if (ClassHelper.OBJECT_TYPE.equals(target) && target.isUsingGenerics() && target.getGenericsTypes() != null && target.getGenericsTypes()[0].isPlaceholder()) {
    return ClassHelper.getWrapper(hint);
  }
  if (interfaceFromClassNode == null) {
    ClassNode[] interfaces=hint.getInterfaces();
    for (    ClassNode node : interfaces) {
      if (node.equals(target)) {
        interfaceFromClassNode=node;
        break;
      }
 else       if (node.implementsInterface(target)) {
        return parameterizeType(parameterizeType(hint,node),target);
      }
    }
  }
  if (interfaceFromClassNode == null && hint.getUnresolvedSuperClass() != null) {
    return parameterizeType(hint.getUnresolvedSuperClass(),target);
  }
  if (interfaceFromClassNode == null) {
    interfaceFromClassNode=hint;
  }
  Map<String,GenericsType> parameters=new HashMap<String,GenericsType>();
  extractPlaceholders(hint,parameters);
  ClassNode node=target.getPlainNodeReference();
  GenericsType[] interfaceGTs=interfaceFromClassNode.getGenericsTypes();
  if (interfaceGTs == null)   return target;
  GenericsType[] types=new GenericsType[interfaceGTs.length];
  for (int i=0; i < interfaceGTs.length; i++) {
    GenericsType interfaceGT=interfaceGTs[i];
    types[i]=interfaceGT;
    if (interfaceGT.isPlaceholder()) {
      String name=interfaceGT.getName();
      if (parameters.containsKey(name)) {
        types[i]=parameters.get(name);
      }
    }
  }
  node.setGenericsTypes(types);
  return node;
}
