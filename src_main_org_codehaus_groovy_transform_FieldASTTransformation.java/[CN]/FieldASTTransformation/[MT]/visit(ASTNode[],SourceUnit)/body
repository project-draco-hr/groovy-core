{
  sourceUnit=source;
  if (nodes.length != 2 || !(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof AnnotatedNode)) {
    throw new GroovyBugError("Internal error: expecting [AnnotationNode, AnnotatedNode] but got: " + Arrays.asList(nodes));
  }
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  AnnotationNode node=(AnnotationNode)nodes[0];
  if (!MY_TYPE.equals(node.getClassNode()))   return;
  if (parent instanceof DeclarationExpression) {
    DeclarationExpression de=(DeclarationExpression)parent;
    ClassNode cNode=de.getDeclaringClass();
    if (!cNode.isScript()) {
      addError("Annotation " + MY_TYPE_NAME + " can only be used within a Script.",parent);
      return;
    }
    candidate=de;
    if (de.isMultipleAssignmentDeclaration()) {
      addError("Annotation " + MY_TYPE_NAME + " not supported with multiple assignment notation.",parent);
      return;
    }
    VariableExpression ve=de.getVariableExpression();
    variableName=ve.getName();
    fieldNode=new FieldNode(variableName,ve.getModifiers(),ve.getType(),null,de.getRightExpression());
    fieldNode.setSourcePosition(de);
    cNode.addField(fieldNode);
    final List<AnnotationNode> annotations=de.getAnnotations();
    for (    AnnotationNode annotation : annotations) {
      final ClassNode annotationClassNode=annotation.getClassNode();
      if (annotationClassNode.getAnnotations(ASTTRANSFORM_TYPE).isEmpty()) {
        fieldNode.addAnnotation(annotation);
      }
    }
    super.visitClass(cNode);
    VariableScopeVisitor scopeVisitor=new VariableScopeVisitor(source);
    scopeVisitor.visitClass(cNode);
  }
}
