{
  if (parent == null)   insideTask=false;
  antElementHandler.onEndElement(null,null,antXmlContext);
  lastCompletedNode=node;
  if (parent != null && !(parent instanceof Target)) {
    log.finest("parent is not null: no perform on nodeCompleted");
    return;
  }
  if (node instanceof Task) {
    Task task=(Task)node;
    final String taskName=task.getTaskName();
    if ("antcall".equals(taskName) && parent == null) {
      throw new BuildException("antcall not supported within AntBuilder, consider using 'ant.project.executeTarget('targetName')' instead.");
    }
    if (savingStreams) {
      int currentStreamCount=streamCount.getAndIncrement();
      if (currentStreamCount == 0) {
        savedProjectInputStream=project.getDefaultInputStream();
        savedIn=System.in;
        savedErr=System.err;
        savedOut=System.out;
        if (!(savedIn instanceof DemuxInputStream)) {
          project.setDefaultInputStream(savedIn);
          demuxInputStream=new DemuxInputStream(project);
          System.setIn(demuxInputStream);
        }
        demuxOutputStream=new DemuxOutputStream(project,false);
        System.setOut(new PrintStream(demuxOutputStream));
        demuxErrorStream=new DemuxOutputStream(project,true);
        System.setErr(new PrintStream(demuxErrorStream));
      }
    }
    try {
      lastCompletedNode=performTask(task);
    }
  finally {
      if (savingStreams) {
        int currentStreamCount=streamCount.decrementAndGet();
        if (currentStreamCount == 0) {
          project.setDefaultInputStream(savedProjectInputStream);
          System.setIn(savedIn);
          System.setOut(savedOut);
          System.setErr(savedErr);
          if (demuxInputStream != null)           DefaultGroovyMethodsSupport.closeQuietly(demuxInputStream);
          DefaultGroovyMethodsSupport.closeQuietly(demuxOutputStream);
          DefaultGroovyMethodsSupport.closeQuietly(demuxErrorStream);
          demuxInputStream=null;
          demuxOutputStream=null;
          demuxErrorStream=null;
        }
      }
    }
    if ("import".equals(taskName)) {
      antXmlContext.setCurrentTarget(collectorTarget);
    }
  }
 else   if (node instanceof Target) {
    antXmlContext.setCurrentTarget(collectorTarget);
  }
 else {
    final RuntimeConfigurable r=(RuntimeConfigurable)node;
    r.maybeConfigure(project);
  }
}
