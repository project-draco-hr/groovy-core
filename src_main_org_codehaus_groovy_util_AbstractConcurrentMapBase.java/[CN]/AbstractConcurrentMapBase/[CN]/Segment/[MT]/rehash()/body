{
  Object[] oldTable=table;
  int oldCapacity=oldTable.length;
  if (oldCapacity >= MAXIMUM_CAPACITY)   return;
  int newCount=0;
  for (int i=0; i < oldCapacity; i++) {
    Object o=oldTable[i];
    if (o != null) {
      if (o instanceof Entry) {
        Entry e=(Entry)o;
        if (e.isValid()) {
          newCount++;
        }
 else {
          oldTable[i]=null;
        }
      }
 else {
        Object arr[]=(Object[])o;
        int localCount=0;
        for (int index=0; index < arr.length; index++) {
          Entry e=(Entry)arr[index];
          if (e != null && e.isValid()) {
            localCount++;
          }
 else {
            arr[index]=null;
          }
        }
        if (localCount == 0)         oldTable[i]=null;
 else         newCount+=localCount;
      }
    }
  }
  Object[] newTable=new Object[newCount + 1 < threshold ? oldCapacity : oldCapacity << 1];
  int sizeMask=newTable.length - 1;
  newCount=0;
  for (int i=0; i < oldCapacity; i++) {
    Object o=oldTable[i];
    if (o != null) {
      if (o instanceof Entry) {
        Entry e=(Entry)o;
        if (e.isValid()) {
          int index=e.getHash() & sizeMask;
          put(e,index,newTable);
          newCount++;
        }
      }
 else {
        Object arr[]=(Object[])o;
        for (int j=0; j < arr.length; j++) {
          Entry e=(Entry)arr[j];
          if (e != null && e.isValid()) {
            int index=e.getHash() & sizeMask;
            put(e,index,newTable);
            newCount++;
          }
        }
      }
    }
  }
  threshold=(int)(newTable.length * 0.75f);
  table=newTable;
  count=newCount;
}
