{
  if (useCanEqual)   createCanEqual(cNode);
  boolean hasExistingEquals=hasDeclaredMethod(cNode,"equals",1);
  if (hasExistingEquals && hasDeclaredMethod(cNode,"_equals",1))   return;
  final BlockStatement body=new BlockStatement();
  VariableExpression other=var("other");
  body.addStatement(ifS(equalsNullX(other),returnS(constX(Boolean.FALSE))));
  body.addStatement(ifS(identicalX(VariableExpression.THIS_EXPRESSION,other),returnS(constX(Boolean.TRUE))));
  if (useCanEqual) {
    body.addStatement(ifS(not(isInstanceOf(other,cNode)),returnS(constX(Boolean.FALSE))));
    body.addStatement(ifS(not(callX(other,"canEqual",var("this"))),returnS(constX(Boolean.FALSE))));
  }
 else {
    body.addStatement(ifS(not(hasClassX(other,cNode)),returnS(constX(Boolean.FALSE))));
  }
  VariableExpression otherTyped=var("otherTyped");
  body.addStatement(declS(otherTyped,new CastExpression(cNode,other)));
  List<PropertyNode> pList=getInstanceProperties(cNode);
  for (  PropertyNode pNode : pList) {
    if (shouldSkip(pNode.getName(),excludes,includes))     continue;
    body.addStatement(ifS(differentPropertyX(pNode,otherTyped),ifElseS(differentSelfRecursivePropertyX(pNode,otherTyped),returnS(constX(Boolean.FALSE)),ifS(not(bothSelfRecursivePropertyX(pNode,otherTyped)),ifS(nePropertyX(pNode,otherTyped),returnS(constX(Boolean.FALSE)))))));
  }
  List<FieldNode> fList=new ArrayList<FieldNode>();
  if (includeFields) {
    fList.addAll(getInstanceNonPropertyFields(cNode));
  }
  for (  FieldNode fNode : fList) {
    if (shouldSkip(fNode.getName(),excludes,includes))     continue;
    body.addStatement(ifS(differentFieldX(fNode,otherTyped),ifElseS(differentSelfRecursiveFieldX(fNode,otherTyped),returnS(constX(Boolean.FALSE)),ifS(not(bothSelfRecursiveFieldX(fNode,otherTyped)),ifS(neFieldX(otherTyped,fNode),returnS(constX(Boolean.FALSE)))))));
  }
  if (callSuper) {
    body.addStatement(ifS(not(isTrueX(callSuperX("equals",other))),returnS(constX(Boolean.FALSE))));
  }
  body.addStatement(returnS(constX(Boolean.TRUE)));
  cNode.addMethod(new MethodNode(hasExistingEquals ? "_equals" : "equals",hasExistingEquals ? ACC_PRIVATE : ACC_PUBLIC,ClassHelper.boolean_TYPE,params(param(OBJECT_TYPE,other.getName())),ClassNode.EMPTY_ARRAY,body));
}
