{
  boolean hasExistingEquals=hasDeclaredMethod(cNode,"equals",1);
  if (hasExistingEquals && hasDeclaredMethod(cNode,"_equals",1))   return;
  final BlockStatement body=new BlockStatement();
  Expression other=new VariableExpression("other");
  body.addStatement(returnFalseIfNull(other));
  body.addStatement(returnFalseIfWrongType(cNode,other));
  body.addStatement(returnTrueIfIdentical(VariableExpression.THIS_EXPRESSION,other));
  body.addStatement(new ExpressionStatement(new BinaryExpression(other,ASSIGN,new CastExpression(cNode,other))));
  List<FieldNode> list=getInstancePropertyFields(cNode);
  if (includeFields) {
    list.addAll(getInstanceNonPropertyFields(cNode));
  }
  for (  FieldNode fNode : list) {
    if (excludes.contains(fNode.getName()) || fNode.getName().contains("$"))     continue;
    body.addStatement(returnFalseIfPropertyNotEqual(fNode,other));
  }
  if (callSuper) {
    Statement result=new IfStatement(isTrueExpr(new MethodCallExpression(VariableExpression.SUPER_EXPRESSION,"equals",other)),new EmptyStatement(),new ReturnStatement(ConstantExpression.FALSE));
    body.addStatement(result);
  }
  body.addStatement(new ReturnStatement(ConstantExpression.TRUE));
  Parameter[] params={new Parameter(OBJECT_TYPE,"other")};
  cNode.addMethod(new MethodNode(hasExistingEquals ? "_equals" : "equals",hasExistingEquals ? ACC_PRIVATE : ACC_PUBLIC,ClassHelper.boolean_TYPE,params,ClassNode.EMPTY_ARRAY,body));
}
