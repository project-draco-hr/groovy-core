{
  if ("attributes".equals(name)) {
    return this.attributes;
  }
 else   if ("name".equals(name)) {
    return this.name;
  }
 else   if ("children".equals(name)) {
    return this.children;
  }
 else   if ("parent".equals(name)) {
    return this.parent;
  }
 else   if ("contents".equals(name)) {
    return new Buildable(){
      public void build(      GroovyObject builder){
        buildChildren(builder);
      }
    }
;
  }
 else   if ("text".equals(name)) {
    return text();
  }
 else   if ("getAt".equals(name) && ((Object[])args)[0] instanceof String) {
    return getProperty((String)((Object[])args)[0]);
  }
 else   if ("depthFirst".equals(name)) {
    return new GroovyObjectSupport(){
      public Object invokeMethod(      final String name,      final Object args){
        if ("getAt".equals(name) && ((Object[])args)[0] instanceof String) {
          return getProperty((String)((Object[])args)[0]);
        }
 else {
          return XmlList.this.invokeMethod(name,args);
        }
      }
      public Object getProperty(      final String property){
        if (property.startsWith("@")) {
          return XmlList.this.getProperty(property);
        }
 else {
          final List result=new LinkedList();
          depthFirstGetProperty(property,XmlList.this.children,result);
          return result;
        }
      }
      private void depthFirstGetProperty(      final String property,      final Object[] contents,      final List result){
        for (int i=0; i != contents.length; i++) {
          final Object item=contents[i];
          if (item instanceof XmlList) {
            if (((XmlList)item).name.equals(property)) {
              result.add(item);
            }
            depthFirstGetProperty(property,((XmlList)item).children,result);
          }
        }
      }
    }
;
  }
 else {
    return getMetaClass().invokeMethod(this,name,args);
  }
}
