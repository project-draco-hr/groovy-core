{
  if (receiver instanceof Integer) {
    if (args[0] instanceof Integer)     return new IntegerInteger(site,metaClass,metaMethod,params,receiver,args);
    if (args[0] instanceof Long)     return new IntegerLong(site,metaClass,metaMethod,params,receiver,args);
    if (args[0] instanceof Float)     return new IntegerFloat(site,metaClass,metaMethod,params,receiver,args);
    if (args[0] instanceof Double)     return new IntegerDouble(site,metaClass,metaMethod,params,receiver,args);
  }
  if (receiver instanceof Long) {
    if (args[0] instanceof Integer)     return new LongInteger(site,metaClass,metaMethod,params,receiver,args);
    if (args[0] instanceof Long)     return new LongLong(site,metaClass,metaMethod,params,receiver,args);
    if (args[0] instanceof Float)     return new LongFloat(site,metaClass,metaMethod,params,receiver,args);
    if (args[0] instanceof Double)     return new LongDouble(site,metaClass,metaMethod,params,receiver,args);
  }
  if (receiver instanceof Float) {
    if (args[0] instanceof Integer)     return new FloatInteger(site,metaClass,metaMethod,params,receiver,args);
    if (args[0] instanceof Long)     return new FloatLong(site,metaClass,metaMethod,params,receiver,args);
    if (args[0] instanceof Float)     return new FloatFloat(site,metaClass,metaMethod,params,receiver,args);
    if (args[0] instanceof Double)     return new FloatDouble(site,metaClass,metaMethod,params,receiver,args);
  }
  if (receiver instanceof Double) {
    if (args[0] instanceof Integer)     return new DoubleInteger(site,metaClass,metaMethod,params,receiver,args);
    if (args[0] instanceof Long)     return new DoubleLong(site,metaClass,metaMethod,params,receiver,args);
    if (args[0] instanceof Float)     return new DoubleFloat(site,metaClass,metaMethod,params,receiver,args);
    if (args[0] instanceof Double)     return new DoubleDouble(site,metaClass,metaMethod,params,receiver,args);
  }
  return new NumberNumberCallSite(site,metaClass,metaMethod,params,(Number)receiver,(Number)args[0]){
    public final Object invoke(    Object receiver,    Object[] args){
      return math.addImpl((Number)receiver,(Number)args[0]);
    }
    public final Object invoke(    Object receiver,    Object arg){
      return math.addImpl((Number)receiver,(Number)arg);
    }
  }
;
}
