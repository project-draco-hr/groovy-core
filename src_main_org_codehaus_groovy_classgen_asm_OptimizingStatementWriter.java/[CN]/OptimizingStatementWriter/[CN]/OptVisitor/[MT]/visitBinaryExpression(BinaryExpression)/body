{
  if (expression.getNodeMetaData(StatementMeta.class) != null)   return;
  super.visitBinaryExpression(expression);
  boolean leftInt=BinaryIntExpressionHelper.isIntOperand(expression.getLeftExpression(),node);
  boolean rightInt=BinaryIntExpressionHelper.isIntOperand(expression.getRightExpression(),node);
  boolean optimizeThisExpression=leftInt && rightInt;
  ClassNode type=null;
  optimizeInt=optimizeInt || optimizeThisExpression;
  if (optimizeThisExpression) {
switch (expression.getOperation().getType()) {
case Types.DIVIDE:
case Types.POWER:
case Types.MULTIPLY:
case Types.PLUS_PLUS:
case Types.MINUS_MINUS:
      optimizeInt=false;
    break;
case Types.COMPARE_EQUAL:
case Types.COMPARE_LESS_THAN:
case Types.COMPARE_LESS_THAN_EQUAL:
case Types.COMPARE_GREATER_THAN:
case Types.COMPARE_GREATER_THAN_EQUAL:
case Types.COMPARE_NOT_EQUAL:
case Types.LOGICAL_AND:
case Types.LOGICAL_OR:
  expression.setType(ClassHelper.boolean_TYPE);
break;
case Types.BITWISE_AND:
case Types.BITWISE_OR:
case Types.BITWISE_XOR:
expression.setType(ClassHelper.int_TYPE);
break;
default :
}
type=ClassHelper.int_TYPE;
}
 else if (rightInt && expression.getOperation().getType() == Types.LEFT_SQUARE_BRACKET) {
ClassNode ltype=BinaryIntExpressionHelper.getType(expression.getLeftExpression(),node);
if (ltype != null && ltype.getComponentType() == ClassHelper.int_TYPE) {
optimizeInt=true;
optimizeThisExpression=true;
type=ClassHelper.int_TYPE;
}
}
if (optimizeThisExpression) {
StatementMeta meta=addMeta(expression);
meta.type=type;
}
}
