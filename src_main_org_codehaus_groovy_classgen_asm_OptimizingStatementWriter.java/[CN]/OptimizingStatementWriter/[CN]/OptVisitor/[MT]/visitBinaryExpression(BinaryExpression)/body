{
  if (expression.getNodeMetaData(StatementMeta.class) != null)   return;
  super.visitBinaryExpression(expression);
  boolean leftInt=BinaryIntExpressionHelper.isIntOperand(expression.getLeftExpression());
  boolean rightInt=BinaryIntExpressionHelper.isIntOperand(expression.getRightExpression());
  if (!optimizeInt) {
    optimizeInt=(leftInt || rightInt) && expression.getOperation().getType() != Types.DIVIDE && expression.getOperation().getType() != Types.POWER && expression.getOperation().getType() != Types.MULTIPLY && expression.getOperation().getType() != Types.PLUS_PLUS && expression.getOperation().getType() != Types.MINUS_MINUS;
  }
  if (optimizeInt) {
    StatementMeta meta=addMeta(expression);
    if (leftInt && rightInt)     meta.type=ClassHelper.int_TYPE;
  }
}
