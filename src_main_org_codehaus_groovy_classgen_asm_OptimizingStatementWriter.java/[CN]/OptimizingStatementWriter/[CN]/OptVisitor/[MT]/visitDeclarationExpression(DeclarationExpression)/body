{
  Expression right=expression.getRightExpression();
  right.visit(this);
  ClassNode leftType=typeChooser.resolveType(expression.getLeftExpression(),node);
  ClassNode rightType=typeChooser.resolveType(expression.getRightExpression(),node);
  if (isPrimitiveType(leftType) && isPrimitiveType(rightType)) {
    if (right instanceof ConstantExpression) {
      opt.chainCanOptimize(true);
    }
 else {
      opt.chainShouldOptimize(true);
    }
    StatementMeta meta=addMeta(expression);
    ClassNode declarationType=typeChooser.resolveType(expression,node);
    meta.type=declarationType != null ? declarationType : leftType;
    opt.chainInvolvedType(leftType);
    opt.chainInvolvedType(rightType);
  }
}
