{
  isSpecialConstructorCall=call.isSpecialCall();
  super.visitConstructorCallExpression(call);
  isSpecialConstructorCall=false;
  if (!call.isUsingAnonymousInnerClass())   return;
  pushState();
  InnerClassNode innerClass=(InnerClassNode)call.getType();
  innerClass.setVariableScope(currentScope);
  for (  MethodNode method : innerClass.getMethods()) {
    Parameter[] parameters=method.getParameters();
    if (parameters.length == 0)     parameters=null;
    ClosureExpression cl=new ClosureExpression(parameters,method.getCode());
    visitClosureExpression(cl);
  }
  for (  FieldNode field : innerClass.getFields()) {
    final Expression expression=field.getInitialExpression();
    if (expression != null) {
      expression.visit(this);
    }
  }
  for (  Statement statement : innerClass.getObjectInitializerStatements()) {
    statement.visit(this);
  }
  markClosureSharedVariables();
  popState();
}
