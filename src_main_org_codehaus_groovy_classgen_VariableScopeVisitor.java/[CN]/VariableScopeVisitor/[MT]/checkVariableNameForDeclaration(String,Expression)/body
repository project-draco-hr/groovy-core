{
  if ("super".equals(name) || "this".equals(name))   return null;
  VariableScope scope=currentScope;
  Variable var=new DynamicVariable(name,currentScope.isInStaticContext());
  Variable orig=var;
  boolean crossingStaticContext=false;
  while (true) {
    crossingStaticContext=crossingStaticContext || scope.isInStaticContext();
    Variable var1;
    var1=scope.getDeclaredVariable(var.getName());
    if (var1 != null) {
      var=var1;
      break;
    }
    var1=scope.getReferencedLocalVariable(var.getName());
    if (var1 != null) {
      var=var1;
      break;
    }
    var1=scope.getReferencedClassVariable(var.getName());
    if (var1 != null) {
      var=var1;
      break;
    }
    ClassNode classScope=scope.getClassScope();
    if (classScope != null) {
      Variable member=findClassMember(classScope,var.getName());
      if (member != null) {
        boolean staticScope=crossingStaticContext || isSpecialConstructorCall;
        boolean staticMember=member.isInStaticContext();
        if (!(staticScope && !staticMember))         var=member;
      }
      break;
    }
    scope=scope.getParent();
  }
  if (var == orig && crossingStaticContext) {
    var=new DynamicVariable(var.getName(),true);
  }
  VariableScope end=scope;
  scope=currentScope;
  while (scope != end) {
    if (end.isClassScope() || (end.isReferencedClassVariable(name) && end.getDeclaredVariable(name) == null)) {
      scope.putReferencedClassVariable(var);
    }
 else {
      scope.putReferencedLocalVariable(var);
    }
    scope=scope.getParent();
  }
  return var;
}
