{
  List<ConstructorNode> constructors=cNode.getDeclaredConstructors();
  if (constructors.size() > 1 && !force)   return;
  boolean foundEmpty=constructors.size() == 1 && constructors.get(0).getFirstStatement() == null;
  if (constructors.size() == 1 && !foundEmpty && !force)   return;
  if (foundEmpty)   constructors.remove(0);
  List<FieldNode> superList=new ArrayList<FieldNode>();
  if (includeSuperProperties) {
    superList.addAll(getSuperPropertyFields(cNode.getSuperClass()));
  }
  if (includeSuperFields) {
    superList.addAll(getSuperNonPropertyFields(cNode.getSuperClass()));
  }
  List<FieldNode> list=new ArrayList<FieldNode>();
  if (includeProperties) {
    list.addAll(getInstancePropertyFields(cNode));
  }
  if (includeFields) {
    list.addAll(getInstanceNonPropertyFields(cNode));
  }
  final List<Parameter> params=new ArrayList<Parameter>();
  final List<Expression> superParams=new ArrayList<Expression>();
  final BlockStatement body=new BlockStatement();
  for (  FieldNode fNode : superList) {
    String name=fNode.getName();
    if (shouldSkip(name,excludes,includes))     continue;
    params.add(createParam(fNode,name));
    if (callSuper) {
      superParams.add(varX(name));
    }
 else {
      body.addStatement(assignS(propX(varX("this"),name),varX(name)));
    }
  }
  if (callSuper) {
    body.addStatement(stmt(ctorX(ClassNode.SUPER,args(superParams))));
  }
  for (  FieldNode fNode : list) {
    String name=fNode.getName();
    if (shouldSkip(name,excludes,includes))     continue;
    params.add(createParam(fNode,name));
    body.addStatement(assignS(propX(varX("this"),name),varX(name)));
  }
  cNode.addConstructor(new ConstructorNode(ACC_PUBLIC,params.toArray(new Parameter[params.size()]),ClassNode.EMPTY_ARRAY,body));
  if (params.size() > 0) {
    ClassNode firstParam=params.get(0).getType();
    if (params.size() > 1 || firstParam.equals(ClassHelper.OBJECT_TYPE)) {
      if (firstParam.equals(ClassHelper.MAP_TYPE)) {
        addMapConstructors(cNode,true,"The class " + cNode.getName() + " was incorrectly initialized via the map constructor with null.");
      }
 else {
        ClassNode candidate=HMAP_TYPE;
        while (candidate != null) {
          if (candidate.equals(firstParam)) {
            addMapConstructors(cNode,true,"The class " + cNode.getName() + " was incorrectly initialized via the map constructor with null.");
            break;
          }
          candidate=candidate.getSuperClass();
        }
      }
    }
  }
}
