{
  if (visitor instanceof AsmClassGenerator) {
    AsmClassGenerator acg=(AsmClassGenerator)visitor;
    WriterController controller=acg.getController();
    if (type.equals(ClassHelper.boolean_TYPE)) {
      expression.visit(visitor);
      controller.getOperandStack().doGroovyCast(ClassHelper.boolean_TYPE);
      return;
    }
    if (type.equals(ClassHelper.Boolean_TYPE)) {
      expression.visit(visitor);
      MethodVisitor mv=controller.getMethodVisitor();
      mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Boolean","booleanValue","()Z");
      controller.getOperandStack().replace(ClassHelper.boolean_TYPE);
      return;
    }
    if (type.equals(ClassHelper.int_TYPE) || type.equals(ClassHelper.byte_TYPE) || type.equals(ClassHelper.short_TYPE)|| type.equals(ClassHelper.char_TYPE)) {
      expression.visit(visitor);
      return;
    }
 else     if (type.equals(ClassHelper.long_TYPE)) {
      expression.visit(visitor);
      MethodVisitor mv=controller.getMethodVisitor();
      mv.visitInsn(L2I);
      controller.getOperandStack().replace(ClassHelper.boolean_TYPE);
      return;
    }
 else     if (type.equals(ClassHelper.float_TYPE)) {
      expression.visit(visitor);
      MethodVisitor mv=controller.getMethodVisitor();
      mv.visitInsn(F2I);
      controller.getOperandStack().replace(ClassHelper.boolean_TYPE);
      return;
    }
 else     if (type.equals(ClassHelper.double_TYPE)) {
      expression.visit(visitor);
      MethodVisitor mv=controller.getMethodVisitor();
      mv.visitInsn(D2I);
      controller.getOperandStack().replace(ClassHelper.boolean_TYPE);
      return;
    }
    List<MethodNode> asBoolean=findDGMMethodsByNameAndArguments(type,"asBoolean",ClassNode.EMPTY_ARRAY);
    if (asBoolean.size() == 1) {
      MethodNode node=asBoolean.get(0);
      if (node instanceof ExtensionMethodNode) {
        MethodNode dgmNode=((ExtensionMethodNode)node).getExtensionMethodNode();
        ClassNode owner=dgmNode.getParameters()[0].getType();
        if (ClassHelper.OBJECT_TYPE.equals(owner)) {
          if (Modifier.isFinal(type.getModifiers()) || (type instanceof InnerClassNode && Modifier.isPrivate(type.getModifiers()) && !isExtended(type,type.getOuterClass().getInnerClasses()))) {
            CompareToNullExpression expr=new CompareToNullExpression(expression,false);
            expr.visit(acg);
            return;
          }
        }
      }
    }
    super.visit(visitor);
  }
 else {
    super.visit(visitor);
  }
}
