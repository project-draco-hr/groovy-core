{
  boolean isSuperClassAnInterface=superClass.isInterface();
  if (!isSuperClassAnInterface) {
    return superClass;
  }
  Class result=Object.class;
  Set<ClassNode> traits=new LinkedHashSet<ClassNode>();
  collectTraits(superClass,traits);
  if (interfaces != null) {
    for (    Class anInterface : interfaces) {
      collectTraits(anInterface,traits);
    }
  }
  if (!traits.isEmpty()) {
    String name=superClass.getName() + "$TraitAdapter";
    ClassNode cn=new ClassNode(name,ACC_PUBLIC | ACC_ABSTRACT,ClassHelper.OBJECT_TYPE,traits.toArray(new ClassNode[traits.size()]),null);
    CompilationUnit cu=new CompilationUnit(loader);
    cu.addClassNode(cn);
    cu.compile(Phases.CLASS_GENERATION);
    @SuppressWarnings("unchecked") List<GroovyClass> classes=(List<GroovyClass>)cu.getClasses();
    result=loader.defineClass(name,classes.get(0).getBytes());
  }
  return result;
}
