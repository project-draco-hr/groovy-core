{
  Set<String> interfacesSet=new LinkedHashSet<String>();
  if (interfaces != null)   Collections.addAll(interfacesSet,interfaces);
  for (  Class extraInterface : classList) {
    if (extraInterface.isInterface())     interfacesSet.add(BytecodeHelper.getClassInternalName(extraInterface));
  }
  final boolean addGroovyObjectSupport=!GroovyObject.class.isAssignableFrom(superClass);
  if (addGroovyObjectSupport)   interfacesSet.add("groovy/lang/GroovyObject");
  super.visit(V1_5,ACC_PUBLIC,proxyName,signature,BytecodeHelper.getClassInternalName(superClass),interfacesSet.toArray(new String[interfacesSet.size()]));
  visitMethod(ACC_PUBLIC,"<init>","()V",null,null);
  addDelegateFields();
  if (addGroovyObjectSupport) {
    createGroovyObjectSupport();
  }
  for (  Class clazz : classList) {
    visitClass(clazz);
  }
}
