{
  textEditor.setFont(StructuredSyntaxResources.EDITOR_FONT);
  setViewportView(new JPanel(new BorderLayout()){
{
      add(numbersPanel,BorderLayout.WEST);
      add(textEditor,BorderLayout.CENTER);
    }
  }
);
  textEditor.setDragEnabled(editable);
  getVerticalScrollBar().setUnitIncrement(10);
  initActions();
  DefaultStyledDocument doc=new DefaultStyledDocument();
  doc.setDocumentFilter(new GroovyFilter(doc));
  textEditor.setDocument(doc);
  doc.addDocumentListener(new DocumentListener(){
    public void insertUpdate(    DocumentEvent documentEvent){
      documentChangedSinceLastRepaint=true;
    }
    public void removeUpdate(    DocumentEvent documentEvent){
      documentChangedSinceLastRepaint=true;
    }
    public void changedUpdate(    DocumentEvent documentEvent){
      documentChangedSinceLastRepaint=true;
      int width=3 * Preferences.userNodeForPackage(Console.class).getInt("fontSize",12);
      numbersPanel.setPreferredSize(new Dimension(width,width));
    }
  }
);
  this.undoManager=new TextUndoManager();
  doc.addUndoableEditListener(undoManager);
  undoManager.addPropertyChangeListener(undoAction);
  undoManager.addPropertyChangeListener(redoAction);
  doc.addDocumentListener(undoAction);
  doc.addDocumentListener(redoAction);
  InputMap im=textEditor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
  KeyStroke ks=KeyStroke.getKeyStroke(KeyEvent.VK_Z,InputEvent.CTRL_MASK,false);
  im.put(ks,StructuredSyntaxResources.UNDO);
  ActionMap am=textEditor.getActionMap();
  am.put(StructuredSyntaxResources.UNDO,undoAction);
  ks=KeyStroke.getKeyStroke(KeyEvent.VK_Y,InputEvent.CTRL_MASK,false);
  im.put(ks,StructuredSyntaxResources.REDO);
  am.put(StructuredSyntaxResources.REDO,redoAction);
  ks=KeyStroke.getKeyStroke(KeyEvent.VK_P,InputEvent.CTRL_MASK,false);
  im.put(ks,StructuredSyntaxResources.PRINT);
  am.put(StructuredSyntaxResources.PRINT,printAction);
}
