{
  MetaMethod metaMethod=method;
  if (metaMethod instanceof NumberNumberMetaMethod) {
    if (LOG_ENABLED)     LOG.info("meta method is number method");
    catchException=false;
    if (IndyMath.chooseMathMethod(this,metaMethod)) {
      if (LOG_ENABLED)       LOG.info("indy math successfull");
      return;
    }
  }
  boolean isCategoryTypeMethod=metaMethod instanceof NewInstanceMetaMethod;
  if (LOG_ENABLED)   LOG.info("meta method is category type method: " + isCategoryTypeMethod);
  boolean isStaticCategoryTypeMethod=metaMethod instanceof NewStaticMetaMethod;
  if (LOG_ENABLED)   LOG.info("meta method is static category type method: " + isCategoryTypeMethod);
  if (metaMethod instanceof ReflectionMetaMethod) {
    if (LOG_ENABLED)     LOG.info("meta method is reflective method");
    ReflectionMetaMethod rmm=(ReflectionMetaMethod)metaMethod;
    metaMethod=rmm.getCachedMethod();
  }
  if (metaMethod instanceof CachedMethod) {
    if (LOG_ENABLED)     LOG.info("meta method is CachedMethod instance");
    CachedMethod cm=(CachedMethod)metaMethod;
    isVargs=cm.isVargsMethod();
    try {
      Method m=cm.getCachedMethod();
      handle=LOOKUP.unreflect(m);
      if (LOG_ENABLED)       LOG.info("successfully unreflected method");
      if (isStaticCategoryTypeMethod) {
        handle=MethodHandles.insertArguments(handle,0,new Object[]{null});
        handle=MethodHandles.dropArguments(handle,0,targetType.parameterType(0));
      }
 else       if (!isCategoryTypeMethod && isStatic(m)) {
        handle=MethodHandles.dropArguments(handle,0,Object.class);
      }
    }
 catch (    IllegalAccessException e) {
      throw new GroovyBugError(e);
    }
  }
 else   if (metaMethod instanceof MetaConstructor) {
    if (LOG_ENABLED)     LOG.info("meta method is MetaConstructor instance");
    MetaConstructor mc=(MetaConstructor)metaMethod;
    isVargs=mc.isVargsMethod();
    Constructor con=mc.getCachedConstrcutor().cachedConstructor;
    try {
      handle=LOOKUP.unreflectConstructor(con);
      if (LOG_ENABLED)       LOG.info("successfully unreflected constructor");
    }
 catch (    IllegalAccessException e) {
      throw new GroovyBugError(e);
    }
  }
 else   if (method != null) {
    if (LOG_ENABLED)     LOG.info("meta method is dgm helper");
    handle=META_METHOD_INVOKER;
    handle=handle.bindTo(method);
    if (spread) {
      args=originalArguments;
      skipSpreadCollector=true;
    }
 else {
      handle=handle.asCollector(Object[].class,targetType.parameterCount() - 1);
    }
    currentType=removeWrapper(targetType);
    if (LOG_ENABLED)     LOG.info("bound method name to META_METHOD_INVOKER");
  }
}
