{
  if (useMetaClass)   return;
  Class[] parameters=handle.type().parameterArray();
  if (currentType != null)   parameters=currentType.parameterArray();
  if (args.length != parameters.length) {
    throw new GroovyBugError("At this point argument array length and parameter array length should be the same");
  }
  for (int i=0; i < args.length; i++) {
    if (parameters[i] == Object.class)     continue;
    Object arg=args[i];
    if (arg == null)     continue;
    Class got=arg.getClass();
    if (got == parameters[i])     continue;
    Class wrappedPara=TypeHelper.getWrapperClass(parameters[i]);
    if (wrappedPara == got)     continue;
    if (parameters[i].isAssignableFrom(got))     continue;
    if (isPrimitiveOrWrapper(parameters[i]) && isPrimitiveOrWrapper(got))     continue;
    handle=TypeTransformers.addTransformer(handle,i,arg,wrappedPara);
    if (LOG_ENABLED)     LOG.info("added transformer at pos " + i + " for type "+ got+ " to type "+ wrappedPara);
  }
}
