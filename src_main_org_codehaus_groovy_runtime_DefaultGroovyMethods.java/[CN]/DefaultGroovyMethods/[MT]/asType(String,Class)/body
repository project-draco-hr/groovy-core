{
  if (c == List.class) {
    return toList(self);
  }
 else   if (c == BigDecimal.class) {
    return toBigDecimal(self);
  }
 else   if (c == BigInteger.class) {
    return toBigInteger(self);
  }
 else   if (c == Long.class || c == Long.TYPE) {
    return toLong(self);
  }
 else   if (c == Integer.class || c == Integer.TYPE) {
    return toInteger(self);
  }
 else   if (c == Short.class || c == Short.TYPE) {
    return toShort(self);
  }
 else   if (c == Byte.class || c == Byte.TYPE) {
    return Byte.valueOf(self.trim());
  }
 else   if (c == Character.class || c == Character.TYPE) {
    return toCharacter(self);
  }
 else   if (c == Double.class || c == Double.TYPE) {
    return toDouble(self);
  }
 else   if (c == Float.class || c == Float.TYPE) {
    return toFloat(self);
  }
 else   if (c == File.class) {
    return new File(self);
  }
 else   if (DefaultTypeTransformation.isEnumSubclass(c)) {
    return InvokerHelper.invokeMethod(c,"valueOf",new Object[]{self});
  }
  return asType((Object)self,c);
}
