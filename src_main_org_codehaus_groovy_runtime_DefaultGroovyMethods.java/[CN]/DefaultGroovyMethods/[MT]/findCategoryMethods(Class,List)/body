{
  ArrayList arr=new ArrayList(4);
  for (Iterator it=categoryClasses.iterator(); it.hasNext(); ) {
    Class categoryClass=(Class)it.next();
    CachedMethod[] methods=ReflectionCache.getCachedClass(categoryClass).getMethods();
    for (int i=0; i < methods.length; i++) {
      CachedMethod method=methods[i];
      final int mod=method.getModifiers();
      if (Modifier.isStatic(mod) && Modifier.isPublic(mod)) {
        CachedClass[] paramTypes=method.getParameterTypes();
        if (paramTypes.length == 0)         continue;
        NewInstanceMetaMethod metaMethod;
        if (paramTypes[0].isAssignableFrom(self)) {
          if (paramTypes[0].getTheClass() == self)           metaMethod=new NewInstanceMetaMethod(method);
 else           metaMethod=new NewInstanceMetaMethod(method){
            public CachedClass getDeclaringClass(){
              return ReflectionCache.getCachedClass(self);
            }
          }
;
          arr.add(metaMethod);
        }
 else {
          if (self.isAssignableFrom(paramTypes[0].getTheClass())) {
            metaMethod=new NewInstanceMetaMethod(method);
            arr.add(metaMethod);
          }
        }
      }
    }
  }
  return arr;
}
