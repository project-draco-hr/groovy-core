{
  if (col.getClass() == clazz) {
    return (T)col;
  }
  if (clazz == List.class) {
    return (T)asList(col);
  }
  if (clazz == Set.class) {
    if (col instanceof Set)     return (T)col;
    return (T)new LinkedHashSet(col);
  }
  if (clazz == SortedSet.class) {
    if (col instanceof SortedSet)     return (T)col;
    return (T)new TreeSet(col);
  }
  if (clazz == Queue.class) {
    if (col instanceof Queue)     return (T)col;
    return (T)new LinkedList(col);
  }
  if (clazz == Stack.class) {
    if (col instanceof Stack)     return (T)col;
    final Stack stack=new Stack();
    stack.addAll(col);
    return (T)stack;
  }
  if (clazz != String[].class && ReflectionCache.isArray(clazz)) {
    try {
      return (T)asArrayType(col,clazz);
    }
 catch (    GroovyCastException e) {
    }
  }
  Object[] args={col};
  try {
    return (T)InvokerHelper.invokeConstructorOf(clazz,args);
  }
 catch (  Exception e) {
  }
  if (Collection.class.isAssignableFrom(clazz)) {
    try {
      Collection result=(Collection)InvokerHelper.invokeConstructorOf(clazz,null);
      result.addAll(col);
      return (T)result;
    }
 catch (    Exception e) {
    }
  }
  return asType((Object)col,clazz);
}
