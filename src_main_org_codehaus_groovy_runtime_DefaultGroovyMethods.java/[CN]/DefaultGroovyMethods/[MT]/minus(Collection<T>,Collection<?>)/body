{
  Collection<T> ansCollection=createSimilarCollection(self);
  if (self.size() == 0)   return ansCollection;
  T head=self.iterator().next();
  boolean nlgnSort=sameType(new Collection[]{self,removeMe});
  Comparator<T> numberComparator=new NumberAwareComparator<T>();
  if (nlgnSort && (head instanceof Comparable)) {
    Set<T> answer;
    if (Number.class.isInstance(head)) {
      answer=new TreeSet<T>(numberComparator);
      answer.addAll(self);
      for (      T t : self) {
        if (Number.class.isInstance(t)) {
          for (          Object t2 : removeMe) {
            if (Number.class.isInstance(t2)) {
              if (numberComparator.compare(t,(T)t2) == 0)               answer.remove(t);
            }
          }
        }
 else {
          if (removeMe.contains(t))           answer.remove(t);
        }
      }
    }
 else {
      answer=new TreeSet<T>(numberComparator);
      answer.addAll(self);
      answer.removeAll(removeMe);
    }
    for (    T o : self) {
      if (answer.contains(o))       ansCollection.add(o);
    }
  }
 else {
    List<T> tmpAnswer=new LinkedList<T>(self);
    for (Iterator<T> iter=tmpAnswer.iterator(); iter.hasNext(); ) {
      T element=iter.next();
      boolean elementRemoved=false;
      for (Iterator<?> iterator=removeMe.iterator(); iterator.hasNext() && !elementRemoved; ) {
        Object elt=iterator.next();
        if (DefaultTypeTransformation.compareEqual(element,elt)) {
          iter.remove();
          elementRemoved=true;
        }
      }
    }
    ansCollection.addAll(tmpAnswer);
  }
  return ansCollection;
}
