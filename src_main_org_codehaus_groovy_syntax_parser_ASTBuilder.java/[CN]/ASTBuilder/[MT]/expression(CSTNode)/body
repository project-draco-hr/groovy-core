{
  Expression expression=null;
switch (expressionRoot.getToken().getType()) {
case (Token.COMPARE_EQUAL):
case (Token.COMPARE_NOT_EQUAL):
case (Token.COMPARE_IDENTICAL):
case (Token.COMPARE_LESS_THAN):
case (Token.COMPARE_LESS_THAN_EQUAL):
case (Token.COMPARE_GREATER_THAN):
case (Token.COMPARE_GREATER_THAN_EQUAL):
case (Token.PLUS):
case (Token.MINUS):
case (Token.DIVIDE):
case (Token.MULTIPLY):
case (Token.MOD):
case (Token.EQUAL):
{
      expression=binaryExpression(expressionRoot);
      break;
    }
case (Token.SINGLE_QUOTE_STRING):
case (Token.DOUBLE_QUOTE_STRING):
case (Token.INTEGER_NUMBER):
case (Token.FLOAT_NUMBER):
{
    expression=constantExpression(expressionRoot);
    break;
  }
}
return expression;
}
