{
  String resolution=(String)resolutions.get(name);
  if (resolution == NOT_RESOLVED) {
    return (safe ? name : null);
  }
 else   if (resolution != null) {
    return (String)resolution;
  }
  do {
    if (name.indexOf(".") >= 0) {
      resolution=name;
      break;
    }
    String scalar=name, postfix="";
    while (scalar.endsWith("[]")) {
      scalar=scalar.substring(0,scalar.length() - 2);
      postfix+="[]";
    }
    if (Types.ofType(Types.lookupKeyword(scalar),Types.PRIMITIVE_TYPE)) {
      resolution=name;
      break;
    }
    if (this.imports.containsKey(scalar)) {
      resolution=((String)this.imports.get(scalar)) + postfix;
      break;
    }
    if (packageName != null && packageName.length() > 0) {
      try {
        getClassLoader().loadClass(dot(packageName,scalar));
        resolution=dot(packageName,name);
        break;
      }
 catch (      Throwable e) {
      }
    }
    for (int i=0; i < DEFAULT_IMPORTS.length; i++) {
      try {
        String qualified=DEFAULT_IMPORTS[i] + scalar;
        getClassLoader().loadClass(qualified);
        resolution=qualified + postfix;
        break;
      }
 catch (      Throwable e) {
      }
    }
  }
 while (false);
  if (resolution == null) {
    resolutions.put(name,NOT_RESOLVED);
    return (safe ? name : null);
  }
 else {
    resolutions.put(name,resolution);
    return resolution;
  }
}
