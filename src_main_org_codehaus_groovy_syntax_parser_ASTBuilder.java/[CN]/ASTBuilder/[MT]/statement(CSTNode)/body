{
  Statement statement=null;
switch (reduction.getMeaning()) {
case Types.KEYWORD_ASSERT:
{
      statement=assertStatement(reduction);
      break;
    }
case Types.KEYWORD_BREAK:
{
    statement=breakStatement(reduction);
    break;
  }
case Types.KEYWORD_CONTINUE:
{
  statement=continueStatement(reduction);
  break;
}
case Types.KEYWORD_IF:
{
statement=ifStatement(reduction);
break;
}
case Types.KEYWORD_RETURN:
{
statement=returnStatement(reduction);
break;
}
case Types.KEYWORD_SWITCH:
{
statement=switchStatement(reduction);
break;
}
case Types.KEYWORD_SYNCHRONIZED:
{
statement=synchronizedStatement(reduction);
break;
}
case Types.KEYWORD_THROW:
{
statement=throwStatement(reduction);
break;
}
case Types.KEYWORD_TRY:
{
statement=tryStatement(reduction);
break;
}
case Types.KEYWORD_FOR:
{
statement=forStatement(reduction);
break;
}
case Types.KEYWORD_WHILE:
{
statement=whileStatement(reduction);
break;
}
case Types.KEYWORD_DO:
{
statement=doWhileStatement(reduction);
break;
}
case Types.SYNTH_BLOCK:
case Types.LEFT_CURLY_BRACE:
{
statement=statementBlock(reduction);
break;
}
case Types.SYNTH_LABEL:
{
statement=statement(reduction.get(1));
statement.setStatementLabel(identifier(reduction));
break;
}
case Types.SYNTH_CLOSURE:
default :
{
statement=expressionStatement(reduction);
break;
}
}
statement.setCSTNode(reduction);
return statement;
}
