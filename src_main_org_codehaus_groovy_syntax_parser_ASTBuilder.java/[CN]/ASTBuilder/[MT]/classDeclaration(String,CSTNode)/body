{
  int modifiers=modifiers(classRoot.getChild(0));
  String className=identifier(classRoot.getChild(1));
  String superClassName="java.lang.Object";
  if (matches(classRoot.getChild(2),Token.KEYWORD_EXTENDS)) {
    superClassName=resolvedQualifiedName(classRoot.getChild(2).getChild(0));
  }
 else {
    superClassName="java.lang.Object";
  }
  String[] interfaceNames=EMPTY_STRING_ARRAY;
  if (matches(classRoot.getChild(3),Token.KEYWORD_IMPLEMENTS)) {
    interfaceNames=resolvedQualifiedNames(classRoot.getChild(3).getChildren());
  }
  String fqClassName=null;
  if (packageName == null || packageName.trim().equals("")) {
    fqClassName=className;
  }
 else {
    fqClassName=packageName.trim() + "." + className;
  }
  ClassNode classNode=new ClassNode(fqClassName,modifiers,superClassName,interfaceNames);
  CSTNode[] bodyRoots=classRoot.getChild(4).getChildren();
  for (int i=0; i < bodyRoots.length; ++i) {
    if (matches(bodyRoots[i],Token.KEYWORD_PROPERTY)) {
      classNode.addProperty(propertyDeclaration(bodyRoots[i]));
    }
  }
  for (int i=0; i < bodyRoots.length; ++i) {
    if (matches(bodyRoots[i],Token.SYNTH_METHOD)) {
      classNode.addMethod(methodDeclaration(bodyRoots[i]));
    }
  }
  return classNode;
}
