{
  if (isGenericGetMethod(method) && genericGetMethod == null) {
    genericGetMethod=method;
  }
 else   if (MetaClassHelper.isGenericSetMethod(method) && genericSetMethod == null) {
    genericSetMethod=method;
  }
  if (propertyMissingGet == null && method.getName().equals(PROPERTY_MISSING)) {
    CachedClass[] parameterTypes=method.getParameterTypes();
    if (parameterTypes.length == 1) {
      propertyMissingGet=method;
    }
  }
  if (propertyMissingSet == null && method.getName().equals(PROPERTY_MISSING)) {
    CachedClass[] parameterTypes=method.getParameterTypes();
    if (parameterTypes.length == 2) {
      propertyMissingSet=method;
    }
  }
  if (method.getName().equals(METHOD_MISSING)) {
    CachedClass[] parameterTypes=method.getParameterTypes();
    if (parameterTypes.length == 2 && parameterTypes[0].getCachedClass() == String.class && parameterTypes[1].getCachedClass() == Object.class) {
      methodMissing=method;
    }
  }
  String name=method.getName();
  MetaMethodIndex.Entry e=getOrPutMethods(name,header);
  if (method.isStatic()) {
    e.staticMethods=addMethodToList(e.staticMethods,method);
  }
  e.methods=addMethodToList(e.methods,method);
}
