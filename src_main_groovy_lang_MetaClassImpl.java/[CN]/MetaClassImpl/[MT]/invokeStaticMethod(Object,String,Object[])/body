{
  checkInitalised();
  if (log.isLoggable(Level.FINER)) {
    MetaClassHelper.logMethodCall(object,methodName,arguments);
  }
  final Class sender=object instanceof Class ? (Class)object : object.getClass();
  if (sender != theClass) {
    MetaClass mc=registry.getMetaClass(sender);
    return mc.invokeStaticMethod(sender,methodName,arguments);
  }
  if (sender == Class.class) {
    return invokeMethod(object,methodName,arguments);
  }
  if (arguments == null)   arguments=EMPTY_ARGUMENTS;
  Class[] argClasses=MetaClassHelper.convertToTypeArray(arguments);
  Object[] originalArguments=(Object[])arguments.clone();
  unwrap(arguments);
  MetaMethod method=retrieveStaticMethod(methodName,argClasses);
  if (method != null) {
    return MetaClassHelper.doMethodInvoke(object,method,arguments);
  }
  Object prop=null;
  try {
    prop=getProperty(theClass,theClass,methodName,false,false);
  }
 catch (  MissingPropertyException mpe) {
  }
  if (prop instanceof Closure) {
    Closure closure=(Closure)prop;
    MetaClass delegateMetaClass=closure.getMetaClass();
    return delegateMetaClass.invokeMethod(closure.getClass(),closure,CLOSURE_DO_CALL_METHOD,originalArguments,false,false);
  }
  Class superClass=sender.getSuperclass();
  if (superClass != Object.class && superClass != null) {
    return invokeStaticMethod(sender.getSuperclass(),methodName,arguments);
  }
  return invokeStaticMissingMethod(sender,methodName,arguments);
}
