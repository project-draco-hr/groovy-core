{
  boolean isStatic=theClass != Class.class && object instanceof Class;
  if (isStatic && object != theClass) {
    MetaClass mc=registry.getMetaClass((Class)object);
    return mc.getProperty(sender,object,name,useSuper,false);
  }
  checkInitalised();
  if (!isStatic && this.isMap) {
    return ((Map)object).get(name);
  }
  MetaMethod method=null;
  Object[] arguments=EMPTY_ARGUMENTS;
  MetaProperty mp=getMetaProperty(sender,name,useSuper,isStatic);
  if (mp != null) {
    if (mp instanceof MetaBeanProperty) {
      MetaBeanProperty mbp=(MetaBeanProperty)mp;
      method=mbp.getGetter();
      mp=mbp.getField();
    }
  }
  if (!useSuper && !isStatic && GroovyCategorySupport.hasCategoryInAnyThread()) {
    String getterName="get" + MetaClassHelper.capitalize(name);
    MetaMethod categoryMethod=getCategoryMethodGetter(sender,getterName,false);
    if (categoryMethod != null)     method=categoryMethod;
  }
  if (method == null && mp != null) {
    return mp.getProperty(object);
  }
  if (method == null && !useSuper && !isStatic && GroovyCategorySupport.hasCategoryInAnyThread()) {
    method=getCategoryMethodGetter(sender,"get",true);
    if (method != null)     arguments=new Object[]{name};
  }
  if (method == null && genericGetMethod != null && !(!genericGetMethod.isStatic() && isStatic)) {
    arguments=new Object[]{name};
    method=genericGetMethod;
  }
  if (method == null) {
    if (theClass != Class.class && object instanceof Class) {
      MetaClass mc=registry.getMetaClass(Class.class);
      return mc.getProperty(Class.class,object,name,useSuper,false);
    }
 else     if (object instanceof Collection) {
      return DefaultGroovyMethods.getAt((Collection)object,name);
    }
 else     if (object instanceof Object[]) {
      return DefaultGroovyMethods.getAt(Arrays.asList((Object[])object),name);
    }
 else {
      MetaMethod addListenerMethod=(MetaMethod)listeners.get(name);
      if (addListenerMethod != null) {
        return null;
      }
    }
  }
 else {
    return MetaClassHelper.doMethodInvoke(object,method,arguments);
  }
  if (isStatic || object instanceof Class)   return invokeStaticMissingProperty(object,name,null,true);
 else   return invokeMissingProperty(object,name,null,true);
}
