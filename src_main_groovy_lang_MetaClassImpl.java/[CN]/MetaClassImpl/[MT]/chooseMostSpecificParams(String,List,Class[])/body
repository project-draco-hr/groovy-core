{
  long matchesDistance=-1;
  LinkedList matches=new LinkedList();
  for (  Object method : matchingMethods) {
    ParameterTypes paramTypes=(ParameterTypes)method;
    long dist=MetaClassHelper.calculateParameterDistance(arguments,paramTypes);
    if (dist == 0)     return method;
    if (matches.size() == 0) {
      matches.add(method);
      matchesDistance=dist;
    }
 else     if (dist < matchesDistance) {
      matchesDistance=dist;
      matches.clear();
      matches.add(method);
    }
 else     if (dist == matchesDistance) {
      matches.add(method);
    }
  }
  if (matches.size() == 1) {
    return matches.getFirst();
  }
  if (matches.size() == 0) {
    return null;
  }
  StringBuilder msg=new StringBuilder("Ambiguous method overloading for method ");
  msg.append(theClass.getName()).append("#").append(name).append(".\nCannot resolve which method to invoke for ").append(InvokerHelper.toString(arguments)).append(" due to overlapping prototypes between:");
  for (  final Object matche : matches) {
    Class[] types=((ParameterTypes)matche).getNativeParameterTypes();
    msg.append("\n\t").append(InvokerHelper.toString(types));
  }
  throw new GroovyRuntimeException(msg.toString());
}
