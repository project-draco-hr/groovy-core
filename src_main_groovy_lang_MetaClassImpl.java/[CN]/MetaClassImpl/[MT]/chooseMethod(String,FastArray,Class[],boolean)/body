{
  int methodCount=methods.size();
  if (methodCount <= 0) {
    return null;
  }
 else   if (methodCount == 1) {
    Object method=methods.get(0);
    if (MetaClassHelper.isValidMethod(method,arguments,coerce)) {
      return method;
    }
    return null;
  }
  Object answer;
  if (arguments == null || arguments.length == 0) {
    answer=MetaClassHelper.chooseEmptyMethodParams(methods);
  }
 else   if (arguments.length == 1 && arguments[0] == null) {
    answer=MetaClassHelper.chooseMostGeneralMethodWith1NullParam(methods);
  }
 else {
    List matchingMethods=new ArrayList(methods.size());
    final int len=methods.size;
    Object data[]=methods.getArray();
    for (int i=0; i != len; ++i) {
      Object method=data[i];
      if (MetaClassHelper.isValidMethod(method,arguments,coerce)) {
        matchingMethods.add(method);
      }
    }
    if (matchingMethods.isEmpty()) {
      return null;
    }
 else     if (matchingMethods.size() == 1) {
      return matchingMethods.get(0);
    }
    return chooseMostSpecificParams(methodName,matchingMethods,arguments);
  }
  if (answer != null) {
    return answer;
  }
  throw new MethodSelectionException(methodName,methods,arguments);
}
