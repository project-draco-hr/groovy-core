{
  MethodIndexAction mia=new MethodIndexAction(){
    public List methodNameAction(    Class clazz,    String methodName,    List methods){
      boolean hasPrivate=false;
      for (Iterator iter=methods.iterator(); iter.hasNext(); ) {
        MetaMethod method=(MetaMethod)iter.next();
        if (method.isPrivate() && clazz == method.getDeclaringClass().cachedClass) {
          hasPrivate=true;
          break;
        }
      }
      if (!hasPrivate)       return null;
      methods.clear();
      methods.addAll((Collection)classMethodIndexForSuper.getNotNull(clazz).get(methodName));
      return methods;
    }
    public boolean replaceMethodList(){
      return false;
    }
  }
;
  mia.iterate(classMethodIndex);
}
