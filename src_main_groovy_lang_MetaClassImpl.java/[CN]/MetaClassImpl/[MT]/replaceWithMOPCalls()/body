{
  if (!GroovyObject.class.isAssignableFrom(theClass))   return;
  final Map mainClassMethodIndex=classMethodIndex.getNotNull(theCachedClass);
class MOPIter extends MethodIndexAction {
    boolean useThis;
    public boolean skipClass(    CachedClass clazz){
      return !useThis && clazz == theCachedClass;
    }
    public void methodListAction(    CachedClass clazz,    String methodName,    MetaMethod method,    List oldList,    List newList){
      String mopName=ReflectionCache.getMOPMethodName(ReflectionCache.getCachedClass(method.getDeclaringClass().cachedClass),methodName,useThis);
      List matches=(List)mainClassMethodIndex.get(mopName);
      if (matches == null) {
        newList.add(method);
        return;
      }
      matches=new ArrayList(matches);
      MetaMethod matchingMethod=removeMatchingMethod(matches,method);
      if (matchingMethod == null) {
        newList.add(method);
      }
 else {
        newList.add(matchingMethod);
      }
    }
  }
  MOPIter iter=new MOPIter();
  iter.useThis=false;
  iter.iterate(classMethodIndexForSuper);
  iter.useThis=true;
  iter.iterate(classMethodIndex);
}
