{
  if (!isGroovyObject)   return;
  final SingleKeyHashMap mainClassMethodIndex=classMethodIndex.getNotNull(theCachedClass);
class MOPIter extends MethodIndexAction {
    boolean useThis;
    public boolean skipClass(    CachedClass clazz){
      return !useThis && clazz == theCachedClass;
    }
    public void methodNameAction(    CachedClass clazz,    String methodName,    FastArray methods){
      final int len=methods.size();
      final Object[] data=methods.getArray();
      for (int i=0; i != len; ++i) {
        MetaMethod method=(MetaMethod)data[i];
        String mopName=ReflectionCache.getMOPMethodName(method.getDeclaringClass(),methodName,useThis);
        FastArray matches=(FastArray)mainClassMethodIndex.get(mopName);
        if (matches != null) {
          int matchingMethod=findMatchingMethod(matches,method);
          if (matchingMethod != -1) {
            methods.set(i,matches.get(matchingMethod));
          }
        }
      }
    }
  }
  MOPIter iter=new MOPIter();
  iter.useThis=false;
  iter.iterate(classMethodIndexForSuper);
  iter.useThis=true;
  iter.iterate(classMethodIndex);
}
