{
  if (!method.isPublic())   return false;
  if (method.getDeclaringClass().isInterface())   return true;
  List interfaceMethods=getInterfaceMethods();
  for (Iterator iter=interfaceMethods.iterator(); iter.hasNext(); ) {
    MetaMethod aMethod=(MetaMethod)iter.next();
    if (method.isSame(aMethod)) {
      method.setInterfaceClass(aMethod.getCallClass());
      return true;
    }
  }
  Class declaringClass=method.getCallClass();
  for (Class clazz=declaringClass; clazz != null; clazz=clazz.getSuperclass()) {
    try {
      final Class klazz=clazz;
      final String mName=method.getName();
      final Class[] parms=method.getParameterTypes();
      try {
        Method m=(Method)AccessController.doPrivileged(new PrivilegedExceptionAction(){
          public Object run() throws NoSuchMethodException {
            return klazz.getDeclaredMethod(mName,parms);
          }
        }
);
        if (!Modifier.isPublic(clazz.getModifiers()))         continue;
        if (!Modifier.isPublic(m.getModifiers()))         continue;
        declaringClass=clazz;
      }
 catch (      PrivilegedActionException pae) {
        if (pae.getException() instanceof NoSuchMethodException) {
          throw (NoSuchMethodException)pae.getException();
        }
 else {
          throw new RuntimeException(pae.getException());
        }
      }
    }
 catch (    SecurityException e) {
      continue;
    }
catch (    NoSuchMethodException e) {
      continue;
    }
  }
  if (!Modifier.isPublic(declaringClass.getModifiers()))   return false;
  method.setCallClass(declaringClass);
  return true;
}
