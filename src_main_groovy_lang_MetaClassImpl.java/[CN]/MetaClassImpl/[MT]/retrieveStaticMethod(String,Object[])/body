{
  final MetaMethodIndex.Entry e=metaMethodIndex.getMethods(theClass,methodName);
  MetaMethodIndex.CacheEntry cacheEntry;
  if (e != null) {
    cacheEntry=e.cachedStaticMethod;
    if (cacheEntry != null && (MetaClassHelper.sameClasses(cacheEntry.params,arguments,e.staticMethods instanceof MetaMethod))) {
      return cacheEntry.method;
    }
    cacheEntry=new MetaMethodIndex.CacheEntry();
    final Class[] classes=MetaClassHelper.convertToTypeArray(arguments);
    cacheEntry.params=classes;
    cacheEntry.method=pickStaticMethod(methodName,classes);
    e.cachedStaticMethod=cacheEntry;
    return cacheEntry.method;
  }
 else   return pickStaticMethod(methodName,MetaClassHelper.convertToTypeArray(arguments));
}
