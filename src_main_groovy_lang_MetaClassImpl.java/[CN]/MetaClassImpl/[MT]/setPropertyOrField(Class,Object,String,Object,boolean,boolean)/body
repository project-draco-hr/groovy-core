{
  checkInitalised();
  boolean isStatic=theClass != Class.class && object instanceof Class;
  if (isStatic && object != theClass) {
    MetaClass mc=registry.getMetaClass((Class)object);
    mc.setProperty(sender,object,name,newValue,useSuper,false);
    return;
  }
  MetaProperty mp=getMetaProperty(sender,name,useSuper,isStatic);
  if (newValue instanceof Wrapper)   newValue=((Wrapper)newValue).unwrap();
  if (mp != null) {
    if (mp instanceof MetaBeanProperty) {
      MetaBeanProperty mbp=(MetaBeanProperty)mp;
      if (forceFields || mbp.getSetter() == null) {
        mp=mbp.getField();
      }
    }
    if (mp != null) {
      mp.setProperty(object,newValue);
      return;
    }
  }
  if (forceFields)   throw new MissingFieldException(name,sender);
  MetaMethod addListenerMethod=(MetaMethod)listeners.get(name);
  MetaMethod method=null;
  Object[] arguments=null;
  if (addListenerMethod != null && addListenerMethod != AMBIGOUS_LISTENER_METHOD && newValue instanceof Closure) {
    Object proxy=MetaClassHelper.createListenerProxy(addListenerMethod.getParameterTypes()[0],name,(Closure)newValue);
    method=addListenerMethod;
    arguments=new Object[]{proxy};
  }
  if (method == null && !useSuper && !isStatic && GroovyCategorySupport.hasCategoryInAnyThread()) {
    List possibleGenericMethods=GroovyCategorySupport.getCategoryMethods(sender,"set");
    if (possibleGenericMethods != null) {
      for (Iterator iter=possibleGenericMethods.iterator(); iter.hasNext(); ) {
        MetaMethod mmethod=(MetaMethod)iter.next();
        Class[] paramTypes=mmethod.getParameterTypes();
        if (paramTypes.length == 2 && paramTypes[0] == String.class) {
          arguments=new Object[]{name,newValue};
          method=mmethod;
          break;
        }
      }
    }
  }
  if (method == null && genericSetMethod != null && !(!genericSetMethod.isStatic() && isStatic)) {
    arguments=new Object[]{name,newValue};
    method=genericSetMethod;
  }
  if (method == null) {
    String methodName="set" + MetaClassHelper.capitalize(name);
    try {
      invokeMethod(sender,object,methodName,new Object[]{newValue},useSuper,false);
      return;
    }
 catch (    MissingMethodException mme) {
    }
  }
 else {
    try {
      MetaClassHelper.doMethodInvoke(object,method,arguments);
      return;
    }
 catch (    ReadOnlyPropertyException rope) {
      throw rope;
    }
catch (    GroovyRuntimeException gre) {
      throw new MissingPropertyException("unable to invoke method to set property " + name + " in "+ sender+ ": "+ gre.getMessage(),name,sender);
    }
  }
  if (addListenerMethod == AMBIGOUS_LISTENER_METHOD) {
    throw new GroovyRuntimeException("There are multiple listeners for the property " + name + ". Please do not use the bean short form to access this listener.");
  }
  throw new MissingPropertyException(name,theClass);
}
