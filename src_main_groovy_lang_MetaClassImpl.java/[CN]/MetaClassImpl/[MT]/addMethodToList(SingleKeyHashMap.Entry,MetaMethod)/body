{
  if (e.value == null) {
    e.value=method;
    return;
  }
  if (e.value instanceof MetaMethod) {
    MetaMethod match=(MetaMethod)e.value;
    if (!isMatchingMethod(match,method)) {
      FastArray list=new FastArray(2);
      list.add(match);
      list.add(method);
      e.value=list;
    }
 else {
      if (match.isPrivate() || (match.getDeclaringClass().isInterface() && !method.getDeclaringClass().isInterface())) {
      }
 else {
        Class methodC=method.getDeclaringClass().getCachedClass();
        Class matchC=match.getDeclaringClass().getCachedClass();
        if (methodC == matchC) {
          if (method instanceof NewInstanceMetaMethod || method instanceof NewStaticMetaMethod || method instanceof ClosureMetaMethod|| method instanceof ClosureStaticMetaMethod) {
            e.value=method;
          }
        }
 else         if (!MetaClassHelper.isAssignableFrom(methodC,matchC)) {
          e.value=method;
        }
      }
    }
    return;
  }
  if (e.value instanceof FastArray) {
    FastArray list=(FastArray)e.value;
    int found=findMatchingMethod(list,method);
    if (found == -1) {
      list.add(method);
    }
 else {
      MetaMethod match=(MetaMethod)list.get(found);
      if (match.isPrivate() || (match.getDeclaringClass().isInterface() && !method.getDeclaringClass().isInterface())) {
      }
 else {
        Class methodC=method.getDeclaringClass().getCachedClass();
        Class matchC=match.getDeclaringClass().getCachedClass();
        if (methodC == matchC) {
          if (method instanceof NewInstanceMetaMethod || method instanceof NewStaticMetaMethod || method instanceof ClosureMetaMethod|| method instanceof ClosureStaticMetaMethod) {
            list.set(found,method);
          }
        }
 else         if (!MetaClassHelper.isAssignableFrom(methodC,matchC)) {
          list.set(found,method);
        }
      }
    }
  }
}
