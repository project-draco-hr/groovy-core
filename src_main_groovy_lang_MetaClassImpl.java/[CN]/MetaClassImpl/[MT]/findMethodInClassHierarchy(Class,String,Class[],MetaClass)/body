{
  if (metaClass instanceof MetaClassImpl) {
    boolean check=false;
    for (    ClassInfo ci : ((MetaClassImpl)metaClass).theCachedClass.getHierarchy()) {
      final MetaClass aClass=ci.getStrongMetaClass();
      if (aClass instanceof MutableMetaClass && ((MutableMetaClass)aClass).isModified()) {
        check=true;
        break;
      }
    }
    if (!check)     return null;
  }
  MetaMethod method=null;
  Class superClass;
  if (metaClass.getTheClass().isArray() && !metaClass.getTheClass().getComponentType().isPrimitive() && metaClass.getTheClass().getComponentType() != Object.class) {
    superClass=Object[].class;
  }
 else {
    superClass=metaClass.getTheClass().getSuperclass();
  }
  if (superClass != null) {
    MetaClass superMetaClass=GroovySystem.getMetaClassRegistry().getMetaClass(superClass);
    method=findMethodInClassHierarchy(instanceKlazz,methodName,arguments,superMetaClass);
  }
 else {
    if (metaClass.getTheClass().isInterface()) {
      MetaClass superMetaClass=GroovySystem.getMetaClassRegistry().getMetaClass(Object.class);
      method=findMethodInClassHierarchy(instanceKlazz,methodName,arguments,superMetaClass);
    }
  }
  method=findSubClassMethod(instanceKlazz,methodName,arguments,metaClass,method);
  MetaMethod infMethod=searchInterfacesForMetaMethod(instanceKlazz,methodName,arguments,metaClass);
  if (infMethod != null) {
    if (method == null)     method=infMethod;
 else     method=mostSpecific(method,infMethod,instanceKlazz);
  }
  method=findOwnMethod(instanceKlazz,methodName,arguments,metaClass,method);
  return method;
}
