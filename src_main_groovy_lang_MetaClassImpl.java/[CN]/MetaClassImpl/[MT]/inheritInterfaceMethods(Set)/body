{
  List methods=((MetaClassRegistryImpl)registry).getInstanceMethods();
  for (Iterator iter=methods.iterator(); iter.hasNext(); ) {
    CachedMethod element=(CachedMethod)iter.next();
    CachedClass dgmClass=element.getParameterTypes()[0];
    if (!interfaces.contains(dgmClass))     continue;
    NewInstanceMetaMethod method=NewInstanceMetaMethod.createNewInstanceMetaMethod(element);
    if (!newGroovyMethodsList.contains(method)) {
      newGroovyMethodsList.add(method);
    }
    SingleKeyHashMap methodIndex=classMethodIndex.getNotNull(theCachedClass);
    SingleKeyHashMap.Entry e=(SingleKeyHashMap.Entry)methodIndex.getOrPut(method.getName());
    if (e.value == null) {
      final ArrayList list=new ArrayList();
      e.value=list;
      list.add(method);
    }
 else {
      addMethodToList((ArrayList)e.value,method);
    }
  }
  methods=((MetaClassRegistryImpl)registry).getStaticMethods();
  for (Iterator iter=methods.iterator(); iter.hasNext(); ) {
    CachedMethod element=(CachedMethod)iter.next();
    CachedClass dgmClass=element.getParameterTypes()[0];
    if (!interfaces.contains(dgmClass))     continue;
    addNewStaticMethod(element.cachedMethod);
  }
}
