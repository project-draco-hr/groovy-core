{
  MetaMethodIndex.CacheEntry cacheEntry;
  if (e.methodsForSuper == null)   return null;
  cacheEntry=e.cachedMethodForSuper;
  if (cacheEntry != null && MetaClassHelper.sameClasses(cacheEntry.params,arguments,e.methodsForSuper instanceof MetaMethod)) {
    MetaMethod method=cacheEntry.method;
    if (method != null)     return method;
  }
  final Class[] classes=MetaClassHelper.convertToTypeArray(arguments);
  MetaMethod method=(MetaMethod)chooseMethod(e.name,e.methodsForSuper,classes);
  cacheEntry=new MetaMethodIndex.CacheEntry(classes,method.isAbstract() ? null : method);
  e.cachedMethodForSuper=cacheEntry;
  return cacheEntry.method;
}
