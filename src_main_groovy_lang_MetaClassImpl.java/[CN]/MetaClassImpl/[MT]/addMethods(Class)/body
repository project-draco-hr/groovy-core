{
  classMethodIndex.getNotNull(aClass);
  CachedMethod[] cachedMethods=ReflectionCache.getDeclaredMethodsCached(aClass);
  for (int i=0; i < cachedMethods.length; i++) {
    final CachedMethod cachedMethod=cachedMethods[i];
    Method reflectionMethod=cachedMethod.cachedMethod;
    if (reflectionMethod.getName().indexOf('+') >= 0) {
      continue;
    }
    MetaMethod method=createMetaMethod(reflectionMethod,cachedMethod.getParameterTypes());
    addMetaMethod(method);
  }
  List methods=((MetaClassRegistryImpl)registry).getInstanceMethods();
  for (Iterator iter=methods.iterator(); iter.hasNext(); ) {
    CachedMethod element=(CachedMethod)iter.next();
    if (element.getParameterTypes()[0].cachedClass != aClass)     continue;
    addNewInstanceMethod(element.cachedMethod,element.getParameterTypes());
  }
  methods=((MetaClassRegistryImpl)registry).getStaticMethods();
  for (Iterator iter=methods.iterator(); iter.hasNext(); ) {
    CachedMethod element=(CachedMethod)iter.next();
    if (element.getParameterTypes()[0].cachedClass != aClass)     continue;
    addNewStaticMethod(element.cachedMethod,element.getParameterTypes());
  }
}
