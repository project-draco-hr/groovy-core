{
  if (theCachedClass.isInterface) {
    LinkedList superClasses=new LinkedList();
    superClasses.add(ReflectionCache.OBJECT_CLASS);
    Set interfaces=theCachedClass.getInterfaces();
    classPropertyIndexForSuper=classPropertyIndex;
    final Map cPI=classPropertyIndex.getNotNull(theCachedClass);
    for (Iterator interfaceIter=interfaces.iterator(); interfaceIter.hasNext(); ) {
      CachedClass iclass=(CachedClass)interfaceIter.next();
      Map iPropertyIndex=cPI;
      addFields(iclass,iPropertyIndex);
      classPropertyIndex.put(iclass,iPropertyIndex);
    }
    classPropertyIndex.put(ReflectionCache.OBJECT_CLASS,cPI);
    applyPropertyDescriptors(propertyDescriptors);
    applyStrayPropertyMethods(superClasses,classMethodIndex,classPropertyIndex);
    makeStaticPropertyIndex();
  }
 else {
    LinkedList superClasses=getSuperClasses();
    Set interfaces=theCachedClass.getInterfaces();
    if (theCachedClass.isArray) {
      Map map=new HashMap();
      map.put("length",arrayLengthProperty);
      classPropertyIndex.put(theCachedClass,map);
    }
    inheritStaticInterfaceFields(superClasses,interfaces);
    inheritFields(superClasses);
    applyPropertyDescriptors(propertyDescriptors);
    applyStrayPropertyMethods(superClasses,classMethodIndex,classPropertyIndex);
    applyStrayPropertyMethods(superClasses,classMethodIndexForSuper,classPropertyIndexForSuper);
    copyClassPropertyIndexForSuper(classPropertyIndexForSuper);
    makeStaticPropertyIndex();
  }
}
