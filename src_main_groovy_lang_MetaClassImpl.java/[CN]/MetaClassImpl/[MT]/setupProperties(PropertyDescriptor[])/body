{
  if (theCachedClass.isInterface) {
    LinkedList<CachedClass> superClasses=new LinkedList<CachedClass>();
    superClasses.add(ReflectionCache.OBJECT_CLASS);
    Set interfaces=theCachedClass.getInterfaces();
    LinkedList<CachedClass> superInterfaces=new LinkedList<CachedClass>(interfaces);
    Collections.sort(superInterfaces,CACHED_CLASS_NAME_COMPARATOR);
    superInterfaces.remove(theCachedClass);
    classPropertyIndexForSuper=classPropertyIndex;
    final SingleKeyHashMap cPI=classPropertyIndex.getNotNull(theCachedClass);
    for (Iterator interfaceIter=interfaces.iterator(); interfaceIter.hasNext(); ) {
      CachedClass iclass=(CachedClass)interfaceIter.next();
      SingleKeyHashMap iPropertyIndex=cPI;
      inheritStaticInterfaceFields(superInterfaces,interfaces);
      classPropertyIndex.put(iclass,iPropertyIndex);
    }
    classPropertyIndex.put(ReflectionCache.OBJECT_CLASS,cPI);
    applyPropertyDescriptors(propertyDescriptors);
    applyStrayPropertyMethods(superClasses,classPropertyIndex,true);
    makeStaticPropertyIndex();
  }
 else {
    LinkedList<CachedClass> superClasses=getSuperClasses();
    LinkedList<CachedClass> interfaces=new LinkedList<CachedClass>(theCachedClass.getInterfaces());
    Collections.sort(interfaces,CACHED_CLASS_NAME_COMPARATOR);
    if (theCachedClass.isArray) {
      SingleKeyHashMap map=new SingleKeyHashMap();
      map.put("length",arrayLengthProperty);
      classPropertyIndex.put(theCachedClass,map);
    }
    inheritStaticInterfaceFields(superClasses,new LinkedHashSet(interfaces));
    inheritFields(superClasses);
    applyPropertyDescriptors(propertyDescriptors);
    applyStrayPropertyMethods(superClasses,classPropertyIndex,true);
    applyStrayPropertyMethods(superClasses,classPropertyIndexForSuper,false);
    copyClassPropertyIndexForSuper(classPropertyIndexForSuper);
    makeStaticPropertyIndex();
  }
}
