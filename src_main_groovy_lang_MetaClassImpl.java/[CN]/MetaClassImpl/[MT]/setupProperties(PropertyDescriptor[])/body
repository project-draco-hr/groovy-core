{
  if (theClass.isInterface()) {
    LinkedList superClasses=new LinkedList();
    superClasses.add(ReflectionCache.OBJECT_CLASS);
    Set interfaces=theCachedClass.getInterfaces();
    classPropertyIndexForSuper=classPropertyIndex;
    for (Iterator interfaceIter=interfaces.iterator(); interfaceIter.hasNext(); ) {
      CachedClass iclass=(CachedClass)interfaceIter.next();
      Map iPropertyIndex=classPropertyIndex.getNotNull(theClass);
      addFields(iclass.cachedClass,iPropertyIndex);
      classPropertyIndex.put(iclass.cachedClass,iPropertyIndex);
    }
    classPropertyIndex.put(Object.class,classPropertyIndex.getNotNull(theClass));
    applyPropertyDescriptors(propertyDescriptors);
    applyStrayPropertyMethods(superClasses,classMethodIndex,classPropertyIndex);
    makeStaticPropertyIndex();
  }
 else {
    LinkedList superClasses=getSuperClasses();
    Set interfaces=theCachedClass.getInterfaces();
    if (theClass.isArray()) {
      Map map=new HashMap();
      map.put("length",arrayLengthProperty);
      classPropertyIndex.put(theClass,map);
    }
    inheritStaticInterfaceFields(superClasses,interfaces);
    inheritFields(superClasses);
    applyPropertyDescriptors(propertyDescriptors);
    applyStrayPropertyMethods(superClasses,classMethodIndex,classPropertyIndex);
    applyStrayPropertyMethods(superClasses,classMethodIndexForSuper,classPropertyIndexForSuper);
    copyClassPropertyIndexForSuper(classPropertyIndexForSuper);
    makeStaticPropertyIndex();
  }
}
