{
  SingleKeyHashMap methodIndex;
  final CachedClass aClass=ReflectionCache.getCachedClass(sender);
  if (isCallToSuper) {
    methodIndex=classMethodIndexForSuper.getNullable(aClass);
  }
 else {
    methodIndex=classMethodIndex.getNullable(aClass);
  }
  FastArray answer;
  if (methodIndex != null) {
    answer=(FastArray)methodIndex.get(name);
    if (answer == null)     answer=FastArray.EMPTY_LIST;
  }
 else {
    answer=FastArray.EMPTY_LIST;
  }
  if (!isCallToSuper && GroovyCategorySupport.hasCategoryInAnyThread()) {
    List used=GroovyCategorySupport.getCategoryMethods(sender,name);
    if (used != null) {
      answer=(FastArray)answer.copy();
      for (Iterator iter=used.iterator(); iter.hasNext(); ) {
        MetaMethod element=(MetaMethod)iter.next();
        final int found=findMatchingMethod(answer,element);
        if (found != -1)         answer.set(found,element);
 else         answer.add(element);
      }
    }
  }
  return answer;
}
