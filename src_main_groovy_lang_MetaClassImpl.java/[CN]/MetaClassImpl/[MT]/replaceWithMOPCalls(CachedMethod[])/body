{
  if (!isGroovyObject)   return;
class MOPIter extends MethodIndexAction {
    boolean useThis;
    public boolean skipClass(    CachedClass clazz){
      return !useThis && clazz == theCachedClass;
    }
    public void methodNameAction(    Class clazz,    MetaMethodIndex.Entry e){
      if (useThis) {
        if (e.methods == null)         return;
        if (e.methods instanceof FastArray) {
          FastArray methods=(FastArray)e.methods;
          processFastArray(methods);
        }
 else {
          MetaMethod method=(MetaMethod)e.methods;
          if (method instanceof NewMetaMethod)           return;
          if (useThis ^ (method.getModifiers() & (Modifier.PUBLIC | Modifier.PROTECTED)) == 0)           return;
          String mopName=method.getMopName();
          int index=Arrays.binarySearch(mopMethods,mopName,CachedClass.CachedMethodComparatorWithString.INSTANCE);
          if (index >= 0) {
            int from=index;
            while (from > 0 && mopMethods[from - 1].getName().equals(mopName))             from--;
            int to=index;
            while (to < mopMethods.length - 1 && mopMethods[to + 1].getName().equals(mopName))             to++;
            int matchingMethod=findMatchingMethod(mopMethods,from,to,method);
            if (matchingMethod != -1) {
              e.methods=mopMethods[matchingMethod].getReflectionMetaMethod();
            }
          }
        }
      }
 else {
        if (e.methodsForSuper == null)         return;
        if (e.methodsForSuper instanceof FastArray) {
          FastArray methods=(FastArray)e.methodsForSuper;
          processFastArray(methods);
        }
 else {
          MetaMethod method=(MetaMethod)e.methodsForSuper;
          if (method instanceof NewMetaMethod)           return;
          if (useThis ^ (method.getModifiers() & (Modifier.PUBLIC | Modifier.PROTECTED)) == 0)           return;
          String mopName=method.getMopName();
          int index=Arrays.binarySearch(mopMethods,mopName,CachedClass.CachedMethodComparatorWithString.INSTANCE);
          if (index >= 0) {
            int from=index;
            while (from > 0 && mopMethods[from - 1].getName().equals(mopName))             from--;
            int to=index;
            while (to < mopMethods.length - 1 && mopMethods[to + 1].getName().equals(mopName))             to++;
            int matchingMethod=findMatchingMethod(mopMethods,from,to,method);
            if (matchingMethod != -1) {
              e.methodsForSuper=mopMethods[matchingMethod].getReflectionMetaMethod();
            }
          }
        }
      }
    }
    private void processFastArray(    FastArray methods){
      final int len=methods.size();
      final Object[] data=methods.getArray();
      for (int i=0; i != len; ++i) {
        MetaMethod method=(MetaMethod)data[i];
        if (method instanceof NewMetaMethod)         continue;
        if (useThis ^ (method.getModifiers() & (Modifier.PUBLIC | Modifier.PROTECTED)) == 0)         continue;
        String mopName=method.getMopName();
        int index=Arrays.binarySearch(mopMethods,mopName,CachedClass.CachedMethodComparatorWithString.INSTANCE);
        if (index >= 0) {
          int from=index;
          while (from > 0 && mopMethods[from - 1].getName().equals(mopName))           from--;
          int to=index;
          while (to < mopMethods.length - 1 && mopMethods[to + 1].getName().equals(mopName))           to++;
          int matchingMethod=findMatchingMethod(mopMethods,from,to,method);
          if (matchingMethod != -1) {
            methods.set(i,mopMethods[matchingMethod].getReflectionMetaMethod());
          }
        }
      }
    }
  }
  MOPIter iter=new MOPIter();
  iter.useThis=false;
  iter.iterate();
  iter.useThis=true;
  iter.iterate();
}
