{
  if (log.isLoggable(Level.FINER)) {
    MetaClassHelper.logMethodCall(constructor.getDeclaringClass(),constructor.getName(),argumentArray);
  }
  try {
    final boolean accessible=MetaClassHelper.accessibleToConstructor(at,constructor);
    final Constructor ctor=constructor;
    AccessController.doPrivileged(new PrivilegedAction(){
      public Object run(){
        ctor.setAccessible(accessible);
        return null;
      }
    }
);
    return constructor.newInstance(argumentArray);
  }
 catch (  InvocationTargetException e) {
    throw new InvokerInvocationException(e);
  }
catch (  IllegalArgumentException e) {
    if (MetaClassHelper.coerceGStrings(argumentArray)) {
      try {
        return constructor.newInstance(argumentArray);
      }
 catch (      Exception e2) {
      }
    }
    throw new GroovyRuntimeException("failed to invoke constructor: " + constructor + " with arguments: "+ InvokerHelper.toString(argumentArray)+ " reason: "+ e);
  }
catch (  IllegalAccessException e) {
    throw new GroovyRuntimeException("could not access constructor: " + constructor + " with arguments: "+ InvokerHelper.toString(argumentArray)+ " reason: "+ e);
  }
catch (  Exception e) {
    throw new GroovyRuntimeException("failed to invoke constructor: " + constructor + " with arguments: "+ InvokerHelper.toString(argumentArray)+ " reason: "+ e,e);
  }
}
