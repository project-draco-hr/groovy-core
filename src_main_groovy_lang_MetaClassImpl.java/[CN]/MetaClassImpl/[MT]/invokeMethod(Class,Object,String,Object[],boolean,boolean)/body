{
  checkInitalised();
  if (object == null) {
    throw new NullPointerException("Cannot invoke method: " + methodName + " on null object");
  }
  if (log.isLoggable(Level.FINER)) {
    MetaClassHelper.logMethodCall(object,methodName,originalArguments);
  }
  Object[] arguments=originalArguments;
  if (arguments == null)   arguments=EMPTY_ARGUMENTS;
  Class[] argClasses=MetaClassHelper.convertToTypeArray(arguments);
  unwrap(arguments);
  MetaMethod method=getMethodWithCaching(sender,methodName,argClasses,isCallToSuper);
  if (method == null && arguments.length == 1 && arguments[0] instanceof List) {
    Object[] newArguments=((List)arguments[0]).toArray();
    Class[] newArgClasses=MetaClassHelper.convertToTypeArray(newArguments);
    method=getMethodWithCaching(sender,methodName,newArgClasses,isCallToSuper);
    if (method != null) {
      MethodKey methodKey=new DefaultMethodKey(sender,methodName,argClasses,isCallToSuper);
      method=new TransformMetaMethod(method){
        public Object invoke(        Object object,        Object[] arguments){
          Object firstArgument=arguments[0];
          List list=(List)firstArgument;
          arguments=list.toArray();
          return super.invoke(object,arguments);
        }
      }
;
      cacheInstanceMethod(methodKey,method);
      return invokeMethod(sender,object,methodName,originalArguments,isCallToSuper,fromInsideClass);
    }
  }
  boolean isClosure=object instanceof Closure;
  if (isClosure) {
    Closure closure=(Closure)object;
    Object delegate=closure.getDelegate();
    Object owner=closure.getOwner();
    if ("call".equals(methodName) || "doCall".equals(methodName)) {
      if (object.getClass() == MethodClosure.class) {
        MethodClosure mc=(MethodClosure)object;
        methodName=mc.getMethod();
        Class ownerClass=owner.getClass();
        if (owner instanceof Class)         ownerClass=(Class)owner;
        MetaClass ownerMetaClass=registry.getMetaClass(ownerClass);
        return ownerMetaClass.invokeMethod(ownerClass,owner,methodName,arguments,false,false);
      }
 else       if (object.getClass() == CurriedClosure.class) {
        CurriedClosure cc=(CurriedClosure)object;
        arguments=cc.getUncurriedArguments(arguments);
        Class ownerClass=owner.getClass();
        if (owner instanceof Class)         ownerClass=(Class)owner;
        MetaClass ownerMetaClass=registry.getMetaClass(ownerClass);
        return ownerMetaClass.invokeMethod(owner,methodName,arguments);
      }
    }
 else     if ("curry".equals(methodName)) {
      return closure.curry(arguments);
    }
    if (method == null && owner != closure) {
      Class ownerClass=owner.getClass();
      if (owner instanceof Class)       ownerClass=(Class)owner;
      MetaClass ownerMetaClass=registry.getMetaClass(ownerClass);
      method=ownerMetaClass.pickMethod(methodName,argClasses);
      if (method != null)       return ownerMetaClass.invokeMethod(owner,methodName,originalArguments);
    }
    if (method == null && delegate != closure && delegate != null) {
      Class delegateClass=delegate.getClass();
      if (delegate instanceof Class)       delegateClass=(Class)delegate;
      MetaClass delegateMetaClass=registry.getMetaClass(delegateClass);
      method=delegateMetaClass.pickMethod(methodName,argClasses);
      if (method != null)       return delegateMetaClass.invokeMethod(delegate,methodName,originalArguments);
    }
    if (method == null) {
      MissingMethodException last=null;
      if (owner != closure && (owner instanceof GroovyObject)) {
        try {
          GroovyObject go=(GroovyObject)owner;
          return go.invokeMethod(methodName,originalArguments);
        }
 catch (        MissingMethodException mme) {
          if (last == null)           last=mme;
        }
      }
      if (delegate != closure && (delegate instanceof GroovyObject)) {
        try {
          GroovyObject go=(GroovyObject)delegate;
          return go.invokeMethod(methodName,originalArguments);
        }
 catch (        MissingMethodException mme) {
          last=mme;
        }
      }
      if (last != null)       throw last;
    }
  }
  if (method != null) {
    return MetaClassHelper.doMethodInvoke(object,method,arguments);
  }
 else {
    try {
      Object value=this.getProperty(object,methodName);
      if (value instanceof Closure) {
        Closure closure=(Closure)value;
        MetaClass delegateMetaClass=closure.getMetaClass();
        return delegateMetaClass.invokeMethod(closure.getClass(),closure,"doCall",originalArguments,false,fromInsideClass);
      }
    }
 catch (    MissingPropertyException mpe) {
    }
    throw new MissingMethodException(methodName,theClass,originalArguments,false);
  }
}
