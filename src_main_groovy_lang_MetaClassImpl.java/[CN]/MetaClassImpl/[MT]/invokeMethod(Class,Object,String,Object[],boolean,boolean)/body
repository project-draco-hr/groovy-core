{
  checkInitalised();
  if (object == null) {
    throw new NullPointerException("Cannot invoke method: " + methodName + " on null object");
  }
  String correctedMethodName=methodName;
  if (object instanceof GeneratedClosure && CLOSURE_CALL_METHOD.equals(methodName)) {
    correctedMethodName=CLOSURE_DO_CALL_METHOD;
  }
  final Object[] arguments=originalArguments == null ? EMPTY_ARGUMENTS : originalArguments;
  MetaMethod method=getMethodWithCaching(sender,correctedMethodName,arguments,isCallToSuper);
  MetaClassHelper.unwrap(arguments);
  if (method == null)   method=tryListParamMetaMethod(sender,correctedMethodName,isCallToSuper,arguments);
  final boolean isClosure=object instanceof Closure;
  if (isClosure) {
    final Closure closure=(Closure)object;
    final Object owner=closure.getOwner();
    if (CLOSURE_DO_CALL_METHOD.equals(methodName) || CLOSURE_CALL_METHOD.equals(methodName)) {
      final Class objectClass=object.getClass();
      if (objectClass == MethodClosure.class) {
        final MethodClosure mc=(MethodClosure)object;
        methodName=mc.getMethod();
        final Class ownerClass=owner instanceof Class ? (Class)owner : owner.getClass();
        final MetaClass ownerMetaClass=registry.getMetaClass(ownerClass);
        return ownerMetaClass.invokeMethod(ownerClass,owner,methodName,arguments,false,false);
      }
 else       if (objectClass == CurriedClosure.class) {
        final CurriedClosure cc=(CurriedClosure)object;
        final Object[] curriedArguments=cc.getUncurriedArguments(arguments);
        final Class ownerClass=owner instanceof Class ? (Class)owner : owner.getClass();
        final MetaClass ownerMetaClass=registry.getMetaClass(ownerClass);
        return ownerMetaClass.invokeMethod(owner,methodName,curriedArguments);
      }
      if (method == null)       invokeMissingMethod(object,methodName,arguments);
    }
    final Object delegate=closure.getDelegate();
    final boolean isClosureNotOwner=owner != closure;
    final int resolveStrategy=closure.getResolveStrategy();
    final Class[] argClasses=MetaClassHelper.convertToTypeArray(arguments);
switch (resolveStrategy) {
case Closure.TO_SELF:
      method=closure.getMetaClass().pickMethod(methodName,argClasses);
    if (method != null)     return method.invoke(closure,arguments);
  break;
case Closure.DELEGATE_ONLY:
if (method == null && delegate != closure && delegate != null) {
  MetaClass delegateMetaClass=lookupObjectMetaClass(delegate);
  method=delegateMetaClass.pickMethod(methodName,argClasses);
  if (method != null)   return delegateMetaClass.invokeMethod(delegate,methodName,originalArguments);
 else   if (delegate != closure && (delegate instanceof GroovyObject)) {
    return invokeMethodOnGroovyObject(methodName,originalArguments,delegate);
  }
}
break;
case Closure.OWNER_ONLY:
if (method == null && owner != closure) {
MetaClass ownerMetaClass=lookupObjectMetaClass(owner);
return ownerMetaClass.invokeMethod(owner,methodName,originalArguments);
}
break;
case Closure.DELEGATE_FIRST:
if (method == null && delegate != closure && delegate != null) {
MetaClass delegateMetaClass=lookupObjectMetaClass(delegate);
method=delegateMetaClass.pickMethod(methodName,argClasses);
if (method != null) return delegateMetaClass.invokeMethod(delegate,methodName,originalArguments);
}
if (method == null && owner != closure) {
MetaClass ownerMetaClass=lookupObjectMetaClass(owner);
method=ownerMetaClass.pickMethod(methodName,argClasses);
if (method != null) return ownerMetaClass.invokeMethod(owner,methodName,originalArguments);
}
if (method == null && resolveStrategy != Closure.TO_SELF) {
MissingMethodException last=null;
if (delegate != closure && (delegate instanceof GroovyObject)) {
try {
return invokeMethodOnGroovyObject(methodName,originalArguments,delegate);
}
 catch (MissingMethodException mme) {
if (last == null) last=mme;
}
}
if (isClosureNotOwner && (owner instanceof GroovyObject)) {
try {
return invokeMethodOnGroovyObject(methodName,originalArguments,owner);
}
 catch (MissingMethodException mme) {
last=mme;
}
}
if (last != null) return invokeMissingMethod(object,methodName,originalArguments,last,isCallToSuper);
}
break;
default :
if (method == null && owner != closure) {
MetaClass ownerMetaClass=lookupObjectMetaClass(owner);
method=ownerMetaClass.pickMethod(methodName,argClasses);
if (method != null) return ownerMetaClass.invokeMethod(owner,methodName,originalArguments);
}
if (method == null && delegate != closure && delegate != null) {
MetaClass delegateMetaClass=lookupObjectMetaClass(delegate);
method=delegateMetaClass.pickMethod(methodName,argClasses);
if (method != null) return delegateMetaClass.invokeMethod(delegate,methodName,originalArguments);
}
if (method == null && resolveStrategy != Closure.TO_SELF) {
MissingMethodException last=null;
if (isClosureNotOwner && (owner instanceof GroovyObject)) {
try {
return invokeMethodOnGroovyObject(methodName,originalArguments,owner);
}
 catch (MissingMethodException mme) {
if (methodName.equals(mme.getMethod())) {
if (last == null) last=mme;
}
 else {
throw mme;
}
}
catch (InvokerInvocationException iie) {
if (iie.getCause() instanceof MissingMethodException) {
MissingMethodException mme=(MissingMethodException)iie.getCause();
if (methodName.equals(mme.getMethod())) {
if (last == null) last=mme;
}
 else {
throw iie;
}
}
 else throw iie;
}
}
if (delegate != closure && (delegate instanceof GroovyObject)) {
try {
return invokeMethodOnGroovyObject(methodName,originalArguments,delegate);
}
 catch (MissingMethodException mme) {
last=mme;
}
catch (InvokerInvocationException iie) {
if (iie.getCause() instanceof MissingMethodException) {
last=(MissingMethodException)iie.getCause();
}
 else throw iie;
}
}
if (last != null) return invokeMissingMethod(object,methodName,originalArguments,last,isCallToSuper);
}
}
}
if (method != null) {
return method.doMethodInvoke(object,arguments);
}
 else {
return invokePropertyOrMissing(object,methodName,originalArguments,fromInsideClass,isCallToSuper);
}
}
