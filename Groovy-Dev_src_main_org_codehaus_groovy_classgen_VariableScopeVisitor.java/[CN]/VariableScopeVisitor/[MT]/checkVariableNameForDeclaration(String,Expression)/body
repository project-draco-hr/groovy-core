{
  if ("super".equals(name) || "this".equals(name))   return null;
  VariableScope scope=currentScope;
  Variable var=new DynamicVariable(name,currentScope.isInStaticContext());
  Variable dummyStart=var;
  VariableScope dynamicScope=null;
  while (!scope.isRoot()) {
    if (dynamicScope == null && scope.isResolvingDynamic()) {
      dynamicScope=scope;
    }
    Variable var1;
    var1=scope.getDeclaredVariable(var.getName());
    if (var1 != null) {
      var=var1;
      break;
    }
    var1=(Variable)scope.getReferencedLocalVariable(var.getName());
    if (var1 != null) {
      var=var1;
      break;
    }
    var1=scope.getReferencedClassVariable(var.getName());
    if (var1 != null) {
      var=var1;
      break;
    }
    ClassNode classScope=scope.getClassScope();
    if (classScope != null) {
      Variable member=findClassMember(classScope,var.getName());
      if (member != null) {
        boolean cc=currentScope.isInStaticContext() || isSpecialConstructorCall;
        boolean cm=member.isInStaticContext();
        if (cm || cm == cc)         var=member;
      }
      break;
    }
    scope=scope.getParent();
  }
  VariableScope end=scope;
  if (scope.isRoot() && dynamicScope == null) {
    declare(var,expression);
    addError("The variable " + var.getName() + " is undefined in the current scope",expression);
  }
 else   if (scope.isRoot() && dynamicScope != null) {
    scope=dynamicScope;
  }
  if (!scope.isRoot()) {
    scope=currentScope;
    while (scope != end) {
      Map references=null;
      if (end.isClassScope() || end.isRoot() || (end.isReferencedClassVariable(name) && end.getDeclaredVariable(name) == null)) {
        scope.putReferencedClassVariable(var);
      }
 else {
        var.setClosureSharedVariable(var.isClosureSharedVariable() || inClosure);
        scope.putReferencedLocalVariable(var);
      }
      scope=scope.getParent();
    }
    if (end.isResolvingDynamic()) {
      if (end.getDeclaredVariable(var.getName()) == null) {
        end.putDeclaredVariable(var);
      }
    }
  }
  return var;
}
