{
  if (classNode == null || ClassHelper.OBJECT_TYPE.equals(classNode))   return;
  if (!collector.collect(classNode))   return;
  ClassNode classNodeRedirect=classNode.redirect();
  GenericsType[] redirectGenericTypes=classNodeRedirect.getGenericsTypes();
  ClassNode[] unresolvedInterfaces=classNode.getUnresolvedInterfaces();
  GenericsType[] parameterizedTypes=classNode.getGenericsTypes();
  if (parameterizedTypes == null)   parameterizedTypes=EMPTY_GENERICS_ARRAY;
  for (  ClassNode unresolvedInterface : unresolvedInterfaces) {
    if (unresolvedInterface.isUsingGenerics()) {
      ClassNode copy=ClassHelper.makeWithoutCaching(unresolvedInterface.getTypeClass(),false);
      GenericsType[] generics=alignGenericTypes(redirectGenericTypes,parameterizedTypes,unresolvedInterface.getGenericsTypes());
      copy.setGenericsTypes(generics);
      collectParameterizedClassInfo(copy,collector);
    }
  }
  ClassNode superClass=classNode.getUnresolvedSuperClass();
  if (superClass != null) {
    if (superClass.isUsingGenerics()) {
      if (redirectGenericTypes != null) {
        ClassNode copy=ClassHelper.makeWithoutCaching(superClass.getTypeClass(),false);
        GenericsType[] generics=alignGenericTypes(redirectGenericTypes,parameterizedTypes,superClass.getGenericsTypes());
        copy.setGenericsTypes(generics);
        copy.setGenericsPlaceHolder(true);
        collectParameterizedClassInfo(copy,collector);
      }
 else {
        collectParameterizedClassInfo(superClass,collector);
      }
    }
 else {
      collectParameterizedClassInfo(superClass,collector);
    }
  }
}
