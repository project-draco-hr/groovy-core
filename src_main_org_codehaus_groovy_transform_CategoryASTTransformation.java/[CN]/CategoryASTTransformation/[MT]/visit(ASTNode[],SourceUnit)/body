{
  if (nodes.length != 2 || !(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof ClassNode)) {
    throw new RuntimeException("Internal error: expecting [AnnotationNode, ClassNode] but got: " + Arrays.asList(nodes));
  }
  AnnotationNode annotation=(AnnotationNode)nodes[0];
  ClassNode parent=(ClassNode)nodes[1];
  ClassNode targetClass=getTargetClass(source,annotation);
  final LinkedList<Set<String>> varStack=new LinkedList<Set<String>>();
  Set<String> names=new HashSet<String>();
  for (  FieldNode field : parent.getFields()) {
    names.add(field.getName());
  }
  varStack.add(names);
  final Reference parameter=new Reference();
  final ClassCodeExpressionTransformer expressionTransformer=new ClassCodeExpressionTransformer(){
    protected SourceUnit getSourceUnit(){
      return source;
    }
    private void addVariablesToStack(    Parameter[] params){
      Set<String> names=new HashSet<String>();
      names.addAll(varStack.getLast());
      for (      Parameter param : params) {
        names.add(param.getName());
      }
      varStack.add(names);
    }
    public void visitMethod(    MethodNode node){
      addVariablesToStack(node.getParameters());
      super.visitMethod(node);
      varStack.removeLast();
    }
    public void visitBlockStatement(    BlockStatement block){
      Set<String> names=new HashSet<String>();
      names.addAll(varStack.getLast());
      varStack.add(names);
      super.visitBlockStatement(block);
      varStack.remove(names);
    }
    public void visitDeclarationExpression(    DeclarationExpression expression){
      varStack.getLast().add(expression.getVariableExpression().getName());
      super.visitDeclarationExpression(expression);
    }
    public void visitForLoop(    ForStatement forLoop){
      Expression exp=forLoop.getCollectionExpression();
      exp.visit(this);
      Parameter loopParam=forLoop.getVariable();
      if (loopParam != null) {
        varStack.getLast().add(loopParam.getName());
      }
      super.visitForLoop(forLoop);
    }
    public void visitExpressionStatement(    ExpressionStatement es){
      Expression exp=es.getExpression();
      if (exp instanceof DeclarationExpression) {
        exp.visit(this);
      }
      super.visitExpressionStatement(es);
    }
    public Expression transform(    Expression exp){
      if (exp instanceof VariableExpression) {
        VariableExpression ve=(VariableExpression)exp;
        if (ve.getName().equals("this"))         return THIS_EXPRESSION;
 else {
          if (!varStack.getLast().contains(ve.getName())) {
            return new PropertyExpression(THIS_EXPRESSION,ve.getName());
          }
        }
      }
 else       if (exp instanceof PropertyExpression) {
        PropertyExpression pe=(PropertyExpression)exp;
        if (pe.getObjectExpression() instanceof VariableExpression) {
          VariableExpression vex=(VariableExpression)pe.getObjectExpression();
          if (vex.isThisExpression()) {
            pe.setObjectExpression(THIS_EXPRESSION);
            return pe;
          }
        }
      }
 else       if (exp instanceof ClosureExpression) {
        ClosureExpression ce=(ClosureExpression)exp;
        ce.getVariableScope().putReferencedLocalVariable((Parameter)parameter.get());
        Parameter[] params=ce.getParameters();
        if (params == null) {
          params=new Parameter[0];
        }
 else         if (params.length == 0) {
          params=new Parameter[]{new Parameter(ClassHelper.OBJECT_TYPE,"it")};
        }
        addVariablesToStack(params);
        ce.getCode().visit(this);
      }
      return super.transform(exp);
    }
  }
;
  for (  MethodNode method : parent.getMethods()) {
    if (!method.isStatic()) {
      method.setModifiers(method.getModifiers() | Opcodes.ACC_STATIC);
      final Parameter[] origParams=method.getParameters();
      final Parameter[] newParams=new Parameter[origParams.length + 1];
      Parameter p=new Parameter(targetClass,"$this");
      p.setClosureSharedVariable(true);
      newParams[0]=p;
      parameter.set(p);
      System.arraycopy(origParams,0,newParams,1,origParams.length);
      method.setParameters(newParams);
      expressionTransformer.visitMethod(method);
    }
  }
}
