{
  GroovyObject groovy=(GroovyObject)object;
  boolean intercepting=groovy instanceof GroovyInterceptable;
  try {
    if (intercepting) {
      return groovy.invokeMethod(methodName,asUnwrappedArray(arguments));
    }
    return groovy.getMetaClass().invokeMethod(object,methodName,asArray(arguments));
  }
 catch (  MissingMethodException e) {
    if (e instanceof MissingMethodExecutionFailed) {
      throw (MissingMethodException)e.getCause();
    }
 else     if (!intercepting && e.getMethod().equals(methodName) && object.getClass() == e.getType()) {
      return groovy.invokeMethod(methodName,asUnwrappedArray(arguments));
    }
 else {
      throw e;
    }
  }
}
