{
  final StringBuffer code=new StringBuffer();
  final Class returnType=method.getReturnType();
  if (returnType.isPrimitive()) {
    if (returnType == void.class) {
      makeCall(code).append(";\nreturn null;\n");
    }
 else     if (returnType == int.class) {
      code.append("return new Integer(");
      makeCall(code).append(");\n");
    }
 else     if (returnType == long.class) {
      code.append("return new Long(");
      makeCall(code).append(");\n");
    }
 else     if (returnType == short.class) {
      code.append("return new Short(");
      makeCall(code).append(");\n");
    }
 else     if (returnType == char.class) {
      code.append("return new Char(");
      makeCall(code).append(");\n");
    }
 else     if (returnType == byte.class) {
      code.append("return new Byte(");
      makeCall(code).append(");\n");
    }
 else     if (returnType == boolean.class) {
      code.append("return new Boolean(");
      makeCall(code).append(");\n");
    }
 else     if (returnType == float.class) {
      code.append("return new Float(");
      makeCall(code).append(");\n");
    }
 else     if (returnType == double.class) {
      code.append("return new Double(");
      makeCall(code).append(");\n");
    }
 else {
      code.append("**** ERROR ***** found primitive return type: " + returnType.getName());
    }
  }
 else {
    code.append("return ");
    makeCall(code).append(";\n");
  }
  return code.toString();
}
