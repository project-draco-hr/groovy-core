{
  DataOutputStream out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
  LinkedHashMap<String,Integer> classes=new LinkedHashMap<String,Integer>();
  int nextClassId=0;
  for (int i=0; i < primitiveClasses.length; i++) {
    classes.put(primitiveClasses[i].getName(),nextClassId++);
  }
  for (  DgmMethodRecord record : records) {
    String name=record.returnType.getName();
    Integer id=classes.get(name);
    if (id == null) {
      id=nextClassId++;
      classes.put(name,id);
    }
    for (int i=0; i < record.parameters.length; i++) {
      name=record.parameters[i].getName();
      id=classes.get(name);
      if (id == null) {
        id=nextClassId++;
        classes.put(name,id);
      }
    }
  }
  for (  Map.Entry<String,Integer> stringIntegerEntry : classes.entrySet()) {
    out.writeUTF(stringIntegerEntry.getKey());
    out.writeInt(stringIntegerEntry.getValue());
  }
  out.writeUTF("");
  out.writeInt(records.size());
  for (  DgmMethodRecord record : records) {
    out.writeUTF(record.className);
    out.writeUTF(record.methodName);
    out.writeInt(classes.get(record.returnType.getName()));
    out.writeInt(record.parameters.length);
    for (int i=0; i < record.parameters.length; i++) {
      Integer key=classes.get(record.parameters[i].getName());
      out.writeInt(key);
    }
  }
  out.close();
}
