{
  List<AnnotationNode> annotations=node.getAnnotations();
  if (annotations.isEmpty())   return;
  Map<String,AnnotationNode> tmpAnnotations=new HashMap<String,AnnotationNode>();
  ClassNode annType;
  for (  AnnotationNode an : annotations) {
    if (an.isBuiltIn())     continue;
    annType=an.getClassNode();
    resolveOrFail(annType,",  unable to find class for annotation",an);
    for (    Map.Entry<String,Expression> member : an.getMembers().entrySet()) {
      Expression newValue=transform(member.getValue());
      newValue=transformInlineConstants(newValue);
      member.setValue(newValue);
      checkAnnotationMemberValue(newValue);
    }
    if (annType.isResolved()) {
      Class annTypeClass=annType.getTypeClass();
      Retention retAnn=(Retention)annTypeClass.getAnnotation(Retention.class);
      if (retAnn != null && retAnn.value().equals(RetentionPolicy.RUNTIME)) {
        AnnotationNode anyPrevAnnNode=tmpAnnotations.put(annTypeClass.getName(),an);
        if (anyPrevAnnNode != null) {
          addError("Cannot specify duplicate annotation on the same member : " + annType.getName(),an);
        }
      }
    }
  }
}
