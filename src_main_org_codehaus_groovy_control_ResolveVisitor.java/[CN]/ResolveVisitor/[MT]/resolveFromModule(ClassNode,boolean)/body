{
  ModuleNode module=currentClass.getModule();
  if (module == null)   return false;
  String name=type.getName();
  if (!type.hasPackageName() && module.hasPackageName()) {
    type.setName(module.getPackageName() + name);
  }
  List moduleClasses=module.getClasses();
  for (Iterator iter=moduleClasses.iterator(); iter.hasNext(); ) {
    ClassNode mClass=(ClassNode)iter.next();
    if (mClass.getName().equals(type.getName())) {
      if (mClass != type)       type.setRedirect(mClass);
      return true;
    }
  }
  type.setName(name);
  if (resolveAliasFromModule(type))   return true;
  if (testModuleImports) {
    boolean resolved=false;
    if (module.hasPackageName()) {
      type.setName(module.getPackageName() + name);
      resolved=resolve(type,false,false,false);
    }
    List packages=module.getImportPackages();
    ClassNode iType=ClassHelper.makeWithoutCaching(name);
    for (Iterator iter=packages.iterator(); iter.hasNext(); ) {
      String packagePrefix=(String)iter.next();
      String fqn=packagePrefix + name;
      iType.setName(fqn);
      if (resolve(iType,false,false,true)) {
        ambigousClass(type,iType,name,resolved);
        return true;
      }
      iType.setName(name);
    }
    if (!resolved)     type.setName(name);
    return resolved;
  }
  return false;
}
