{
  if (expression.isImplicitThis())   return;
  String prop=expression.getPropertyAsString();
  if (prop == null)   return;
  if (!prop.equals("this") && !prop.equals("super"))   return;
  ClassNode type=expression.getObjectExpression().getType();
  if (expression.getObjectExpression() instanceof ClassExpression) {
    if (!(currentClass instanceof InnerClassNode) && !TraitConstants.isTrait(type)) {
      addError("The usage of 'Class.this' and 'Class.super' is only allowed in nested/inner classes.",expression);
      return;
    }
    if (!currentScope.isInStaticContext() && TraitConstants.isTrait(type) && "super".equals(prop)&& directlyImplementsTrait(type)) {
      return;
    }
    ClassNode iterType=currentClass;
    while (iterType != null) {
      if (iterType.equals(type))       break;
      iterType=iterType.getOuterClass();
    }
    if (iterType == null) {
      addError("The class '" + type.getName() + "' needs to be an outer class of '"+ currentClass.getName()+ "' when using '.this' or '.super'.",expression);
    }
    if ((currentClass.getModifiers() & Opcodes.ACC_STATIC) == 0)     return;
    if (!currentScope.isInStaticContext())     return;
    addError("The usage of 'Class.this' and 'Class.super' within static nested class '" + currentClass.getName() + "' is not allowed in a static context.",expression);
  }
}
