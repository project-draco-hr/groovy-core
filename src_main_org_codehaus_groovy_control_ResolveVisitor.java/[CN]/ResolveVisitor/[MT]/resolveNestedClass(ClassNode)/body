{
  Map<String,ClassNode> hierClasses=new LinkedHashMap<String,ClassNode>();
  for (ClassNode classToCheck=currentClass; classToCheck != ClassHelper.OBJECT_TYPE; classToCheck=classToCheck.getSuperClass()) {
    if (classToCheck == null || hierClasses.containsKey(classToCheck.getName()))     break;
    hierClasses.put(classToCheck.getName(),classToCheck);
  }
  if (resolveFromInnerClass(type,hierClasses.values())) {
    return true;
  }
  if (!(currentClass instanceof InnerClassNode))   return false;
  LinkedList<ClassNode> outerClasses=new LinkedList<ClassNode>();
  ClassNode outer=currentClass.getOuterClass();
  while (outer != null) {
    outerClasses.addFirst(outer);
    outer=outer.getOuterClass();
  }
  if (resolveFromInnerClass(type,outerClasses)) {
    return true;
  }
  return false;
}
