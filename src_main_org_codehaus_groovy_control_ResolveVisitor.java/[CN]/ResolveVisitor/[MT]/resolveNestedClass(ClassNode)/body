{
  Map<String,ClassNode> hierClasses=new LinkedHashMap<String,ClassNode>();
  ClassNode val;
  String name;
  for (ClassNode classToCheck=currentClass; classToCheck != ClassHelper.OBJECT_TYPE; classToCheck=classToCheck.getSuperClass()) {
    if (classToCheck == null || hierClasses.containsKey(classToCheck.getName()))     break;
    hierClasses.put(classToCheck.getName(),classToCheck);
  }
  for (  ClassNode classToCheck : hierClasses.values()) {
    name=classToCheck.getName() + "$" + type.getName();
    val=ClassHelper.make(name);
    if (resolveFromCompileUnit(val)) {
      type.setRedirect(val);
      return true;
    }
  }
  if (!(currentClass instanceof InnerClassNode))   return false;
  LinkedList<ClassNode> outerClasses=new LinkedList<ClassNode>();
  ClassNode outer=currentClass.getOuterClass();
  while (outer != null) {
    outerClasses.addFirst(outer);
    outer=outer.getOuterClass();
  }
  for (  ClassNode testNode : outerClasses) {
    name=testNode.getName() + "$" + type.getName();
    val=ClassHelper.make(name);
    if (resolveFromCompileUnit(val)) {
      type.setRedirect(val);
      return true;
    }
  }
  return false;
}
