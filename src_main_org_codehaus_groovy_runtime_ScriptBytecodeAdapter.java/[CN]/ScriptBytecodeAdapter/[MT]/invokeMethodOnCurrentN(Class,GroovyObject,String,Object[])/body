{
  Object result=null;
  boolean intercepting=receiver instanceof GroovyInterceptable;
  try {
    if (intercepting) {
      result=receiver.invokeMethod(messageName,messageArguments);
    }
 else {
      result=receiver.getMetaClass().invokeMethod(senderClass,receiver,messageName,messageArguments,false,true);
    }
  }
 catch (  MissingMethodException e) {
    if (!intercepting && receiver.getClass() == e.getType() && e.getMethod().equals(messageName)) {
      result=receiver.invokeMethod(messageName,messageArguments);
    }
 else {
      throw e;
    }
  }
  return result;
}
