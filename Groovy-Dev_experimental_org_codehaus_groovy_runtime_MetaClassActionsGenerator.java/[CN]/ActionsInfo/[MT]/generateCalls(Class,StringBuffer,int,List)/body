{
  if (generatorSubset.size() != 0) {
    code.append("if (args.length == ").append(currentArgsLength).append(") {\n");
    code.append("switch(name.charAt(0)) {");
    boolean firstCase=true;
    final Iterator iter1=generatorSubset.iterator();
    char fc=0;
    while (iter1.hasNext()) {
      final MethodGenerator generator1=(MethodGenerator)iter1.next();
      final String name=generator1.getName();
      if (fc != name.charAt(0)) {
        if (firstCase) {
          firstCase=false;
        }
 else {
          code.append(" else {\n");
          code.append("return groovy.lang.MetaClass.NO_METHOD_FOUND;\n");
          code.append("}");
        }
        fc=name.charAt(0);
        code.append("\ncase '").append(fc).append("' :\n");
        code.append("if (\"").append(generator1.getName()).append("\".equals(name)) {\n");
        code.append(generator1.generateCall(claz));
        code.append("}");
      }
 else {
        code.append(" else if (\"").append(generator1.getName()).append("\".equals(name)) {\n");
        code.append(generator1.generateCall(claz));
        code.append("}");
      }
    }
    code.append(" else {\n");
    code.append("return groovy.lang.MetaClass.NO_METHOD_FOUND;\n");
    code.append("}\n");
    code.append("default:\n");
    code.append("return groovy.lang.MetaClass.NO_METHOD_FOUND;\n");
    code.append("}\n");
    code.append("} else ");
    generatorSubset.clear();
  }
}
