{
  Expression leftExpression=expression.getLeftExpression();
  if (leftExpression instanceof BinaryExpression) {
    BinaryExpression leftBinExpr=(BinaryExpression)leftExpression;
    if (leftBinExpr.getOperation().getType() == Types.LEFT_SQUARE_BRACKET) {
      prepareCallSite("putAt");
      visitAndAutoboxBoolean(leftBinExpr.getLeftExpression());
      visitAndAutoboxBoolean(leftBinExpr.getRightExpression());
      visitAndAutoboxBoolean(expression.getRightExpression());
      final int resultVar=compileStack.defineTemporaryVariable("$result",true);
      mv.visitVarInsn(ALOAD,resultVar);
      mv.visitMethodInsn(INVOKEINTERFACE,"org/codehaus/groovy/runtime/callsite/CallSite","call","(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
      mv.visitInsn(POP);
      mv.visitVarInsn(ALOAD,resultVar);
      compileStack.removeVar(resultVar);
      return;
    }
  }
  Expression rightExpression=expression.getRightExpression();
  if (!(leftExpression instanceof TupleExpression)) {
    ClassNode type=null;
    if (expression instanceof DeclarationExpression) {
      type=leftExpression.getType();
    }
 else {
      type=getLHSType(leftExpression);
    }
    assignmentCastAndVisit(type,rightExpression);
  }
 else {
    visitAndAutoboxBoolean(rightExpression);
  }
  rightHandType=rightExpression.getType();
  leftHandExpression=true;
  if (leftExpression instanceof TupleExpression) {
    TupleExpression tuple=(TupleExpression)leftExpression;
    int i=0;
    Expression lhsExpr=new BytecodeExpression(){
      public void visit(      MethodVisitor mv){
        mv.visitInsn(SWAP);
        mv.visitInsn(DUP_X1);
      }
    }
;
    for (Iterator iterator=tuple.getExpressions().iterator(); iterator.hasNext(); ) {
      VariableExpression var=(VariableExpression)iterator.next();
      MethodCallExpression call=new MethodCallExpression(lhsExpr,"getAt",new ArgumentListExpression(new ConstantExpression(Integer.valueOf(i))));
      ClassNode type=getLHSType(var);
      assignmentCastAndVisit(type,call);
      i++;
      if (defineVariable) {
        compileStack.defineVariable(var,true);
      }
 else {
        visitVariableExpression(var);
      }
    }
  }
 else   if (defineVariable) {
    VariableExpression var=(VariableExpression)leftExpression;
    compileStack.defineVariable(var,true);
  }
 else {
    mv.visitInsn(DUP);
    leftExpression.visit(this);
  }
  rightHandType=null;
  leftHandExpression=false;
}
