{
  if (classNode.declaresInterface(ClassHelper.GENERATED_CLOSURE_Type.getName())) {
    addGeneratedClosureConstructorCall(call);
    return;
  }
  ClassNode callNode=classNode;
  if (call.isSuperCall())   callNode=callNode.getSuperClass();
  List constructors=sortConstructors(call,callNode);
  call.getArguments().visit(this);
  mv.visitInsn(DUP);
  helper.pushConstant(constructors.size());
  visitClassExpression(new ClassExpression(callNode));
  selectConstructorAndTransformArguments.call(mv);
  mv.visitInsn(DUP_X1);
  mv.visitInsn(ICONST_1);
  mv.visitInsn(IAND);
  Label afterIf=new Label();
  mv.visitJumpInsn(IFEQ,afterIf);
  mv.visitInsn(ICONST_0);
  mv.visitInsn(AALOAD);
  mv.visitTypeInsn(CHECKCAST,"[Ljava/lang/Object;");
  mv.visitLabel(afterIf);
  mv.visitInsn(SWAP);
  if (constructorNode != null) {
    mv.visitVarInsn(ALOAD,0);
  }
 else {
    mv.visitTypeInsn(NEW,BytecodeHelper.getClassInternalName(callNode));
  }
  mv.visitInsn(SWAP);
  mv.visitIntInsn(BIPUSH,8);
  mv.visitInsn(ISHR);
  Label[] targets=new Label[constructors.size()];
  int[] indices=new int[constructors.size()];
  for (int i=0; i < targets.length; i++) {
    targets[i]=new Label();
    indices[i]=i;
  }
  Label defaultLabel=new Label();
  Label afterSwitch=new Label();
  mv.visitLookupSwitchInsn(defaultLabel,indices,targets);
  for (int i=0; i < targets.length; i++) {
    mv.visitLabel(targets[i]);
    if (constructorNode != null) {
      mv.visitInsn(SWAP);
      mv.visitInsn(DUP_X1);
    }
 else {
      mv.visitInsn(DUP_X1);
      mv.visitInsn(DUP2_X1);
      mv.visitInsn(POP);
    }
    ConstructorNode cn=(ConstructorNode)constructors.get(i);
    String descriptor=helper.getMethodDescriptor(ClassHelper.VOID_TYPE,cn.getParameters());
    Parameter[] parameters=cn.getParameters();
    for (int p=0; p < parameters.length; p++) {
      mv.visitInsn(DUP);
      helper.pushConstant(p);
      mv.visitInsn(AALOAD);
      ClassNode type=parameters[p].getType();
      if (ClassHelper.isPrimitiveType(type)) {
        helper.unbox(type);
      }
 else {
        helper.doCast(type);
      }
      helper.swapWithObject(type);
    }
    mv.visitInsn(POP);
    mv.visitMethodInsn(INVOKESPECIAL,BytecodeHelper.getClassInternalName(callNode),"<init>",descriptor);
    mv.visitJumpInsn(GOTO,afterSwitch);
  }
  mv.visitLabel(defaultLabel);
  mv.visitTypeInsn(NEW,"java/lang/IllegalArgumentException");
  mv.visitInsn(DUP);
  mv.visitLdcInsn("illegal constructor number");
  mv.visitMethodInsn(INVOKESPECIAL,"java/lang/IllegalArgumentException","<init>","(Ljava/lang/String;)V");
  mv.visitInsn(ATHROW);
  mv.visitLabel(afterSwitch);
}
