{
  onLineNumber(call,"visitMethodCallExpression: \"" + call.getMethod() + "\":");
  this.leftHandExpression=false;
  Expression arguments=call.getArguments();
  boolean superMethodCall=MethodCallExpression.isSuperMethodCall(call);
  String method=call.getMethod();
  if (isThisExpression(call.getObjectExpression()) && isFieldOrVariable(method) && !classNode.hasPossibleMethod(method,arguments)) {
    visitVariableExpression(new VariableExpression(method));
    arguments.visit(this);
    invokeClosureMethod.call(cv);
  }
 else {
    if (superMethodCall) {
      MethodNode superMethodNode=findSuperMethod(call);
      cv.visitVarInsn(ALOAD,0);
      loadArguments(superMethodNode.getParameters(),arguments);
      String descriptor=BytecodeHelper.getMethodDescriptor(superMethodNode.getReturnType(),superMethodNode.getParameters());
      cv.visitMethodInsn(INVOKESPECIAL,BytecodeHelper.getClassInternalName(superMethodNode.getDeclaringClass()),method,descriptor);
    }
 else {
      Expression objectExpression=call.getObjectExpression();
      boolean objectExpressionIsMethodName=false;
      if (method.equals("call")) {
        if (objectExpression instanceof GStringExpression) {
          objectExpressionIsMethodName=true;
          objectExpression=new CastExpression(ClassHelper.STRING_TYPE,objectExpression);
        }
 else         if (objectExpression instanceof ConstantExpression) {
          Object value=((ConstantExpression)objectExpression).getValue();
          if (value != null && value instanceof String)           objectExpressionIsMethodName=true;
        }
      }
      if (emptyArguments(arguments) && !call.isSafe() && !call.isSpreadSafe()) {
        prepareMethodcallObjectAndName(objectExpression,objectExpressionIsMethodName,method);
        invokeNoArgumentsMethod.call(cv);
      }
 else {
        if (argumentsUseStack(arguments)) {
          arguments.visit(this);
          int paramIdx=compileStack.defineTemporaryVariable(method + "_arg",true);
          prepareMethodcallObjectAndName(objectExpression,objectExpressionIsMethodName,method);
          cv.visitVarInsn(ALOAD,paramIdx);
          compileStack.removeVar(paramIdx);
        }
 else {
          prepareMethodcallObjectAndName(objectExpression,objectExpressionIsMethodName,method);
          arguments.visit(this);
        }
        if (call.isSpreadSafe()) {
          invokeMethodSpreadSafeMethod.call(cv);
        }
 else         if (call.isSafe()) {
          invokeMethodSafeMethod.call(cv);
        }
 else {
          invokeMethodMethod.call(cv);
        }
      }
    }
  }
}
