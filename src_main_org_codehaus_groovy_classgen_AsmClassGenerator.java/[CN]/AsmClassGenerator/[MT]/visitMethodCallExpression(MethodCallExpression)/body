{
  onLineNumber(call,"visitMethodCallExpression: \"" + call.getMethod() + "\":");
  this.leftHandExpression=false;
  Expression arguments=call.getArguments();
  boolean superMethodCall=MethodCallExpression.isSuperMethodCall(call);
  String method=call.getMethod();
  if (superMethodCall && method.equals("<init>")) {
    cv.visitVarInsn(ALOAD,0);
    if (isInClosureConstructor()) {
      cv.visitVarInsn(ALOAD,2);
      cv.visitMethodInsn(INVOKESPECIAL,internalBaseClassName,"<init>","(Ljava/lang/Object;)V");
    }
 else {
      cv.visitVarInsn(ALOAD,1);
      cv.visitMethodInsn(INVOKESPECIAL,internalBaseClassName,"<init>","(Ljava/lang/Object;)V");
    }
  }
 else {
    if (isThisExpression(call.getObjectExpression()) && isFieldOrVariable(method) && !classNode.hasPossibleMethod(method,arguments)) {
      visitVariableExpression(new VariableExpression(method));
      arguments.visit(this);
      invokeClosureMethod.call(cv);
    }
 else {
      if (superMethodCall) {
        if (method.equals("super") || method.equals("<init>")) {
          ConstructorNode superConstructorNode=findSuperConstructor(call);
          cv.visitVarInsn(ALOAD,0);
          loadArguments(superConstructorNode.getParameters(),arguments);
          String descriptor=BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE,superConstructorNode.getParameters());
          cv.visitMethodInsn(INVOKESPECIAL,BytecodeHelper.getClassInternalName(classNode.getSuperClass()),"<init>",descriptor);
        }
 else {
          MethodNode superMethodNode=findSuperMethod(call);
          cv.visitVarInsn(ALOAD,0);
          loadArguments(superMethodNode.getParameters(),arguments);
          String descriptor=BytecodeHelper.getMethodDescriptor(superMethodNode.getReturnType(),superMethodNode.getParameters());
          cv.visitMethodInsn(INVOKESPECIAL,BytecodeHelper.getClassInternalName(superMethodNode.getDeclaringClass()),method,descriptor);
        }
      }
 else {
        if (emptyArguments(arguments) && !call.isSafe() && !call.isSpreadSafe()) {
          call.getObjectExpression().visit(this);
          cv.visitLdcInsn(method);
          invokeNoArgumentsMethod.call(cv);
        }
 else {
          if (argumentsUseStack(arguments)) {
            arguments.visit(this);
            Variable tv=visitASTOREInTemp(method + "_arg");
            int paramIdx=tv.getIndex();
            call.getObjectExpression().visit(this);
            cv.visitLdcInsn(method);
            cv.visitVarInsn(ALOAD,paramIdx);
            removeVar(tv);
          }
 else {
            call.getObjectExpression().visit(this);
            cv.visitLdcInsn(method);
            arguments.visit(this);
          }
          if (call.isSpreadSafe()) {
            invokeMethodSpreadSafeMethod.call(cv);
          }
 else           if (call.isSafe()) {
            invokeMethodSafeMethod.call(cv);
          }
 else {
            invokeMethodMethod.call(cv);
          }
        }
      }
    }
  }
}
