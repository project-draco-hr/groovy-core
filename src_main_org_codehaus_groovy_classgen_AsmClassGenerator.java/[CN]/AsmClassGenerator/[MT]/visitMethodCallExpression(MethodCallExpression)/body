{
  onLineNumber(call,"visitMethodCallExpression: \"" + call.getMethod() + "\":");
  Expression arguments=call.getArguments();
  String methodName=call.getMethodAsString();
  boolean isSuperMethodCall=usesSuper(call);
  boolean isThisExpression=isThisExpression(call.getObjectExpression());
  if (methodName != null && isThisExpression && isFieldOrVariable(methodName) && !classNode.hasPossibleMethod(methodName,arguments)) {
    visitVariableExpression(new VariableExpression(methodName));
    arguments.visit(this);
    invokeClosureMethod.call(cv);
  }
 else {
    MethodCallerMultiAdapter adapter=invokeMethod;
    if (isThisExpression)     adapter=invokeMethodOnCurrent;
    if (isSuperMethodCall)     adapter=invokeMethodOnSuper;
    if (isStaticInvocation(call))     adapter=invokeStaticMethod;
    makeInvokeMethodCall(call,isSuperMethodCall,adapter);
  }
}
