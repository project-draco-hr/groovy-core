{
  if (attributeExpression.getTypeClass() != null)   return;
  if (attributeExpression.isResolveFailed())   return;
  Expression ownerExp=attributeExpression.getObjectExpression();
  Class ownerClass=ownerExp.getTypeClass();
  String propName=attributeExpression.getProperty();
  if (propName.equals("class")) {
    attributeExpression.setTypeClass(Class.class);
    return;
  }
  if (ownerClass != null && ownerClass.isArray() && propName.equals("length")) {
    attributeExpression.setTypeClass(int.class);
    return;
  }
  if (isThisExpression(ownerExp)) {
    if (classNode == null) {
      attributeExpression.setResolveFailed(true);
      return;
    }
    FieldNode field=null;
    ownerExp.setType(classNode.getName());
    try {
      if ((field=classNode.getField(propName)) != null) {
        attributeExpression.setResolveFailed(true);
        attributeExpression.setFailure("local property access. to be determined in the future.");
        return;
      }
 else {
        String[] interfaces=classNode.getInterfaces();
        String[] supers=new String[interfaces.length + 1];
        int i=0;
        for (; i < interfaces.length; i++) {
          supers[i]=interfaces[i];
        }
        supers[i]=classNode.getSuperClass();
        for (int j=0; j < supers.length; j++) {
          String aSuper=supers[j];
          Class superClass=loadClass(aSuper);
          Field fld=superClass.getDeclaredField(propName);
          if (fld != null && !Modifier.isPrivate(fld.getModifiers())) {
            attributeExpression.setField(fld);
            return;
          }
        }
      }
    }
 catch (    Exception e) {
      attributeExpression.setResolveFailed(true);
      attributeExpression.setFailure(e.getMessage());
      return;
    }
  }
 else   if (ownerExp instanceof ClassExpression) {
    if (ownerClass != null) {
      Field fld=null;
      try {
        fld=ownerClass.getDeclaredField(propName);
        if (!Modifier.isPrivate(fld.getModifiers())) {
          attributeExpression.setField(fld);
          return;
        }
      }
 catch (      NoSuchFieldException e) {
        attributeExpression.setResolveFailed(true);
        return;
      }
    }
  }
 else {
    if (ownerClass != null) {
      attributeExpression.setResolveFailed(true);
      Field fld=null;
      try {
        fld=ownerClass.getDeclaredField(propName);
      }
 catch (      NoSuchFieldException e) {
      }
      if (fld != null && Modifier.isPublic(fld.getModifiers())) {
        attributeExpression.setField(fld);
      }
      String getterName="get" + Character.toUpperCase(propName.charAt(0)) + propName.substring(1);
      String setterName="set" + Character.toUpperCase(propName.charAt(0)) + propName.substring(1);
      Method[] meths=ownerClass.getMethods();
      for (int i=0; i < meths.length; i++) {
        Method method=meths[i];
        String methName=method.getName();
        Class[] paramClasses=method.getParameterTypes();
        if (methName.equals(getterName) && paramClasses.length == 0) {
          attributeExpression.setGetter(method);
        }
 else         if (methName.equals(setterName) && paramClasses.length == 1) {
          attributeExpression.setSetter(method);
        }
      }
      return;
    }
  }
  attributeExpression.setResolveFailed(true);
  return;
}
