{
  int size=expression.getValues().size();
  helper.pushConstant(size);
  cv.visitTypeInsn(ANEWARRAY,"java/lang/Object");
  for (int i=0; i < size; i++) {
    cv.visitInsn(DUP);
    helper.pushConstant(i);
    visitAndAutoboxBoolean(expression.getValue(i));
    cv.visitInsn(AASTORE);
  }
  Variable tv=visitASTOREInTemp("iterator");
  int paramIdx=tv.getIndex();
  ClassNode innerClass=createGStringClass(expression);
  addInnerClass(innerClass);
  String innerClassinternalName=BytecodeHelper.getClassInternalName(innerClass.getName());
  cv.visitTypeInsn(NEW,innerClassinternalName);
  cv.visitInsn(DUP);
  cv.visitVarInsn(ALOAD,paramIdx);
  cv.visitMethodInsn(INVOKESPECIAL,innerClassinternalName,"<init>","([Ljava/lang/Object;)V");
  removeVar(tv);
}
