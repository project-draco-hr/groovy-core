{
  Expression objectExpression=expression.getObjectExpression();
  MethodCallerMultiAdapter adapter;
  OperandStack operandStack=controller.getOperandStack();
  int mark=operandStack.getStackLength() - 1;
  if (controller.getCompileStack().isLHS()) {
    adapter=setField;
    if (isGroovyObject(objectExpression))     adapter=setGroovyObjectField;
    if (usesSuper(expression))     adapter=setFieldOnSuper;
  }
 else {
    adapter=getField;
    if (isGroovyObject(objectExpression))     adapter=getGroovyObjectField;
    if (usesSuper(expression))     adapter=getFieldOnSuper;
  }
  visitAttributeOrProperty(expression,adapter);
  if (!controller.getCompileStack().isLHS()) {
    controller.getAssertionWriter().record(expression.getProperty());
  }
 else {
    operandStack.remove(operandStack.getStackLength() - mark);
  }
}
