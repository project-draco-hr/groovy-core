{
  Expression leftExpression=expression.getLeftExpression();
  if (leftExpression instanceof BinaryExpression) {
    BinaryExpression leftBinExpr=(BinaryExpression)leftExpression;
    if (leftBinExpr.getOperation().getType() == Types.LEFT_SQUARE_BRACKET) {
      MethodCallExpression methodCall=new MethodCallExpression(expression.getLeftExpression(),method,new ArgumentListExpression(expression.getRightExpression()));
      Expression safeIndexExpr=createReusableExpression(leftBinExpr.getRightExpression());
      visitMethodCallExpression(new MethodCallExpression(leftBinExpr.getLeftExpression(),"putAt",new ArgumentListExpression(safeIndexExpr,methodCall)));
      return;
    }
  }
  evaluateBinaryExpression(method,expression);
  mv.visitInsn(DUP);
  leftHandExpression=true;
  evaluateExpression(leftExpression);
  leftHandExpression=false;
}
