{
  ClassNode type=castExpression.getType();
  Expression subExpression=castExpression.getExpression();
  subExpression.visit(this);
  if (ClassHelper.OBJECT_TYPE.equals(type))   return;
  if (castExpression.isCoerce()) {
    controller.getOperandStack().doAsType(type);
  }
 else {
    if (isNullConstant(subExpression) && !ClassHelper.isPrimitiveType(type)) {
      controller.getOperandStack().replace(type);
    }
 else {
      ClassNode subExprType=controller.getTypeChooser().resolveType(subExpression,controller.getClassNode());
      if (!ClassHelper.isPrimitiveType(type) && WideningCategories.implementsInterfaceOrSubclassOf(subExprType,type)) {
        BytecodeHelper.doCast(controller.getMethodVisitor(),type);
        controller.getOperandStack().replace(type);
      }
 else {
        controller.getOperandStack().doGroovyCast(type);
      }
    }
  }
}
