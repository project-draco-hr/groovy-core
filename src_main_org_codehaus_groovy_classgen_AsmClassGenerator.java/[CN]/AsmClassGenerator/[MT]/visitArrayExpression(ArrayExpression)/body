{
  ClassNode elementType=expression.getElementType();
  String arrayTypeName=BytecodeHelper.getClassInternalName(elementType);
  List sizeExpression=expression.getSizeExpression();
  int size=0;
  int dimensions=0;
  if (sizeExpression != null) {
    for (Iterator iter=sizeExpression.iterator(); iter.hasNext(); ) {
      Expression element=(Expression)iter.next();
      if (element == ConstantExpression.EMTPY_EXPRESSION)       break;
      dimensions++;
      visitAndAutoboxBoolean(element);
      asIntMethod.call(cv);
    }
  }
 else {
    size=expression.getExpressions().size();
    helper.pushConstant(size);
  }
  int storeIns=AASTORE;
  if (sizeExpression != null) {
    arrayTypeName=BytecodeHelper.getTypeDescription(expression.getType());
    cv.visitMultiANewArrayInsn(arrayTypeName,dimensions);
  }
 else   if (ClassHelper.isPrimitiveType(elementType)) {
    int primType=0;
    if (elementType == ClassHelper.boolean_TYPE) {
      primType=T_BOOLEAN;
      storeIns=BASTORE;
    }
 else     if (elementType == ClassHelper.char_TYPE) {
      primType=T_CHAR;
      storeIns=CASTORE;
    }
 else     if (elementType == ClassHelper.float_TYPE) {
      primType=T_FLOAT;
      storeIns=FASTORE;
    }
 else     if (elementType == ClassHelper.double_TYPE) {
      primType=T_DOUBLE;
      storeIns=DASTORE;
    }
 else     if (elementType == ClassHelper.byte_TYPE) {
      primType=T_BYTE;
      storeIns=BASTORE;
    }
 else     if (elementType == ClassHelper.short_TYPE) {
      primType=T_SHORT;
      storeIns=SASTORE;
    }
 else     if (elementType == ClassHelper.int_TYPE) {
      primType=T_INT;
      storeIns=IASTORE;
    }
 else     if (elementType == ClassHelper.long_TYPE) {
      primType=T_LONG;
      storeIns=LASTORE;
    }
    cv.visitIntInsn(NEWARRAY,primType);
  }
 else {
    cv.visitTypeInsn(ANEWARRAY,arrayTypeName);
  }
  for (int i=0; i < size; i++) {
    cv.visitInsn(DUP);
    helper.pushConstant(i);
    Expression elementExpression=expression.getExpression(i);
    if (elementExpression == null) {
      ConstantExpression.NULL.visit(this);
    }
 else {
      if (!elementType.equals(elementExpression.getType())) {
        visitCastExpression(new CastExpression(elementType,elementExpression,true));
      }
 else {
        visitAndAutoboxBoolean(elementExpression);
      }
    }
    cv.visitInsn(storeIns);
  }
  if (sizeExpression == null && ClassHelper.isPrimitiveType(elementType)) {
    int par=compileStack.defineTemporaryVariable("par",true);
    cv.visitVarInsn(ALOAD,par);
  }
}
