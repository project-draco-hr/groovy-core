{
  Expression leftExp=expression.getLeftExpression();
  Expression rightExp=expression.getRightExpression();
  expression.resolve(this);
  if (expression.isResolveFailed() || expression.getTypeClass() == null) {
    evalBinaryExp_LateBinding(compareMethod,expression);
    return;
  }
 else {
    Class lclass=leftExp.getTypeClass();
    Class rclass=rightExp.getTypeClass();
    if (lclass == null || rclass == null) {
      if ((lclass == null && rclass != null) || (lclass != null && rclass == null)) {
        if (leftExp == ConstantExpression.NULL && !rclass.isPrimitive() || rightExp == ConstantExpression.NULL && !lclass.isPrimitive()) {
          Expression exp=leftExp == ConstantExpression.NULL ? rightExp : leftExp;
          int type=expression.getOperation().getType();
switch (type) {
case Types.COMPARE_EQUAL:
            load(exp);
          cv.visitInsn(ICONST_1);
        cv.visitInsn(SWAP);
      Label l1=new Label();
    cv.visitJumpInsn(IFNULL,l1);
  cv.visitInsn(POP);
cv.visitInsn(ICONST_0);
cv.visitLabel(l1);
return;
case Types.COMPARE_NOT_EQUAL:
load(exp);
cv.visitInsn(ICONST_1);
cv.visitInsn(SWAP);
Label l2=new Label();
cv.visitJumpInsn(IFNONNULL,l2);
cv.visitInsn(POP);
cv.visitInsn(ICONST_0);
cv.visitLabel(l2);
return;
default :
evalBinaryExp_LateBinding(compareMethod,expression);
return;
}
}
 else {
evalBinaryExp_LateBinding(compareMethod,expression);
return;
}
}
 else {
evalBinaryExp_LateBinding(compareMethod,expression);
return;
}
}
 else if (lclass == String.class && rclass == String.class) {
int type=expression.getOperation().getType();
switch (type) {
case Types.COMPARE_EQUAL:
load(leftExp);
cast(String.class);
load(rightExp);
cast(String.class);
cv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/String","equals","(Ljava/lang/Object;)Z");
return;
case Types.COMPARE_NOT_EQUAL:
load(leftExp);
cast(String.class);
load(rightExp);
cast(String.class);
cv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/String","equals","(Ljava/lang/Object;)Z");
cv.visitInsn(ICONST_1);
cv.visitInsn(IXOR);
return;
case Types.COMPARE_TO:
load(leftExp);
cast(String.class);
load(rightExp);
cast(String.class);
cv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/String","compareTo","(Ljava/lang/Object;)I");
helper.quickBoxIfNecessary(int.class);
return;
case Types.COMPARE_GREATER_THAN:
case Types.COMPARE_GREATER_THAN_EQUAL:
case Types.COMPARE_LESS_THAN:
case Types.COMPARE_LESS_THAN_EQUAL:
{
int op;
switch (type) {
case Types.COMPARE_GREATER_THAN:
op=IFLE;
break;
case Types.COMPARE_GREATER_THAN_EQUAL:
op=IFLT;
break;
case Types.COMPARE_LESS_THAN:
op=IFGE;
break;
case Types.COMPARE_LESS_THAN_EQUAL:
op=IFGT;
break;
default :
System.err.println("flow control error: should not be here. type: " + type);
return;
}
load(leftExp);
cast(String.class);
load(rightExp);
cast(String.class);
cv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/String","compareTo","(Ljava/lang/Object;)I");
Label l4=new Label();
cv.visitJumpInsn(op,l4);
cv.visitInsn(ICONST_1);
Label l5=new Label();
cv.visitJumpInsn(GOTO,l5);
cv.visitLabel(l4);
cv.visitInsn(ICONST_0);
cv.visitLabel(l5);
}
return;
default :
evalBinaryExp_LateBinding(compareMethod,expression);
return;
}
}
 else if (Integer.class == lclass && Integer.class == rclass) {
int type=expression.getOperation().getType();
switch (type) {
case Types.COMPARE_EQUAL:
load(leftExp);
cast(Integer.class);
load(rightExp);
cv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Integer","equals","(Ljava/lang/Object;)Z");
return;
case Types.COMPARE_NOT_EQUAL:
load(leftExp);
cast(Integer.class);
load(rightExp);
cv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Integer","equals","(Ljava/lang/Object;)Z");
cv.visitInsn(ICONST_1);
cv.visitInsn(IXOR);
return;
case Types.COMPARE_TO:
load(leftExp);
cast(Integer.class);
load(rightExp);
cv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Integer","compareTo","(Ljava/lang/Object;)I");
helper.quickBoxIfNecessary(int.class);
return;
case Types.COMPARE_GREATER_THAN:
case Types.COMPARE_GREATER_THAN_EQUAL:
case Types.COMPARE_LESS_THAN:
case Types.COMPARE_LESS_THAN_EQUAL:
{
int op;
switch (type) {
case Types.COMPARE_GREATER_THAN:
op=IFLE;
break;
case Types.COMPARE_GREATER_THAN_EQUAL:
op=IFLT;
break;
case Types.COMPARE_LESS_THAN:
op=IFGE;
break;
case Types.COMPARE_LESS_THAN_EQUAL:
op=IFGT;
break;
default :
System.err.println("flow control error: should not be here. type: " + type);
return;
}
load(leftExp);
cast(Integer.class);
load(rightExp);
cv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Integer","compareTo","(Ljava/lang/Object;)I");
Label l4=new Label();
cv.visitJumpInsn(op,l4);
cv.visitInsn(ICONST_1);
Label l5=new Label();
cv.visitJumpInsn(GOTO,l5);
cv.visitLabel(l4);
cv.visitInsn(ICONST_0);
cv.visitLabel(l5);
}
return;
default :
evalBinaryExp_LateBinding(compareMethod,expression);
return;
}
}
 else {
evalBinaryExp_LateBinding(compareMethod,expression);
return;
}
}
}
