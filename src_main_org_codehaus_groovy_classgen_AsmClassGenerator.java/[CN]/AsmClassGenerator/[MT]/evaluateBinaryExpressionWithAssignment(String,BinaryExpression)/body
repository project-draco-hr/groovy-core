{
  Expression leftExpression=expression.getLeftExpression();
  if (leftExpression instanceof BinaryExpression) {
    BinaryExpression leftBinExpr=(BinaryExpression)leftExpression;
    if (leftBinExpr.getOperation().getType() == Types.LEFT_SQUARE_BRACKET) {
      visitAndAutoboxBoolean(leftBinExpr.getLeftExpression());
      final int objVar=compileStack.defineTemporaryVariable("$object",true);
      Expression objectExpression=new BytecodeExpression(){
        public void visit(        MethodVisitor mv){
          mv.visitVarInsn(ALOAD,objVar);
        }
      }
;
      visitAndAutoboxBoolean(leftBinExpr.getRightExpression());
      final int indexVar=compileStack.defineTemporaryVariable("$index",true);
      Expression indexExpression=new BytecodeExpression(){
        public void visit(        MethodVisitor mv){
          mv.visitVarInsn(ALOAD,indexVar);
        }
      }
;
      final BinaryExpression leftExpr=new BinaryExpression(objectExpression,Token.newSymbol(Types.LEFT_SQUARE_BRACKET,-1,-1),indexExpression);
      leftExpr.setSourcePosition(leftExpression);
      MethodCallExpression methodCall=new MethodCallExpression(leftExpr,method,new ArgumentListExpression(expression.getRightExpression()));
      methodCall.visit(this);
      final int resultVar=compileStack.defineTemporaryVariable("$result",true);
      Expression resultExpression=new BytecodeExpression(){
        public void visit(        MethodVisitor mv){
          mv.visitVarInsn(ALOAD,resultVar);
        }
      }
;
      visitMethodCallExpression(new MethodCallExpression(objectExpression,"putAt",new ArgumentListExpression(new Expression[]{indexExpression,resultExpression})));
      mv.visitInsn(POP);
      mv.visitVarInsn(ALOAD,resultVar);
      compileStack.removeVar(resultVar);
      compileStack.removeVar(indexVar);
      compileStack.removeVar(objVar);
      return;
    }
  }
  evaluateBinaryExpression(method,expression);
  mv.visitInsn(DUP);
  leftHandExpression=true;
  evaluateExpression(leftExpression);
  leftHandExpression=false;
}
