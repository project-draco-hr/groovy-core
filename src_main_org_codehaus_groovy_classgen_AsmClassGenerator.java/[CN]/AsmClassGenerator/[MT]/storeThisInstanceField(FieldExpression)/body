{
  MethodVisitor mv=controller.getMethodVisitor();
  FieldNode field=expression.getField();
  boolean setReferenceFromReference=field.isHolder() && expression.isUseReferenceDirectly();
  String ownerName=(field.getOwner().equals(controller.getClassNode())) ? controller.getInternalClassName() : BytecodeHelper.getClassInternalName(field.getOwner());
  OperandStack operandStack=controller.getOperandStack();
  if (setReferenceFromReference) {
    mv.visitVarInsn(ALOAD,0);
    operandStack.push(controller.getClassNode());
    operandStack.swap();
    mv.visitFieldInsn(PUTFIELD,ownerName,field.getName(),BytecodeHelper.getTypeDescription(field.getType()));
  }
 else   if (field.isHolder()) {
    operandStack.doGroovyCast(field.getOriginType());
    operandStack.box();
    mv.visitVarInsn(ALOAD,0);
    mv.visitFieldInsn(GETFIELD,ownerName,expression.getFieldName(),BytecodeHelper.getTypeDescription(field.getType()));
    mv.visitInsn(SWAP);
    mv.visitMethodInsn(INVOKEVIRTUAL,"groovy/lang/Reference","set","(Ljava/lang/Object;)V");
  }
 else {
    operandStack.doGroovyCast(field.getOriginType());
    mv.visitVarInsn(ALOAD,0);
    operandStack.push(controller.getClassNode());
    operandStack.swap();
    mv.visitFieldInsn(PUTFIELD,ownerName,field.getName(),BytecodeHelper.getTypeDescription(field.getType()));
  }
}
