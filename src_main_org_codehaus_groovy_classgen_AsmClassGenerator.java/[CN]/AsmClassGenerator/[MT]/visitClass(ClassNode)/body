{
  try {
    syntheticStaticFields.clear();
    this.classNode=classNode;
    this.outermostClass=null;
    this.internalClassName=BytecodeHelper.getClassInternalName(classNode.getName());
    classNode.setSuperClass(checkValidType(classNode.getSuperClass(),classNode,"Must be a valid base class"));
    String[] interfaces=classNode.getInterfaces();
    for (int i=0; i < interfaces.length; i++) {
      interfaces[i]=checkValidType(interfaces[i],classNode,"Must be a valid interface name");
    }
    this.internalBaseClassName=BytecodeHelper.getClassInternalName(classNode.getSuperClass());
    cw.visit(asmJDKVersion,classNode.getModifiers(),internalClassName,null,internalBaseClassName,BytecodeHelper.getClassInternalNames(classNode.getInterfaces()));
    cw.visitSource(sourceFile,null);
    classNode.visitContents(this);
    createSyntheticStaticFields();
    for (Iterator iter=innerClasses.iterator(); iter.hasNext(); ) {
      ClassNode innerClass=(ClassNode)iter.next();
      String innerClassName=innerClass.getName();
      String innerClassInternalName=BytecodeHelper.getClassInternalName(innerClassName);
{
        int index=innerClassName.lastIndexOf('$');
        if (index >= 0)         innerClassName=innerClassName.substring(index + 1);
      }
      String outerClassName=internalClassName;
      MethodNode enclosingMethod=innerClass.getEnclosingMethod();
      if (enclosingMethod != null) {
        outerClassName=null;
        innerClassName=null;
      }
      cw.visitInnerClass(innerClassInternalName,outerClassName,innerClassName,innerClass.getModifiers());
    }
    cw.visitEnd();
  }
 catch (  GroovyRuntimeException e) {
    e.setModule(classNode.getModule());
    throw e;
  }
}
