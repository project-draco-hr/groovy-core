{
  referencedClasses.clear();
  this.controller=new WriterController();
  this.controller.init(this,context,cv,classNode);
  try {
    cv.visit(getBytecodeVersion(),adjustedModifiers(classNode.getModifiers()),controller.getInternalClassName(),BytecodeHelper.getGenericsSignature(classNode),controller.getInternalBaseClassName(),BytecodeHelper.getClassInternalNames(classNode.getInterfaces()));
    cv.visitSource(sourceFile,null);
    if (classNode.getName().endsWith("package-info")) {
      PackageNode packageNode=classNode.getPackage();
      if (packageNode != null) {
        for (        AnnotationNode an : packageNode.getAnnotations()) {
          if (an.isBuiltIn())           continue;
          if (an.hasSourceRetention())           continue;
          AnnotationVisitor av=getAnnotationVisitor(classNode,an,cv);
          visitAnnotationAttributes(an,av);
          av.visitEnd();
        }
      }
      cv.visitEnd();
      return;
    }
 else {
      visitAnnotations(classNode,cv);
    }
    if (classNode.isInterface()) {
      ClassNode owner=classNode;
      if (owner instanceof InnerClassNode) {
        owner=owner.getOuterClass();
      }
      String outerClassName=owner.getName();
      String name=outerClassName + "$" + context.getNextInnerClassIdx();
      controller.setInterfaceClassLoadingClass(new InterfaceHelperClassNode(owner,name,4128,ClassHelper.OBJECT_TYPE,controller.getCallSiteWriter().getCallSites()));
      super.visitClass(classNode);
      createInterfaceSyntheticStaticFields();
    }
 else {
      super.visitClass(classNode);
      MopWriter mopWriter=new MopWriter(controller);
      mopWriter.createMopMethods();
      controller.getCallSiteWriter().generateCallSiteArray();
      createSyntheticStaticFields();
    }
    for (Iterator iter=innerClasses.iterator(); iter.hasNext(); ) {
      ClassNode innerClass=(ClassNode)iter.next();
      String innerClassName=innerClass.getName();
      String innerClassInternalName=BytecodeHelper.getClassInternalName(innerClassName);
{
        int index=innerClassName.lastIndexOf('$');
        if (index >= 0)         innerClassName=innerClassName.substring(index + 1);
      }
      String outerClassName=controller.getInternalClassName();
      MethodNode enclosingMethod=innerClass.getEnclosingMethod();
      if (enclosingMethod != null) {
        outerClassName=null;
        innerClassName=null;
      }
      int mods=innerClass.getModifiers();
      cv.visitInnerClass(innerClassInternalName,outerClassName,innerClassName,mods);
    }
    cv.visitEnd();
  }
 catch (  GroovyRuntimeException e) {
    e.setModule(classNode.getModule());
    throw e;
  }
}
