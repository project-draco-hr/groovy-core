{
  referencedClasses.clear();
  WriterControllerFactory factory=(WriterControllerFactory)classNode.getNodeMetaData(WriterControllerFactory.class);
  WriterController normalController=new WriterController();
  if (factory != null) {
    this.controller=factory.makeController(normalController);
  }
 else {
    this.controller=normalController;
  }
  this.controller.init(this,context,cv,classNode);
  if (controller.shouldOptimizeForInt()) {
    OptimizingStatementWriter.setNodeMeta(controller.getTypeChooser(),classNode);
  }
  try {
    cv.visit(getBytecodeVersion(),adjustedClassModifiers(classNode.getModifiers()),controller.getInternalClassName(),BytecodeHelper.getGenericsSignature(classNode),controller.getInternalBaseClassName(),BytecodeHelper.getClassInternalNames(classNode.getInterfaces()));
    cv.visitSource(sourceFile,null);
    if (classNode.getName().endsWith("package-info")) {
      PackageNode packageNode=classNode.getPackage();
      if (packageNode != null) {
        for (        AnnotationNode an : packageNode.getAnnotations()) {
          if (an.isBuiltIn())           continue;
          if (an.hasSourceRetention())           continue;
          AnnotationVisitor av=getAnnotationVisitor(classNode,an,cv);
          visitAnnotationAttributes(an,av);
          av.visitEnd();
        }
      }
      cv.visitEnd();
      return;
    }
 else {
      visitAnnotations(classNode,cv);
    }
    if (classNode.isInterface()) {
      ClassNode owner=classNode;
      if (owner instanceof InnerClassNode) {
        owner=owner.getOuterClass();
      }
      String outerClassName=classNode.getName();
      String name=outerClassName + "$" + context.getNextInnerClassIdx();
      controller.setInterfaceClassLoadingClass(new InterfaceHelperClassNode(owner,name,4128,ClassHelper.OBJECT_TYPE,controller.getCallSiteWriter().getCallSites()));
      super.visitClass(classNode);
      createInterfaceSyntheticStaticFields();
    }
 else {
      super.visitClass(classNode);
      MopWriter mopWriter=new MopWriter(controller);
      mopWriter.createMopMethods();
      controller.getCallSiteWriter().generateCallSiteArray();
      createSyntheticStaticFields();
    }
    for (Iterator<InnerClassNode> iter=classNode.getInnerClasses(); iter.hasNext(); ) {
      InnerClassNode innerClass=iter.next();
      makeInnerClassEntry(innerClass);
    }
    makeInnerClassEntry(classNode);
    cv.visitEnd();
  }
 catch (  GroovyRuntimeException e) {
    e.setModule(classNode.getModule());
    throw e;
  }
catch (  NullPointerException npe) {
    throw new GroovyRuntimeException("NPE while processing " + sourceFile,npe);
  }
}
