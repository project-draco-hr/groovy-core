{
  try {
    callSiteCount=0;
    referencedClasses.clear();
    this.classNode=classNode;
    this.outermostClass=null;
    this.internalClassName=BytecodeHelper.getClassInternalName(classNode);
    this.internalBaseClassName=BytecodeHelper.getClassInternalName(classNode.getSuperClass());
    cv.visit(getBytecodeVersion(),classNode.getModifiers(),internalClassName,BytecodeHelper.getGenericsSignature(classNode),internalBaseClassName,BytecodeHelper.getClassInternalNames(classNode.getInterfaces()));
    cv.visitSource(sourceFile,null);
    visitAnnotations(classNode,cv);
    if (classNode.isInterface()) {
      ClassNode owner=classNode;
      if (owner instanceof InnerClassNode) {
        owner=owner.getOuterClass();
      }
      String outerClassName=owner.getName();
      String name=outerClassName + "$" + context.getNextInnerClassIdx();
      interfaceClassLoadingClass=new InnerClassNode(owner,name,4128,ClassHelper.OBJECT_TYPE);
      super.visitClass(classNode);
      createInterfaceSyntheticStaticFields();
    }
 else {
      super.visitClass(classNode);
      if (!classNode.declaresInterface(ClassHelper.GENERATED_CLOSURE_Type.getName())) {
        createMopMethods();
      }
      createSyntheticStaticFields();
    }
    for (Iterator iter=innerClasses.iterator(); iter.hasNext(); ) {
      ClassNode innerClass=(ClassNode)iter.next();
      String innerClassName=innerClass.getName();
      String innerClassInternalName=BytecodeHelper.getClassInternalName(innerClassName);
{
        int index=innerClassName.lastIndexOf('$');
        if (index >= 0)         innerClassName=innerClassName.substring(index + 1);
      }
      String outerClassName=internalClassName;
      MethodNode enclosingMethod=innerClass.getEnclosingMethod();
      if (enclosingMethod != null) {
        outerClassName=null;
        innerClassName=null;
      }
      cv.visitInnerClass(innerClassInternalName,outerClassName,innerClassName,innerClass.getModifiers());
    }
    if (callSiteCount > 0) {
      cv.visitField(ACC_STATIC + ACC_SYNTHETIC,"$callSiteArray","Lorg/codehaus/groovy/runtime/callsite/CallSiteArray;",null,null);
      MethodVisitor mv=cv.visitMethod(ACC_PUBLIC + ACC_SYNTHETIC + ACC_STATIC,"$getCallSiteArray","()Lorg/codehaus/groovy/runtime/callsite/CallSiteArray;",null,null);
      mv.visitCode();
      mv.visitFieldInsn(GETSTATIC,internalClassName,"$callSiteArray","Lorg/codehaus/groovy/runtime/callsite/CallSiteArray;");
      mv.visitVarInsn(ASTORE,1);
      mv.visitVarInsn(ALOAD,1);
      Label l0=new Label();
      mv.visitJumpInsn(IFNONNULL,l0);
      mv.visitTypeInsn(NEW,"org/codehaus/groovy/runtime/callsite/CallSiteArray");
      mv.visitInsn(DUP);
      mv.visitFieldInsn(GETSTATIC,internalClassName,"$ownClass","Ljava/lang/Class;");
      mv.visitLdcInsn(new Integer(callSiteCount));
      mv.visitMethodInsn(INVOKESPECIAL,"org/codehaus/groovy/runtime/callsite/CallSiteArray","<init>","(Ljava/lang/Class;I)V");
      mv.visitVarInsn(ASTORE,1);
      mv.visitVarInsn(ALOAD,1);
      mv.visitFieldInsn(PUTSTATIC,internalClassName,"$callSiteArray","Lorg/codehaus/groovy/runtime/callsite/CallSiteArray;");
      mv.visitLabel(l0);
      mv.visitVarInsn(ALOAD,1);
      mv.visitInsn(ARETURN);
      mv.visitMaxs(0,0);
      mv.visitEnd();
    }
    cv.visitEnd();
  }
 catch (  GroovyRuntimeException e) {
    e.setModule(classNode.getModule());
    throw e;
  }
}
