{
  ClassNode owner=classNode;
  if (owner instanceof InnerClassNode) {
    owner=owner.getOuterClass();
  }
  String outerClassName=owner.getName();
  String name=outerClassName + "$" + context.getNextInnerClassIdx();
  InnerClassNode answer=new InnerClassNode(owner,name,0,ClassHelper.GSTRING_TYPE);
  answer.setEnclosingMethod(this.methodNode);
  FieldNode stringsField=answer.addField("strings",ACC_PRIVATE,ClassHelper.STRING_TYPE.makeArray(),new ArrayExpression(ClassHelper.STRING_TYPE,expression.getStrings()));
  answer.addMethod("getStrings",ACC_PUBLIC,ClassHelper.STRING_TYPE.makeArray(),Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,new ReturnStatement(new FieldExpression(stringsField)));
  BlockStatement block=new BlockStatement();
  block.addStatement(new ExpressionStatement(new MethodCallExpression(new VariableExpression("super"),"<init>",new VariableExpression("values"))));
  Parameter[] contructorParams=new Parameter[]{new Parameter(ClassHelper.OBJECT_TYPE.makeArray(),"values")};
  answer.addConstructor(ACC_PUBLIC,contructorParams,ClassNode.EMPTY_ARRAY,block);
  return answer;
}
