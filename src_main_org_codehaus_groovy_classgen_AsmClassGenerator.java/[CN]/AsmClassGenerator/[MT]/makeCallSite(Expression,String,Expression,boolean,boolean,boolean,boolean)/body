{
  if (isNotClinit()) {
    mv.visitVarInsn(ALOAD,callSiteArrayVarIndex);
  }
 else {
    mv.visitMethodInsn(INVOKESTATIC,getClassName(),"$getCallSiteArray","()[Lorg/codehaus/groovy/runtime/callsite/CallSite;");
  }
  final int index=allocateIndex(message);
  mv.visitLdcInsn(index);
  mv.visitInsn(AALOAD);
  boolean constructor=message.equals(CONSTRUCTOR);
  boolean lhs=leftHandExpression;
  leftHandExpression=false;
  boolean oldVal=this.implicitThis;
  this.implicitThis=implicitThis;
  visitAndAutoboxBoolean(receiver);
  this.implicitThis=oldVal;
  boolean containsSpreadExpression=containsSpreadExpression(arguments);
  int numberOfArguments=containsSpreadExpression ? -1 : argumentSize(arguments);
  if (numberOfArguments > MethodCallerMultiAdapter.MAX_ARGS || containsSpreadExpression) {
    ArgumentListExpression ae;
    if (arguments instanceof ArgumentListExpression) {
      ae=(ArgumentListExpression)arguments;
    }
 else     if (arguments instanceof TupleExpression) {
      TupleExpression te=(TupleExpression)arguments;
      ae=new ArgumentListExpression(te.getExpressions());
    }
 else {
      ae=new ArgumentListExpression();
      ae.addExpression(arguments);
    }
    if (containsSpreadExpression) {
      numberOfArguments=-1;
      despreadList(ae.getExpressions(),true);
    }
 else {
      numberOfArguments=ae.getExpressions().size();
      for (int i=0; i < numberOfArguments; i++) {
        Expression argument=ae.getExpression(i);
        visitAndAutoboxBoolean(argument);
        if (argument instanceof CastExpression)         loadWrapper(argument);
      }
    }
  }
  if (numberOfArguments == -1) {
  }
 else {
    if (numberOfArguments > 4) {
      final String createArraySignature=getCreateArraySignature(numberOfArguments);
      mv.visitMethodInsn(INVOKESTATIC,"org/codehaus/groovy/runtime/ArrayUtil","createArray",createArraySignature);
    }
  }
  final String desc=getDescForParamNum(numberOfArguments);
  if (callStatic) {
    mv.visitMethodInsn(INVOKEINTERFACE,"org/codehaus/groovy/runtime/callsite/CallSite","callStatic","(Ljava/lang/Class;" + desc);
  }
 else   if (constructor) {
    mv.visitMethodInsn(INVOKEINTERFACE,"org/codehaus/groovy/runtime/callsite/CallSite","callConstructor","(Ljava/lang/Object;" + desc);
  }
 else {
    if (callCurrent) {
      mv.visitMethodInsn(INVOKEINTERFACE,"org/codehaus/groovy/runtime/callsite/CallSite","callCurrent","(Lgroovy/lang/GroovyObject;" + desc);
    }
 else {
      if (safe) {
        mv.visitMethodInsn(INVOKEINTERFACE,"org/codehaus/groovy/runtime/callsite/CallSite","callSafe","(Ljava/lang/Object;" + desc);
      }
 else {
        mv.visitMethodInsn(INVOKEINTERFACE,"org/codehaus/groovy/runtime/callsite/CallSite","call","(Ljava/lang/Object;" + desc);
      }
    }
  }
  leftHandExpression=lhs;
}
