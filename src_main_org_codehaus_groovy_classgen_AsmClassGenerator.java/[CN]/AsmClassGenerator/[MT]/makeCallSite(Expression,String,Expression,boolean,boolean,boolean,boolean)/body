{
  if (isClinit()) {
    mv.visitVarInsn(ALOAD,callSiteArrayVarIndex);
  }
 else {
    mv.visitMethodInsn(INVOKESTATIC,internalClassName,"$getCallSiteArray","()[Lorg/codehaus/groovy/runtime/callsite/CallSite;");
  }
  mv.visitLdcInsn(new Integer(allocateIndex(message)));
  mv.visitInsn(AALOAD);
  boolean constructor=message.equals(CONSTRUCTOR);
  boolean lhs=leftHandExpression;
  leftHandExpression=false;
  boolean oldVal=this.implicitThis;
  this.implicitThis=implicitThis;
  visitAndAutoboxBoolean(receiver);
  this.implicitThis=oldVal;
  boolean containsSpreadExpression=containsSpreadExpression(arguments);
  int numberOfArguments=containsSpreadExpression ? -1 : argumentSize(arguments);
  if (numberOfArguments > MethodCallerMultiAdapter.MAX_ARGS || containsSpreadExpression) {
    ArgumentListExpression ae;
    if (arguments instanceof ArgumentListExpression) {
      ae=(ArgumentListExpression)arguments;
    }
 else     if (arguments instanceof TupleExpression) {
      TupleExpression te=(TupleExpression)arguments;
      ae=new ArgumentListExpression(te.getExpressions());
    }
 else {
      ae=new ArgumentListExpression();
      ae.addExpression(arguments);
    }
    if (containsSpreadExpression) {
      despreadList(ae.getExpressions(),true);
    }
 else {
      ae.visit(this);
    }
  }
 else   if (numberOfArguments > 0) {
    TupleExpression te=(TupleExpression)arguments;
    for (int i=0; i < numberOfArguments; i++) {
      Expression argument=te.getExpression(i);
      visitAndAutoboxBoolean(argument);
      if (argument instanceof CastExpression)       loadWrapper(argument);
    }
  }
 else {
    mv.visitFieldInsn(GETSTATIC,"org/codehaus/groovy/runtime/callsite/CallSiteArray","NOPARAM","[Ljava/lang/Object;");
  }
  if (callStatic) {
    mv.visitInsn(DUP2_X1);
    mv.visitMethodInsn(INVOKEVIRTUAL,"org/codehaus/groovy/runtime/callsite/CallSite","acceptStatic","(Ljava/lang/Object;[Ljava/lang/Object;)Lorg/codehaus/groovy/runtime/callsite/CallSite;");
    mv.visitInsn(DUP_X2);
    mv.visitInsn(POP);
    mv.visitMethodInsn(INVOKEVIRTUAL,"org/codehaus/groovy/runtime/callsite/CallSite","invoke","(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
  }
 else   if (constructor) {
    mv.visitMethodInsn(INVOKEVIRTUAL,"org/codehaus/groovy/runtime/callsite/CallSite","callConstructor","(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
  }
 else {
    if (callCurrent) {
      mv.visitMethodInsn(INVOKEVIRTUAL,"org/codehaus/groovy/runtime/callsite/CallSite","callCurrent","(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
    }
 else {
      if (safe)       mv.visitMethodInsn(INVOKEVIRTUAL,"org/codehaus/groovy/runtime/callsite/CallSite","callSafe","(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
 else {
        mv.visitInsn(DUP2_X1);
        mv.visitMethodInsn(INVOKEVIRTUAL,"org/codehaus/groovy/runtime/callsite/CallSite","acceptCall","(Ljava/lang/Object;[Ljava/lang/Object;)Lorg/codehaus/groovy/runtime/callsite/CallSite;");
        mv.visitInsn(DUP_X2);
        mv.visitInsn(POP);
        mv.visitMethodInsn(INVOKEVIRTUAL,"org/codehaus/groovy/runtime/callsite/CallSite","invoke","(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
      }
    }
  }
  leftHandExpression=lhs;
}
