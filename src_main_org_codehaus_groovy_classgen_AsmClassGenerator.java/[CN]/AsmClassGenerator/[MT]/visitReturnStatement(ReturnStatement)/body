{
  onLineNumber(statement);
  String returnType=methodNode.getReturnType();
  if (returnType.equals("void")) {
    if (!(statement == ReturnStatement.RETURN_NULL_OR_VOID)) {
      throw new RuntimeParserException("Cannot use return statement with an expression on a method that returns void",statement);
    }
    cv.visitInsn(RETURN);
    outputReturn=true;
    return;
  }
  Expression expression=statement.getExpression();
  evaluateExpression(expression);
  helper.unbox(returnType);
  if (returnType.equals("double")) {
    cv.visitInsn(DRETURN);
  }
 else   if (returnType.equals("float")) {
    cv.visitInsn(FRETURN);
  }
 else   if (returnType.equals("long")) {
    cv.visitInsn(LRETURN);
  }
 else   if (returnType.equals("boolean")) {
    cv.visitInsn(IRETURN);
  }
 else   if (returnType.equals("char") || returnType.equals("byte") || returnType.equals("int")|| returnType.equals("short")) {
    cv.visitInsn(IRETURN);
  }
 else {
    doConvertAndCast(returnType,expression);
    cv.visitInsn(ARETURN);
  }
  outputReturn=true;
}
