{
  onLineNumber(statement,"visitReturnStatement");
  visitStatement(statement);
  ClassNode returnType=methodNode.getReturnType();
  if (returnType == ClassHelper.VOID_TYPE) {
    if (!(statement == ReturnStatement.RETURN_NULL_OR_VOID)) {
      throwException("Cannot use return statement with an expression on a method that returns void");
    }
    cv.visitInsn(RETURN);
    outputReturn=true;
    return;
  }
  Expression expression=statement.getExpression();
  evaluateExpression(expression);
  if (returnType == ClassHelper.OBJECT_TYPE && expression.getType() != null && expression.getType() == ClassHelper.VOID_TYPE) {
    cv.visitInsn(ACONST_NULL);
  }
 else {
    doConvertAndCast(returnType,expression,false,true);
    helper.unbox(returnType);
  }
  helper.doReturn(returnType);
  outputReturn=true;
}
