{
  if (isNotClinit()) {
    mv.visitVarInsn(ALOAD,callSiteArrayVarIndex);
  }
 else {
    mv.visitMethodInsn(INVOKESTATIC,internalClassName,"$getCallSiteArray","()[Lorg/codehaus/groovy/runtime/callsite/CallSite;");
  }
  final int index=allocateIndex(message);
  mv.visitLdcInsn(new Integer(index));
  mv.visitInsn(AALOAD);
  boolean lhs=leftHandExpression;
  leftHandExpression=false;
  boolean oldVal=this.implicitThis;
  this.implicitThis=false;
  visitAndAutoboxBoolean(receiver);
  this.implicitThis=oldVal;
  int recIdx=compileStack.defineTemporaryVariable("$local$receiver",true);
  mv.visitVarInsn(ALOAD,recIdx);
  visitAndAutoboxBoolean(arguments);
  int argsIdx=compileStack.defineTemporaryVariable("$local$args",true);
  mv.visitVarInsn(ALOAD,argsIdx);
  mv.visitMethodInsn(INVOKEVIRTUAL,"org/codehaus/groovy/runtime/callsite/CallSite","acceptBinop","(Ljava/lang/Object;Ljava/lang/Object;)Lorg/codehaus/groovy/runtime/callsite/CallSite;");
  mv.visitVarInsn(ALOAD,recIdx);
  mv.visitVarInsn(ALOAD,argsIdx);
  mv.visitMethodInsn(INVOKEVIRTUAL,"org/codehaus/groovy/runtime/callsite/CallSite","invokeBinop","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
  compileStack.removeVar(argsIdx);
  compileStack.removeVar(recIdx);
  leftHandExpression=lhs;
}
