{
  if (staticCall.isResolveFailed()) {
    return null;
  }
 else   if (staticCall.isTypeResolved()) {
    return staticCall.getMetaMethod();
  }
  String ownerTypeName=staticCall.getOwnerType();
  String meth=staticCall.getMethod();
  Class ownerClass=null;
  try {
    ownerClass=loadClass(ownerTypeName);
  }
 catch (  Exception e) {
    staticCall.setResolveFailed(true);
    staticCall.setFailure("Owner type could not be resolved: " + e);
    return null;
  }
  boolean isStaticCall=true;
  boolean isSuperCall=false;
  List arglist=new ArrayList();
  Expression args=staticCall.getArguments();
  if (args instanceof TupleExpression) {
    TupleExpression tupleExpression=(TupleExpression)args;
    List argexps=tupleExpression.getExpressions();
    for (int i=0; i < argexps.size(); i++) {
      Expression expression=(Expression)argexps.get(i);
      Class cls=expression.getTypeClass();
      if (cls == null) {
        staticCall.setResolveFailed(true);
        staticCall.setFailure("Argument type could not be resolved.");
        return null;
      }
 else {
        arglist.add(cls);
      }
    }
  }
 else   if (args instanceof ClosureExpression) {
    staticCall.setResolveFailed(true);
    staticCall.setFailure("Resolving on Closure call not implemented yet. ");
    return null;
  }
 else {
    staticCall.setResolveFailed(true);
    staticCall.setFailure("Unknown argument expression type.");
    return null;
  }
  Class[] argsArray=new Class[arglist.size()];
  arglist.toArray(argsArray);
  if (ownerClass == Object.class) {
    staticCall.setResolveFailed(true);
    staticCall.setFailure("Resolving on java.lang.Object static call not supported. ");
    return null;
  }
 else   if (ownerClass == null) {
    staticCall.setResolveFailed(true);
    staticCall.setFailure("Resolving on GrovyObject static call not implemented yet. ");
    return null;
  }
 else   if (!isSuperCall && GroovyObject.class.isAssignableFrom(ownerClass)) {
    staticCall.setResolveFailed(true);
    staticCall.setFailure("Resolving on GrovyObject static call not implemented yet. ");
    return null;
  }
 else   if (ownerClass.isPrimitive()) {
    staticCall.setResolveFailed(true);
    staticCall.setFailure("Could not use primitive as method owner");
    return null;
  }
  MetaMethod mmethod=MetaClassRegistry.getIntance(MetaClassRegistry.DONT_LOAD_DEFAULT).getDefinedMethod(ownerClass,meth,argsArray,isStaticCall);
  if (mmethod != null) {
    staticCall.setMetaMethod(mmethod);
  }
 else {
    staticCall.setResolveFailed(true);
    staticCall.setFailure("Could not find MetaMethod in the MetaClass.");
  }
  return mmethod;
}
