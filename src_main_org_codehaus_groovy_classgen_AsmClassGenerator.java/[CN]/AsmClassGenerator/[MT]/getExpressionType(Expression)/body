{
  if (isComparisonExpression(expression)) {
    return ClassHelper.boolean_TYPE;
  }
  if (expression instanceof VariableExpression) {
    if (expression == VariableExpression.THIS_EXPRESSION) {
      return classNode;
    }
 else     if (expression == VariableExpression.SUPER_EXPRESSION) {
      return classNode.getSuperClass();
    }
    VariableExpression varExpr=(VariableExpression)expression;
    Variable variable=compileStack.getVariable(varExpr.getName(),false);
    if (variable != null && !variable.isHolder()) {
      ClassNode type=variable.getType();
      if (!variable.isDynamicTyped())       return type;
    }
    if (variable == null) {
      org.codehaus.groovy.ast.Variable var=(org.codehaus.groovy.ast.Variable)compileStack.getScope().getReferencedClassVariable(varExpr.getName());
      if (var != null && !var.isDynamicTyped())       return var.getType();
    }
  }
  return expression.getType();
}
