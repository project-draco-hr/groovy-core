{
  if (!(cn instanceof InnerClassNode))   return;
  InnerClassNode innerClass=(InnerClassNode)cn;
  String innerClassName=innerClass.getName();
  String innerClassInternalName=BytecodeHelper.getClassInternalName(innerClassName);
{
    int index=innerClassName.lastIndexOf('$');
    if (index >= 0)     innerClassName=innerClassName.substring(index + 1);
  }
  String outerClassName=BytecodeHelper.getClassInternalName(innerClass.getOuterClass().getName());
  MethodNode enclosingMethod=innerClass.getEnclosingMethod();
  if (enclosingMethod != null) {
    outerClassName=null;
    innerClassName=null;
  }
  int mods=adjustedClassModifiersForInnerClassTable(cn);
  if (Modifier.isPrivate(mods)) {
    mods=mods ^ Modifier.PRIVATE;
    innerClass.setModifiers(mods);
  }
  cv.visitInnerClass(innerClassInternalName,outerClassName,innerClassName,mods);
}
