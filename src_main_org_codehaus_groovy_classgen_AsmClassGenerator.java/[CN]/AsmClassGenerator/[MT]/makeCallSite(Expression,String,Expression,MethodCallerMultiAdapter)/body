{
  mv.visitMethodInsn(INVOKESTATIC,internalClassName,"$getCallSiteArray","()Lorg/codehaus/groovy/runtime/CallSiteArray;");
  mv.visitLdcInsn(new Integer(allocateIndex()));
  mv.visitLdcInsn(message);
  boolean lhs=leftHandExpression;
  leftHandExpression=false;
  boolean oldVal=this.implicitThis;
  this.implicitThis=false;
  visitAndAutoboxBoolean(receiver);
  this.implicitThis=oldVal;
  boolean containsSpreadExpression=containsSpreadExpression(arguments);
  int numberOfArguments=containsSpreadExpression ? -1 : argumentSize(arguments);
  if (numberOfArguments > adapter.MAX_ARGS || containsSpreadExpression) {
    ArgumentListExpression ae;
    if (arguments instanceof ArgumentListExpression) {
      ae=(ArgumentListExpression)arguments;
    }
 else     if (arguments instanceof TupleExpression) {
      TupleExpression te=(TupleExpression)arguments;
      ae=new ArgumentListExpression(te.getExpressions());
    }
 else {
      ae=new ArgumentListExpression();
      ae.addExpression(arguments);
    }
    if (containsSpreadExpression) {
      despreadList(ae.getExpressions(),true);
    }
 else {
      ae.visit(this);
    }
  }
 else   if (numberOfArguments > 0) {
    TupleExpression te=(TupleExpression)arguments;
    for (int i=0; i < numberOfArguments; i++) {
      Expression argument=te.getExpression(i);
      visitAndAutoboxBoolean(argument);
      if (argument instanceof CastExpression)       loadWrapper(argument);
    }
  }
  mv.visitMethodInsn(INVOKEVIRTUAL,"org/codehaus/groovy/runtime/CallSiteArray","call","(ILjava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
  leftHandExpression=lhs;
}
