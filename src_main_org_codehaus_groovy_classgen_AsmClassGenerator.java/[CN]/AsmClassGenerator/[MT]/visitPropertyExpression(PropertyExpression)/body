{
  Expression objectExpression=expression.getObjectExpression();
  OperandStack operandStack=controller.getOperandStack();
  int mark=operandStack.getStackLength() - 1;
  MethodCallerMultiAdapter adapter;
  if (controller.getCompileStack().isLHS()) {
    adapter=setProperty;
    if (isGroovyObject(objectExpression))     adapter=setGroovyObjectProperty;
    if (controller.isStaticContext() && isThisOrSuper(objectExpression))     adapter=setProperty;
  }
 else {
    adapter=getProperty;
    if (isGroovyObject(objectExpression))     adapter=getGroovyObjectProperty;
    if (controller.isStaticContext() && isThisOrSuper(objectExpression))     adapter=getProperty;
  }
  visitAttributeOrProperty(expression,adapter);
  if (controller.getCompileStack().isLHS()) {
    operandStack.remove(operandStack.getStackLength() - mark);
  }
 else {
    controller.getAssertionWriter().record(expression.getProperty());
  }
}
