{
  final int size=adapterMethods.size();
  for (int i=0; i < size; i++) {
    MethodNode m=(MethodNode)adapterMethods.get(i);
    MethodVisitor mv=cv.visitMethod(ACC_PRIVATE + ACC_SYNTHETIC + ACC_STATIC,"$ma$" + i,"(Lorg/codehaus/groovy/runtime/callsite/CallSite;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,1);
    mv.visitVarInsn(ALOAD,2);
    mv.visitMethodInsn(INVOKESTATIC,internalClassName,"$get$ma$" + i,"()[Ljava/lang/Class;");
    mv.visitMethodInsn(INVOKEVIRTUAL,"org/codehaus/groovy/runtime/callsite/CallSite","acceptCurrentTyped","(Ljava/lang/Object;[Ljava/lang/Object;[Ljava/lang/Class;)Lorg/codehaus/groovy/runtime/callsite/CallSite;");
    mv.visitInsn(DUP);
    Label l=new Label();
    mv.visitJumpInsn(IFNONNULL,l);
    mv.visitInsn(POP);
    BytecodeHelper helper=new BytecodeHelper(mv);
    mv.visitVarInsn(ALOAD,1);
    helper.doCast(m.getDeclaringClass());
    final Parameter[] parameters=m.getParameters();
    int plen=parameters.length;
    for (int k=0; k < plen; k++) {
      mv.visitVarInsn(ALOAD,2);
      helper.pushConstant(k);
      mv.visitInsn(AALOAD);
      ClassNode type=parameters[k].getType();
      if (ClassHelper.isPrimitiveType(type)) {
        helper.unbox(type);
      }
 else {
        helper.doCast(type);
      }
    }
    mv.visitMethodInsn(INVOKEVIRTUAL,BytecodeHelper.getClassInternalName(m.getDeclaringClass()),m.getName(),BytecodeHelper.getMethodDescriptor(m.getReturnType(),m.getParameters()));
    if (m.getReturnType().equals(ClassHelper.VOID_TYPE))     mv.visitInsn(ACONST_NULL);
    mv.visitInsn(ARETURN);
    mv.visitLabel(l);
    mv.visitVarInsn(ALOAD,1);
    mv.visitVarInsn(ALOAD,2);
    mv.visitMethodInsn(INVOKEVIRTUAL,"org/codehaus/groovy/runtime/callsite/CallSite","invoke","(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
    mv.visitInsn(ARETURN);
    mv.visitMaxs(0,0);
    mv.visitEnd();
    FieldVisitor fv=cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_SYNTHETIC,"$ma$" + i,"[Ljava/lang/Class;",null,null);
    fv.visitEnd();
    mv=cv.visitMethod(ACC_PRIVATE + ACC_STATIC + ACC_SYNTHETIC,"$get$ma$" + i,"()[Ljava/lang/Class;",null,null);
    mv.visitCode();
    mv.visitFieldInsn(GETSTATIC,internalClassName,"$ma$" + i,"[Ljava/lang/Class;");
    mv.visitInsn(DUP);
    Label l0=new Label();
    mv.visitJumpInsn(IFNONNULL,l0);
    mv.visitInsn(POP);
    mv.visitLdcInsn(Integer.valueOf(plen + 1));
    mv.visitTypeInsn(ANEWARRAY,"java/lang/Class");
    mv.visitInsn(DUP);
    mv.visitLdcInsn(Integer.valueOf(0));
    mv.visitLdcInsn(BytecodeHelper.getClassLoadingTypeDescription(m.getDeclaringClass()));
    mv.visitMethodInsn(INVOKESTATIC,internalClassName,"class$","(Ljava/lang/String;)Ljava/lang/Class;");
    mv.visitInsn(AASTORE);
    for (int j=0; j < plen; j++) {
      mv.visitInsn(DUP);
      mv.visitLdcInsn(Integer.valueOf(j + 1));
      mv.visitLdcInsn(BytecodeHelper.getClassLoadingTypeDescription(m.getParameters()[j].getType()));
      mv.visitMethodInsn(INVOKESTATIC,internalClassName,"class$","(Ljava/lang/String;)Ljava/lang/Class;");
      mv.visitInsn(AASTORE);
    }
    mv.visitInsn(DUP);
    mv.visitFieldInsn(PUTSTATIC,internalClassName,"$ma$" + i,"[Ljava/lang/Class;");
    mv.visitLabel(l0);
    mv.visitInsn(ARETURN);
    mv.visitMaxs(0,0);
    mv.visitEnd();
  }
}
