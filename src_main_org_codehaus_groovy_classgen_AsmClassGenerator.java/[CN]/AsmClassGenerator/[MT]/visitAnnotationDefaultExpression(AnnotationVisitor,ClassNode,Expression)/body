{
  if (type.isArray()) {
    ListExpression list=(ListExpression)exp;
    AnnotationVisitor avl=av.visitArray(null);
    ClassNode componentType=type.getComponentType();
    for (Iterator it=list.getExpressions().iterator(); it.hasNext(); ) {
      Expression lExp=(Expression)it.next();
      visitAnnotationDefaultExpression(avl,componentType,lExp);
    }
  }
 else   if (ClassHelper.isPrimitiveType(type) || type.equals(ClassHelper.STRING_TYPE)) {
    ConstantExpression constExp=(ConstantExpression)exp;
    av.visit(null,constExp.getValue());
  }
 else   if (ClassHelper.CLASS_Type == type) {
    ClassExpression cexp=(ClassExpression)exp;
    ClassNode clazz=exp.getType();
    Type t=Type.getType(BytecodeHelper.getClassInternalName(clazz));
    av.visit(null,t);
  }
 else   if (type.isDerivedFrom(ClassHelper.Enum_Type)) {
    PropertyExpression pExp=(PropertyExpression)exp;
    ClassExpression cExp=(ClassExpression)pExp.getObjectExpression();
    String desc=BytecodeHelper.getClassInternalName(cExp.getType());
    String name=pExp.getPropertyAsString();
    av.visitEnum(null,desc,name);
  }
 else   if (type.implementsInterface("java.lang.annotation.Annotation")) {
    AnnotationConstantExpression avExp=(AnnotationConstantExpression)exp;
    AnnotationVisitor avc=av.visitAnnotation(null,BytecodeHelper.getClassInternalName(avExp.getType()));
    visitAnnotationDefaultExpression(avc,avExp.getType(),avExp);
  }
 else {
    throw new GroovyBugError("unexpected annotation type " + type.getName());
  }
  av.visitEnd();
}
