{
  ClassNode innerClass=createClosureClass(expression);
  addInnerClass(innerClass);
  String innerClassinternalName=BytecodeHelper.getClassInternalName(innerClass.getType());
  ClassNode owner=innerClass.getOuterClass();
  Type ownerType=owner.getType();
  passingClosureParams=true;
  List constructors=innerClass.getDeclaredConstructors();
  ConstructorNode node=(ConstructorNode)constructors.get(0);
  Parameter[] localVariableParams=node.getParameters();
  for (int i=2; i < localVariableParams.length; i++) {
    Parameter param=localVariableParams[i];
    String name=param.getName();
    if (variableStack.get(name) == null && classNode.getField(name) == null) {
      defineVariable(name,Type.OBJECT_TYPE);
    }
  }
  cv.visitTypeInsn(NEW,innerClassinternalName);
  cv.visitInsn(DUP);
  if (isStaticMethod() || classNode.isStaticClass()) {
    visitClassExpression(new ClassExpression(ownerType));
  }
 else {
    loadThisOrOwner();
  }
  if (innerClass.getSuperClass() == Type.CLOSURE_TYPE) {
    if (isStaticMethod()) {
      visitClassExpression(new ClassExpression(ownerType));
    }
 else {
      cv.visitVarInsn(ALOAD,0);
    }
  }
  for (int i=2; i < localVariableParams.length; i++) {
    Parameter param=localVariableParams[i];
    String name=param.getName();
    if (variableStack.get(name) == null) {
      visitFieldExpression(new FieldExpression(classNode.getField(name)));
    }
 else {
      visitVariableExpression(new VariableExpression(name));
    }
  }
  passingClosureParams=false;
  cv.visitMethodInsn(INVOKESPECIAL,innerClassinternalName,"<init>",BytecodeHelper.getMethodDescriptor("void",localVariableParams));
}
