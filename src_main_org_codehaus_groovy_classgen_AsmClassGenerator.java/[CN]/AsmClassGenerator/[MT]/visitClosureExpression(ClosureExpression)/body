{
  ClassNode innerClass=createClosureClass(expression);
  addInnerClass(innerClass);
  String innerClassinternalName=BytecodeHelper.getClassInternalName(innerClass);
  passingClosureParams=true;
  List constructors=innerClass.getDeclaredConstructors();
  ConstructorNode node=(ConstructorNode)constructors.get(0);
  Parameter[] localVariableParams=node.getParameters();
  cv.visitTypeInsn(NEW,innerClassinternalName);
  cv.visitInsn(DUP);
  if (isStaticMethod() || classNode.isStaticClass()) {
    visitClassExpression(new ClassExpression(classNode));
  }
 else {
    cv.visitVarInsn(ALOAD,0);
  }
  for (int i=1; i < localVariableParams.length; i++) {
    Parameter param=localVariableParams[i];
    String name=param.getName();
    if (!compileStack.containsVariable(name) && compileStack.getScope().isReferencedClassVariable(name)) {
      visitFieldExpression(new FieldExpression(classNode.getField(name)));
    }
 else {
      Variable v=compileStack.getVariable(name,classNode.getSuperClass() != ClassHelper.CLOSURE_TYPE);
      if (v == null) {
        FieldNode field=classNode.getField(name);
        cv.visitVarInsn(ALOAD,0);
        cv.visitFieldInsn(GETFIELD,internalClassName,name,BytecodeHelper.getTypeDescription(field.getType()));
        param.setClosureSharedVariable(false);
        v=compileStack.defineVariable(param,true);
        param.setClosureSharedVariable(true);
        v.setHolder(true);
      }
      cv.visitVarInsn(ALOAD,v.getIndex());
    }
  }
  passingClosureParams=false;
  cv.visitMethodInsn(INVOKESPECIAL,innerClassinternalName,"<init>",BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE,localVariableParams));
}
