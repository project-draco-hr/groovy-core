{
  ClassNode innerClass=(ClassNode)closureClassMap.get(expression);
  if (innerClass == null) {
    innerClass=createClosureClass(expression);
    closureClassMap.put(expression,innerClass);
    addInnerClass(innerClass);
    innerClass.addInterface(ClassHelper.GENERATED_CLOSURE_Type);
  }
  String innerClassinternalName=BytecodeHelper.getClassInternalName(innerClass);
  passingParams=true;
  List constructors=innerClass.getDeclaredConstructors();
  ConstructorNode node=(ConstructorNode)constructors.get(0);
  Parameter[] localVariableParams=node.getParameters();
  mv.visitTypeInsn(NEW,innerClassinternalName);
  mv.visitInsn(DUP);
  if ((isStaticMethod() || specialCallWithinConstructor) && !classNode.declaresInterface(ClassHelper.GENERATED_CLOSURE_Type)) {
    visitClassExpression(new ClassExpression(classNode));
    visitClassExpression(new ClassExpression(getOutermostClass()));
  }
 else {
    mv.visitVarInsn(ALOAD,0);
    loadThis();
  }
  for (int i=2; i < localVariableParams.length; i++) {
    Parameter param=localVariableParams[i];
    String name=param.getName();
    if (!compileStack.containsVariable(name) && compileStack.getScope().isReferencedClassVariable(name)) {
      visitFieldExpression(new FieldExpression(classNode.getDeclaredField(name)));
    }
 else {
      Variable v=compileStack.getVariable(name,!classNodeUsesReferences());
      if (v == null) {
        FieldNode field=classNode.getDeclaredField(name);
        mv.visitVarInsn(ALOAD,0);
        mv.visitFieldInsn(GETFIELD,internalClassName,name,BytecodeHelper.getTypeDescription(field.getType()));
        param.setClosureSharedVariable(false);
        v=compileStack.defineVariable(param,true);
        param.setClosureSharedVariable(true);
        v.setHolder(true);
      }
      mv.visitVarInsn(ALOAD,v.getIndex());
    }
  }
  passingParams=false;
  mv.visitMethodInsn(INVOKESPECIAL,innerClassinternalName,"<init>",BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE,localVariableParams));
}
