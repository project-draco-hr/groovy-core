{
  MethodVisitor mv=controller.getMethodVisitor();
  Expression objectExpression=expression.getObjectExpression();
  ClassNode classNode=controller.getClassNode();
  if (isThisOrSuper(objectExpression)) {
    String name=expression.getPropertyAsString();
    if (name != null) {
      FieldNode field=null;
      boolean privateSuperField=false;
      if (isSuperExpression(objectExpression)) {
        field=classNode.getSuperClass().getDeclaredField(name);
        if (field != null && ((field.getModifiers() & ACC_PRIVATE) != 0)) {
          privateSuperField=true;
        }
      }
 else {
        if (controller.isNotExplicitThisInClosure(expression.isImplicitThis())) {
          field=classNode.getDeclaredField(name);
          if (field == null && classNode instanceof InnerClassNode) {
            ClassNode outer=classNode.getOuterClass();
            FieldNode outerClassField;
            while (outer != null) {
              outerClassField=outer.getDeclaredField(name);
              if (outerClassField != null && outerClassField.isStatic() && outerClassField.isFinal()) {
                if (outer != classNode.getOuterClass() && Modifier.isPrivate(outerClassField.getModifiers())) {
                  throw new GroovyBugError("Trying to access private constant field [" + outerClassField.getDeclaringClass() + "#"+ outerClassField.getName()+ "] from inner class");
                }
                PropertyExpression pexp=new PropertyExpression(new ClassExpression(outer),expression.getProperty());
                pexp.visit(controller.getAcg());
                return;
              }
              outer=outer.getSuperClass();
            }
          }
          if (field == null && expression instanceof AttributeExpression && isThisExpression(objectExpression) && controller.isStaticContext()) {
            ClassNode current=classNode.getSuperClass();
            while (field == null && current != null) {
              field=current.getDeclaredField(name);
              current=current.getSuperClass();
            }
            if (field != null && (field.isProtected() || field.isPublic())) {
              visitFieldExpression(new FieldExpression(field));
              return;
            }
          }
        }
      }
      if (field != null && !privateSuperField) {
        visitFieldExpression(new FieldExpression(field));
        return;
      }
    }
    if (isSuperExpression(objectExpression)) {
      String prefix;
      if (controller.getCompileStack().isLHS()) {
        prefix="set";
      }
 else {
        prefix="get";
      }
      String propName=prefix + MetaClassHelper.capitalize(name);
      visitMethodCallExpression(new MethodCallExpression(objectExpression,propName,MethodCallExpression.NO_ARGUMENTS));
      return;
    }
  }
  final String propName=expression.getPropertyAsString();
  if (expression.getObjectExpression() instanceof ClassExpression && propName != null && propName.equals("this")) {
    ClassNode type=objectExpression.getType();
    ClassNode iterType=classNode;
    if (controller.getCompileStack().isInSpecialConstructorCall() && classNode instanceof InnerClassNode) {
      boolean staticInnerClass=classNode.isStaticClass();
      if (classNode.getOuterClass().equals(type)) {
        ConstructorNode ctor=controller.getConstructorNode();
        Expression receiver=!staticInnerClass ? new VariableExpression(ctor.getParameters()[0]) : new ClassExpression(type);
        receiver.setSourcePosition(expression);
        receiver.visit(this);
        return;
      }
    }
    mv.visitVarInsn(ALOAD,0);
    while (!iterType.equals(type)) {
      String ownerName=BytecodeHelper.getClassInternalName(iterType);
      if (iterType.getOuterClass() == null)       break;
      iterType=iterType.getOuterClass();
      String typeName=BytecodeHelper.getTypeDescription(iterType);
      mv.visitFieldInsn(GETFIELD,ownerName,"this$0",typeName);
    }
    controller.getOperandStack().push(type);
    return;
  }
  if (adapter == getProperty && !expression.isSpreadSafe() && propName != null) {
    controller.getCallSiteWriter().makeGetPropertySite(objectExpression,propName,expression.isSafe(),expression.isImplicitThis());
  }
 else   if (adapter == getGroovyObjectProperty && !expression.isSpreadSafe() && propName != null) {
    controller.getCallSiteWriter().makeGroovyObjectGetPropertySite(objectExpression,propName,expression.isSafe(),expression.isImplicitThis());
  }
 else {
    if (controller.getCompileStack().isLHS())     controller.getOperandStack().box();
    controller.getInvocationWriter().makeCall(expression,objectExpression,new CastExpression(ClassHelper.STRING_TYPE,expression.getProperty()),MethodCallExpression.NO_ARGUMENTS,adapter,expression.isSafe(),expression.isSpreadSafe(),expression.isImplicitThis());
  }
}
