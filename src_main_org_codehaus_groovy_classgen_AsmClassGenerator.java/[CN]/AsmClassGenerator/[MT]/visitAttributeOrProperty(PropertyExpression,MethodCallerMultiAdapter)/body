{
  Expression objectExpression=expression.getObjectExpression();
  if (isThisOrSuper(objectExpression)) {
    String name=expression.getPropertyAsString();
    if (name != null) {
      FieldNode field=null;
      if (isSuperExpression(objectExpression)) {
        field=classNode.getSuperClass().getDeclaredField(name);
      }
 else {
        if (isNotExplicitThisInClosure(expression.isImplicitThis())) {
          field=classNode.getDeclaredField(name);
        }
      }
      if (field != null) {
        visitFieldExpression(new FieldExpression(field));
        return;
      }
    }
    if (isSuperExpression(objectExpression)) {
      String prefix;
      if (leftHandExpression) {
        prefix="set";
      }
 else {
        prefix="get";
      }
      String propName=prefix + MetaClassHelper.capitalize(name);
      visitMethodCallExpression(new MethodCallExpression(objectExpression,propName,MethodCallExpression.NO_ARGUMENTS));
      return;
    }
  }
  final String propName=expression.getPropertyAsString();
  if (expression.getObjectExpression() instanceof ClassExpression && propName != null && propName.equals("this")) {
    ClassNode type=expression.getObjectExpression().getType();
    ClassNode iterType=classNode;
    mv.visitVarInsn(ALOAD,0);
    while (!iterType.equals(type)) {
      String ownerName=BytecodeHelper.getClassInternalName(iterType);
      iterType=iterType.getOuterClass();
      String typeName=BytecodeHelper.getTypeDescription(iterType);
      mv.visitFieldInsn(GETFIELD,ownerName,"this$0",typeName);
    }
    return;
  }
  if (adapter == getProperty && !expression.isSpreadSafe() && propName != null) {
    makeGetPropertySite(objectExpression,propName,expression.isSafe(),expression.isImplicitThis());
  }
 else {
    if (adapter == getGroovyObjectProperty && !expression.isSpreadSafe() && propName != null) {
      makeGroovyObjectGetPropertySite(objectExpression,propName,expression.isSafe(),expression.isImplicitThis());
    }
 else {
      makeCall(objectExpression,new CastExpression(ClassHelper.STRING_TYPE,expression.getProperty()),MethodCallExpression.NO_ARGUMENTS,adapter,expression.isSafe(),expression.isSpreadSafe(),expression.isImplicitThis());
    }
  }
}
