{
  String variableName=expression.getName();
  if (isStaticMethod() && variableName.equals("this")) {
    visitClassExpression(new ClassExpression(classNode.getType()));
    return;
  }
  if (variableName.equals("super")) {
    visitClassExpression(new ClassExpression(classNode.getSuperClass()));
    return;
  }
  boolean handled=false;
  Variable variable=(Variable)variableStack.get(variableName);
  if (variable != null) {
    if (variable.isProperty()) {
      processPropertyVariable(variable);
    }
 else {
      processStackVariable(variable);
    }
    handled=true;
  }
 else {
    int steps=0;
    ClassNode currentClassNode=classNode;
    FieldNode field=null;
    do {
      if ((field=currentClassNode.getField(variableName)) != null) {
        if (methodNode == null || !methodNode.isStatic() || field.isStatic())         break;
      }
      steps++;
    }
 while ((currentClassNode=currentClassNode.getOuterClass()) != null);
    if (field != null) {
      processFieldAccess(variableName,field,steps);
      handled=true;
    }
  }
  if (!handled && !variableName.equals("this")) {
    Type classType=classNode.resolveClassName(Type.makeType(variableName));
    if (classType != null) {
      if (leftHandExpression) {
        throwException("The variable name '" + variableName + "' conflicts with the class name '"+ classType.getName()+ "'. Please use another variable name");
      }
      visitClassExpression(new ClassExpression(classType));
      return;
    }
  }
  if (!handled) {
    Type variableType=expression.getType();
    variable=defineVariable(variableName,variableType);
    if (leftHandExpression && variableType.isDynamic()) {
      variable.setDynamic(true);
    }
 else {
      variable.setDynamic(false);
    }
    if (isInScriptBody() || !leftHandExpression) {
      variable.setProperty(true);
      processPropertyVariable(variable);
    }
 else {
      processStackVariable(variable);
    }
  }
}
