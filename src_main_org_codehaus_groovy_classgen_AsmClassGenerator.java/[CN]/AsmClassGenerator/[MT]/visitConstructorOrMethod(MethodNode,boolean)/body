{
  String methodType=BytecodeHelper.getMethodDescriptor(node.getReturnType(),node.getParameters());
  cv=cw.visitMethod(node.getModifiers(),node.getName(),methodType,null,buildExceptions(node.getExceptions()));
  visitAnnotations(node,cv);
  helper=new BytecodeHelper(cv);
  if (!node.isAbstract()) {
    Statement code=node.getCode();
    if (isConstructor && (code == null || !firstStatementIsSpecialConstructorCall(node))) {
      cv.visitVarInsn(ALOAD,0);
      cv.visitMethodInsn(INVOKESPECIAL,BytecodeHelper.getClassInternalName(classNode.getSuperClass()),"<init>","()V");
    }
    compileStack.init(node.getVariableScope(),node.getParameters(),cv,classNode);
    if (node.getName().equals("<clinit>")) {
      String internalClassName=this.internalClassName;
      if (classNode.isInterface()) {
        internalClassName=BytecodeHelper.getClassInternalName(interfaceClassLoadingClass);
      }
      cv.visitLdcInsn(BytecodeHelper.getClassLoadingTypeDescription(classNode));
      cv.visitMethodInsn(INVOKESTATIC,internalClassName,"class$","(Ljava/lang/String;)Ljava/lang/Class;");
      cv.visitInsn(DUP);
      cv.visitFieldInsn(PUTSTATIC,internalClassName,"class$0","Ljava/lang/Class;");
      cv.visitLdcInsn(BytecodeHelper.getClassLoadingTypeDescription(ClassHelper.METACLASS_TYPE));
      cv.visitMethodInsn(INVOKESTATIC,internalClassName,"class$","(Ljava/lang/String;)Ljava/lang/Class;");
      cv.visitInsn(DUP);
      String mclassName=getStaticFieldName(ClassHelper.METACLASS_TYPE);
      cv.visitFieldInsn(PUTSTATIC,internalClassName,mclassName,"Ljava/lang/Class;");
      syntheticStaticFields.add("class$0");
      syntheticStaticFields.add(mclassName);
    }
 else {
      (new ClassExpression(classNode)).visit(this);
      cv.visitInsn(POP);
      (new ClassExpression(ClassHelper.METACLASS_TYPE)).visit(this);
      cv.visitInsn(POP);
    }
    super.visitConstructorOrMethod(node,isConstructor);
    if (!outputReturn || node.isVoidMethod()) {
      cv.visitInsn(RETURN);
    }
    compileStack.clear();
    for (Iterator iter=exceptionBlocks.iterator(); iter.hasNext(); ) {
      Runnable runnable=(Runnable)iter.next();
      runnable.run();
    }
    exceptionBlocks.clear();
    cv.visitMaxs(0,0);
  }
  cv.visitEnd();
}
