{
  Parameter[] parameters=node.getParameters();
  String methodType=BytecodeHelper.getMethodDescriptor(node.getReturnType(),parameters);
  String signature=BytecodeHelper.getGenericsMethodSignature(node);
  mv=cv.visitMethod(node.getModifiers(),node.getName(),methodType,signature,buildExceptions(node.getExceptions()));
  visitAnnotations(node,mv);
  for (int i=0; i < parameters.length; i++) {
    visitParameterAnnotations(parameters[i],i,mv);
  }
  helper=new BytecodeHelper(mv);
  if (!node.isAbstract()) {
    Statement code=node.getCode();
    if (isConstructor && (code == null || !((ConstructorNode)node).firstStatementIsSpecialConstructorCall())) {
      mv.visitVarInsn(ALOAD,0);
      mv.visitMethodInsn(INVOKESPECIAL,BytecodeHelper.getClassInternalName(classNode.getSuperClass()),"<init>","()V");
    }
    compileStack.init(node.getVariableScope(),parameters,mv,classNode);
    (new ClassExpression(classNode)).visit(this);
    mv.visitInsn(POP);
    (new ClassExpression(ClassHelper.METACLASS_TYPE)).visit(this);
    mv.visitInsn(POP);
    super.visitConstructorOrMethod(node,isConstructor);
    if (!outputReturn || node.isVoidMethod()) {
      mv.visitInsn(RETURN);
    }
    compileStack.clear();
    for (Iterator iter=exceptionBlocks.iterator(); iter.hasNext(); ) {
      Runnable runnable=(Runnable)iter.next();
      runnable.run();
    }
    exceptionBlocks.clear();
    mv.visitMaxs(0,0);
  }
  mv.visitEnd();
}
