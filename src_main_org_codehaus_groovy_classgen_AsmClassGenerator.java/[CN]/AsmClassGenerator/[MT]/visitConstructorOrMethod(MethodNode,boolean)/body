{
  Parameter[] parameters=node.getParameters();
  String methodType=BytecodeHelper.getMethodDescriptor(node.getReturnType(),parameters);
  String signature=BytecodeHelper.getGenericsMethodSignature(node);
  int modifiers=node.getModifiers();
  if (isVargs(node.getParameters()))   modifiers|=Opcodes.ACC_VARARGS;
  mv=cv.visitMethod(modifiers,node.getName(),methodType,signature,buildExceptions(node.getExceptions()));
  mv=new MyMethodAdapter();
  visitAnnotations(node,mv);
  for (int i=0; i < parameters.length; i++) {
    visitParameterAnnotations(parameters[i],i,mv);
  }
  helper=new BytecodeHelper(mv);
  if (classNode.isAnnotationDefinition()) {
    visitAnnotationDefault(node,mv);
  }
 else   if (!node.isAbstract()) {
    Statement code=node.getCode();
    if (code instanceof BytecodeSequence && ((BytecodeSequence)code).getInstructions().size() == 1 && ((BytecodeSequence)code).getInstructions().get(0) instanceof BytecodeInstruction)     ((BytecodeInstruction)((BytecodeSequence)code).getInstructions().get(0)).visit(mv);
 else     visitStdMethod(node,isConstructor,parameters,code);
    mv.visitMaxs(0,0);
  }
  mv.visitEnd();
}
