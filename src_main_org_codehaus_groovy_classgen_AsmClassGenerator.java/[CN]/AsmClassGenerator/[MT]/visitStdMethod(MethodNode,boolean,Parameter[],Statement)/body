{
  final Label tryStart=new Label();
  mv.visitLabel(tryStart);
  if (isConstructor && (code == null || !((ConstructorNode)node).firstStatementIsSpecialConstructorCall())) {
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,BytecodeHelper.getClassInternalName(classNode.getSuperClass()),"<init>","()V");
  }
  compileStack.init(node.getVariableScope(),parameters,mv,classNode);
  if (isNotClinit()) {
    mv.visitMethodInsn(INVOKESTATIC,internalClassName,"$getCallSiteArray","()[Lorg/codehaus/groovy/runtime/callsite/CallSite;");
    callSiteArrayVarIndex=compileStack.defineTemporaryVariable("$local$callSiteArray",ClassHelper.make(CallSite[].class),true);
  }
  super.visitConstructorOrMethod(node,isConstructor);
  if (!outputReturn || node.isVoidMethod()) {
    mv.visitInsn(RETURN);
  }
  compileStack.clear();
  final Label finallyStart=new Label();
  mv.visitJumpInsn(GOTO,finallyStart);
  final Label tryEnd=new Label();
  mv.visitLabel(tryEnd);
  final Label catchStart=new Label();
  mv.visitLabel(catchStart);
  mv.visitMethodInsn(INVOKESTATIC,"org/codehaus/groovy/runtime/ScriptBytecodeAdapter","unwrap","(Lgroovy/lang/GroovyRuntimeException;)Ljava/lang/Throwable;");
  mv.visitInsn(ATHROW);
  mv.visitLabel(finallyStart);
  mv.visitInsn(NOP);
  exceptionBlocks.add(new Runnable(){
    public void run(){
      mv.visitTryCatchBlock(tryStart,tryEnd,catchStart,GRE);
    }
  }
);
  for (Iterator iter=exceptionBlocks.iterator(); iter.hasNext(); ) {
    Runnable runnable=(Runnable)iter.next();
    runnable.run();
  }
  exceptionBlocks.clear();
}
