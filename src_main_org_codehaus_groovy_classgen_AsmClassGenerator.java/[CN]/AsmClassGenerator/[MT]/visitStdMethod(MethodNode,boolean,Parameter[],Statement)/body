{
  if (isConstructor && (code == null || !((ConstructorNode)node).firstStatementIsSpecialConstructorCall())) {
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,BytecodeHelper.getClassInternalName(classNode.getSuperClass()),"<init>","()V");
  }
  compileStack.init(node.getVariableScope(),parameters,mv,classNode);
  if (isNotClinit()) {
    mv.visitMethodInsn(INVOKESTATIC,internalClassName,"$getCallSiteArray","()[Lorg/codehaus/groovy/runtime/callsite/CallSite;");
    callSiteArrayVarIndex=compileStack.defineTemporaryVariable("$local$callSiteArray",ClassHelper.make(CallSite[].class),true);
  }
  super.visitConstructorOrMethod(node,isConstructor);
  if (!outputReturn || node.isVoidMethod()) {
    mv.visitInsn(RETURN);
  }
  compileStack.clear();
  final Label finallyStart=new Label();
  mv.visitJumpInsn(GOTO,finallyStart);
  for (Iterator iter=exceptionBlocks.iterator(); iter.hasNext(); ) {
    Runnable runnable=(Runnable)iter.next();
    runnable.run();
  }
  exceptionBlocks.clear();
}
