{
class Key {
    int hash=0;
    String name;
    Parameter[] params;
    Key(    String name,    Parameter[] params){
      this.name=name;
      this.params=params;
      hash=name.hashCode() << 2 + params.length;
    }
    public int hashCode(){
      return hash;
    }
    public boolean equals(    Object obj){
      Key other=(Key)obj;
      return other.name.equals(name) && equalParameterTypes(other.params,params);
    }
  }
  HashMap<Key,MethodNode> mops=new HashMap<Key,MethodNode>();
  LinkedList<MethodNode> mopCalls=new LinkedList<MethodNode>();
  for (  Object method : methods) {
    MethodNode mn=(MethodNode)method;
    if ((mn.getModifiers() & ACC_ABSTRACT) != 0)     continue;
    if (mn.isStatic())     continue;
    if (isThis ^ (mn.getModifiers() & (ACC_PUBLIC | ACC_PROTECTED)) == 0)     continue;
    String methodName=mn.getName();
    if (isMopMethod(methodName)) {
      mops.put(new Key(methodName,mn.getParameters()),mn);
      continue;
    }
    if (methodName.startsWith("<"))     continue;
    String name=getMopMethodName(mn,isThis);
    Key key=new Key(name,mn.getParameters());
    if (mops.containsKey(key))     continue;
    mops.put(key,mn);
    mopCalls.add(mn);
  }
  generateMopCalls(mopCalls,isThis);
  mopCalls.clear();
  mops.clear();
}
