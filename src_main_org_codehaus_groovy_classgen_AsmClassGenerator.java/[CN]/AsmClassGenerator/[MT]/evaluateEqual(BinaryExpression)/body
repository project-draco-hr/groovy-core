{
  Expression leftExpression=expression.getLeftExpression();
  if (leftExpression instanceof BinaryExpression) {
    BinaryExpression leftBinExpr=(BinaryExpression)leftExpression;
    if (leftBinExpr.getOperation().getType() == Types.LEFT_SQUARE_BRACKET) {
      final Expression right=expression.getRightExpression();
      visitAndAutoboxBoolean(right);
      final int rhsVar=compileStack.defineTemporaryVariable("$rhs",right.getType(),true);
      Expression rhsExpr=new BytecodeExpression(){
        public void visit(        MethodVisitor mv){
          mv.visitVarInsn(ALOAD,rhsVar);
        }
      }
;
      visitMethodCallExpression(new MethodCallExpression(leftBinExpr.getLeftExpression(),"putAt",new ArgumentListExpression(new Expression[]{leftBinExpr.getRightExpression(),rhsExpr})));
      mv.visitInsn(POP);
      mv.visitVarInsn(ALOAD,rhsVar);
      compileStack.removeVar(rhsVar);
      return;
    }
  }
  Expression rightExpression=expression.getRightExpression();
  ClassNode type=getLHSType(leftExpression);
  if (ClassHelper.isPrimitiveType(type)) {
    visitAndAutoboxBoolean(rightExpression);
  }
 else   if (!rightExpression.getType().isDerivedFrom(type)) {
    visitCastExpression(new CastExpression(type,rightExpression));
  }
 else {
    visitAndAutoboxBoolean(rightExpression);
  }
  rightHandType=rightExpression.getType();
  leftHandExpression=true;
  if (leftExpression instanceof TupleExpression) {
    TupleExpression tuple=(TupleExpression)leftExpression;
    int i=0;
    Expression lhsExpr=new BytecodeExpression(){
      public void visit(      MethodVisitor mv){
        mv.visitInsn(SWAP);
        mv.visitInsn(DUP_X1);
      }
    }
;
    for (Iterator iterator=tuple.getExpressions().iterator(); iterator.hasNext(); ) {
      VariableExpression var=(VariableExpression)iterator.next();
      visitMethodCallExpression(new MethodCallExpression(lhsExpr,"getAt",new ArgumentListExpression(new ConstantExpression(new Integer(i)))));
      i++;
      visitVariableExpression(var);
    }
  }
 else {
    mv.visitInsn(DUP);
    leftExpression.visit(this);
  }
  rightHandType=null;
  leftHandExpression=false;
}
