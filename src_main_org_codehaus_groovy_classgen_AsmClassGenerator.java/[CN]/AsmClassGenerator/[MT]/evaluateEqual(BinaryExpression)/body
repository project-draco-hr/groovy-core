{
  Expression leftExpression=expression.getLeftExpression();
  if (leftExpression instanceof BinaryExpression) {
    BinaryExpression leftBinExpr=(BinaryExpression)leftExpression;
    if (leftBinExpr.getOperation().getType() == Types.LEFT_SQUARE_BRACKET) {
      visitMethodCallExpression(new MethodCallExpression(leftBinExpr.getLeftExpression(),"putAt",new ArgumentListExpression(new Expression[]{leftBinExpr.getRightExpression(),expression.getRightExpression()})));
      return;
    }
  }
  Expression rightExpression=expression.getRightExpression();
  ClassNode type=getLHSType(leftExpression);
  if (ClassHelper.isPrimitiveType(type)) {
    visitAndAutoboxBoolean(rightExpression);
  }
 else   if (!rightExpression.getType().isDerivedFrom(type)) {
    visitCastExpression(new CastExpression(type,rightExpression));
  }
 else {
    visitAndAutoboxBoolean(rightExpression);
  }
  mv.visitInsn(DUP);
  leftHandExpression=true;
  rightHandType=rightExpression.getType();
  leftExpression.visit(this);
  rightHandType=null;
  leftHandExpression=false;
}
