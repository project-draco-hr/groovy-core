{
  final ModuleNode ast=source.getAST();
  if (!isPackageAllowed && ast.getPackage() != null) {
    throw new SecurityException("Package definitions are not allowed");
  }
  checkMethodDefinitionAllowed(classNode);
  if (importsBlacklist != null || importsWhitelist != null || starImportsBlacklist != null || starImportsWhitelist != null) {
    for (    ImportNode importNode : ast.getImports()) {
      final String className=importNode.getClassName();
      assertImportIsAllowed(className);
    }
    for (    ImportNode importNode : ast.getStarImports()) {
      final String className=importNode.getPackageName();
      assertStarImportIsAllowed(className + "*");
    }
  }
  if (staticImportsBlacklist != null || staticImportsWhitelist != null || staticStarImportsBlacklist != null || staticStarImportsWhitelist != null) {
    for (    Map.Entry<String,ImportNode> entry : ast.getStaticImports().entrySet()) {
      final String className=entry.getValue().getClassName();
      assertStaticImportIsAllowed(entry.getKey(),className);
    }
    for (    Map.Entry<String,ImportNode> entry : ast.getStaticStarImports().entrySet()) {
      final String className=entry.getValue().getClassName();
      assertStaticImportIsAllowed(entry.getKey(),className);
    }
  }
  final SecuringCodeVisitor visitor=new SecuringCodeVisitor();
  ast.getStatementBlock().visit(visitor);
  for (  ClassNode clNode : ast.getClasses()) {
    if (clNode != classNode) {
      checkMethodDefinitionAllowed(clNode);
      for (      MethodNode methodNode : clNode.getMethods()) {
        if (!methodNode.isSynthetic()) {
          methodNode.getCode().visit(visitor);
        }
      }
    }
  }
  List<MethodNode> methods=filterMethods(classNode);
  if (isMethodDefinitionAllowed) {
    for (    MethodNode method : methods) {
      if (method.getDeclaringClass() == classNode)       method.getCode().visit(visitor);
    }
  }
}
