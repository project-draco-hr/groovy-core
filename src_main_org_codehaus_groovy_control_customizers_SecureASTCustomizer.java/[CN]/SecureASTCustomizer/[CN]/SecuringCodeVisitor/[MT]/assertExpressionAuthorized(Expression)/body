{
  final Class<? extends Expression> clazz=expression.getClass();
  if (expressionsBlacklist != null && expressionsBlacklist.contains(clazz)) {
    throw new SecurityException(clazz.getSimpleName() + "s are not allowed");
  }
 else   if (expressionsWhitelist != null && !expressionsWhitelist.contains(clazz)) {
    throw new SecurityException(clazz.getSimpleName() + "s are not allowed");
  }
  for (  ExpressionChecker expressionChecker : expressionCheckers) {
    if (!expressionChecker.isAuthorized(expression)) {
      throw new SecurityException("Expression [" + clazz.getSimpleName() + "] is not allowed");
    }
  }
  if (isIndirectImportCheckEnabled) {
    try {
      if (expression instanceof ConstructorCallExpression) {
        assertImportIsAllowed(expression.getType().getName());
      }
 else       if (expression instanceof MethodCallExpression) {
        MethodCallExpression expr=(MethodCallExpression)expression;
        final String typename=expr.getObjectExpression().getType().getName();
        assertImportIsAllowed(typename);
        assertStaticImportIsAllowed(expr.getMethodAsString(),typename);
      }
 else       if (expression instanceof StaticMethodCallExpression) {
        StaticMethodCallExpression expr=(StaticMethodCallExpression)expression;
        final String typename=expr.getOwnerType().getName();
        assertImportIsAllowed(typename);
        assertStaticImportIsAllowed(expr.getMethod(),typename);
      }
 else       if (expression instanceof MethodPointerExpression) {
        MethodPointerExpression expr=(MethodPointerExpression)expression;
        final String typename=expr.getType().getName();
        assertImportIsAllowed(typename);
        assertStaticImportIsAllowed(expr.getText(),typename);
      }
    }
 catch (    SecurityException e) {
      throw new SecurityException("Indirect import checks prevents usage of expression",e);
    }
  }
}
