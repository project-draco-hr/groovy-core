{
  GroovyClassLoader transformLoader=compilationUnit.getTransformLoader();
  LinkedHashMap<String,URL> globalTransformNames=new LinkedHashMap<String,URL>();
  try {
    Enumeration<URL> globalServices=transformLoader.getResources("META-INF/services/org.codehaus.groovy.transform.ASTTransformation");
    while (globalServices.hasMoreElements()) {
      URL service=globalServices.nextElement();
      String className;
      BufferedReader svcIn=new BufferedReader(new InputStreamReader(service.openStream()));
      try {
        className=svcIn.readLine();
      }
 catch (      IOException ioe) {
        compilationUnit.getErrorCollector().addError(new SimpleMessage("IOException reading the service definition at " + service.toExternalForm() + " because of exception "+ ioe.toString(),null));
        continue;
      }
      while (className != null) {
        if (!className.startsWith("#") && className.length() > 0) {
          if (globalTransformNames.containsKey(className)) {
            if (!service.equals(globalTransformNames.get(className))) {
              compilationUnit.getErrorCollector().addWarning(WarningMessage.POSSIBLE_ERRORS,"The global transform for class " + className + " is defined in both "+ globalTransformNames.get(className).toExternalForm()+ " and "+ service.toExternalForm()+ " - the former definition will be used and the latter ignored.",null,null);
            }
          }
 else {
            globalTransformNames.put(className,service);
          }
        }
        try {
          className=svcIn.readLine();
        }
 catch (        IOException ioe) {
          compilationUnit.getErrorCollector().addError(new SimpleMessage("IOException reading the service definition at " + service.toExternalForm() + " because of exception "+ ioe.toString(),null));
          continue;
        }
      }
    }
  }
 catch (  IOException e) {
    compilationUnit.getErrorCollector().addError(new SimpleMessage("IO Exception attempting to load global transforms:" + e.getMessage(),null));
  }
  try {
    Class.forName("java.lang.annotation.Annotation");
  }
 catch (  Exception e) {
    StringBuffer sb=new StringBuffer();
    sb.append("Global ASTTransformations are not enabled in retro builds of groovy.\n");
    sb.append("The following transformations will be ignored:");
    for (    Map.Entry<String,URL> entry : globalTransformNames.entrySet()) {
      sb.append('\t');
      sb.append(entry.getKey());
      sb.append('\n');
    }
    compilationUnit.getErrorCollector().addWarning(new WarningMessage(WarningMessage.POSSIBLE_ERRORS,sb.toString(),null,null));
    return;
  }
  for (  Map.Entry<String,URL> entry : globalTransformNames.entrySet()) {
    try {
      Class gTransClass=transformLoader.loadClass(entry.getKey(),false,true,false);
      GroovyASTTransformation transformAnnotation=(GroovyASTTransformation)gTransClass.getAnnotation(GroovyASTTransformation.class);
      if (transformAnnotation == null) {
        compilationUnit.getErrorCollector().addWarning(new WarningMessage(WarningMessage.POSSIBLE_ERRORS,"Transform Class " + entry.getKey() + " is specified as a global transform in "+ entry.getValue().toExternalForm()+ " but it is not annotated by "+ GroovyASTTransformation.class.getName()+ " the global tranform associated with it may fail and cause the compilation to fail.",null,null));
        continue;
      }
      if (ASTTransformation.class.isAssignableFrom(gTransClass)) {
        final ASTTransformation instance=(ASTTransformation)gTransClass.newInstance();
        compilationUnit.addPhaseOperation(new CompilationUnit.SourceUnitOperation(){
          public void call(          SourceUnit source) throws CompilationFailedException {
            instance.visit(new ASTNode[]{source.getAST()},source);
          }
        }
,transformAnnotation.phase().getPhaseNumber());
      }
 else {
        compilationUnit.getErrorCollector().addError(new SimpleMessage("Transform Class " + entry.getKey() + " specified at "+ entry.getValue().toExternalForm()+ " is not an ASTTransformation.",null));
      }
    }
 catch (    Exception e) {
      compilationUnit.getErrorCollector().addError(new SimpleMessage("Could not instantiate global transform class " + entry.getKey() + " specified at "+ entry.getValue().toExternalForm()+ "  because of exception "+ e.toString(),null));
    }
  }
}
