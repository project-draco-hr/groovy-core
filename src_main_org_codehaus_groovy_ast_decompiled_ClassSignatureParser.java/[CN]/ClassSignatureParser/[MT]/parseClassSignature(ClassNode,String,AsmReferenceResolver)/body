{
  final List<GenericsType> typeParameters=new ArrayList<GenericsType>();
  final List<ClassNode> interfaces=new ArrayList<ClassNode>();
  new SignatureReader(signature).accept(new SignatureVisitor(Opcodes.ASM5){
    String currentTypeParameter;
    List<ClassNode> parameterBounds=new ArrayList<ClassNode>();
    @Override public void visitFormalTypeParameter(    String name){
      flushTypeParameter();
      currentTypeParameter=name;
    }
    private void flushTypeParameter(){
      if (currentTypeParameter != null) {
        ClassNode[] upperBounds=parameterBounds.toArray(new ClassNode[parameterBounds.size()]);
        ClassNode param=ClassHelper.make(currentTypeParameter);
        param.setGenericsPlaceHolder(true);
        typeParameters.add(new GenericsType(param,upperBounds,null));
        currentTypeParameter=null;
        parameterBounds.clear();
      }
    }
    @Override public SignatureVisitor visitClassBound(){
      return new TypeSignatureParser(resolver){
        @Override void finished(        ClassNode result){
          parameterBounds.add(result);
        }
      }
;
    }
    @Override public SignatureVisitor visitInterfaceBound(){
      return visitClassBound();
    }
    @Override public SignatureVisitor visitSuperclass(){
      flushTypeParameter();
      return new TypeSignatureParser(resolver){
        @Override void finished(        ClassNode result){
          classNode.setSuperClass(result);
        }
      }
;
    }
    @Override public SignatureVisitor visitInterface(){
      flushTypeParameter();
      return new TypeSignatureParser(resolver){
        @Override void finished(        ClassNode result){
          interfaces.add(result);
        }
      }
;
    }
  }
);
  classNode.setGenericsTypes(typeParameters.toArray(new GenericsType[typeParameters.size()]));
  classNode.setInterfaces(interfaces.toArray(new ClassNode[interfaces.size()]));
}
