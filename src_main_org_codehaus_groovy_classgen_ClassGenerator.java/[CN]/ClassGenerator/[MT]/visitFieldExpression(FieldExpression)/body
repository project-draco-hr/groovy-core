{
  FieldNode field=expression.getField();
  boolean isStatic=field.isStatic();
  boolean holder=field.isHolder() && !isInClosureConstructor();
  if (!isStatic && !leftHandExpression) {
    cv.visitVarInsn(ALOAD,0);
  }
  String type=field.getType();
  int tempIndex=defineVariable(createVariableName("field"),"java.lang.Object",false).getIndex();
  if (leftHandExpression && !holder) {
    if (isInClosureConstructor()) {
      helper.doCast(type);
    }
 else {
      doConvertAndCast(type);
    }
  }
  String ownerName=(field.getOwner().equals(classNode.getName())) ? internalClassName : org.objectweb.asm.Type.getInternalName(loadClass(field.getOwner()));
  int opcode=isStatic ? GETSTATIC : GETFIELD;
  if (holder) {
    if (leftHandExpression) {
      cv.visitVarInsn(ASTORE,tempIndex);
      if (!isStatic)       cv.visitVarInsn(ALOAD,0);
      cv.visitFieldInsn(opcode,ownerName,expression.getFieldName(),BytecodeHelper.getTypeDescription(type));
      cv.visitVarInsn(ALOAD,tempIndex);
      cv.visitMethodInsn(INVOKEVIRTUAL,"groovy/lang/Reference","set","(Ljava/lang/Object;)V");
    }
 else {
      cv.visitFieldInsn(opcode,ownerName,expression.getFieldName(),BytecodeHelper.getTypeDescription(type));
      cv.visitMethodInsn(INVOKEVIRTUAL,"groovy/lang/Reference","get","()Ljava/lang/Object;");
    }
  }
 else {
    if (leftHandExpression) {
      if (!isStatic) {
        opcode=PUTFIELD;
        helper.store(field.getType(),tempIndex);
        cv.visitVarInsn(ALOAD,0);
        helper.load(field.getType(),tempIndex);
      }
 else {
        opcode=PUTSTATIC;
      }
      cv.visitFieldInsn(opcode,ownerName,expression.getFieldName(),BytecodeHelper.getTypeDescription(type));
    }
 else {
      cv.visitFieldInsn(opcode,ownerName,expression.getFieldName(),BytecodeHelper.getTypeDescription(type));
      if (helper.isPrimitiveType(type)) {
        helper.box(type);
      }
    }
  }
}
