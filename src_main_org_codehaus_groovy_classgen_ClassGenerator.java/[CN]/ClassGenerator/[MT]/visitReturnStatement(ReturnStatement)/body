{
  onLineNumber(statement);
  statement.getExpression().visit(this);
  Expression assignExpr=createReturnLHSExpression(statement.getExpression());
  if (assignExpr != null) {
    leftHandExpression=false;
    assignExpr.visit(this);
  }
  Class c=getExpressionType(statement.getExpression());
  String returnType=methodNode.getReturnType();
  if (returnType.equals("double")) {
    MethodCaller.newVirtual(Double.class,"doubleValue").call(cv);
    cv.visitInsn(DRETURN);
  }
 else   if (returnType.equals("float")) {
    MethodCaller.newVirtual(Double.class,"floatValue").call(cv);
    cv.visitInsn(FRETURN);
  }
 else   if (returnType.equals("long")) {
    MethodCaller.newVirtual(Integer.class,"longValue").call(cv);
    cv.visitInsn(LRETURN);
  }
 else   if (returnType.equals("boolean")) {
    MethodCaller.newVirtual(Boolean.class,"booleanValue").call(cv);
    cv.visitInsn(IRETURN);
  }
 else   if (returnType.equals("char") || returnType.equals("byte") || returnType.equals("int")|| returnType.equals("short")) {
    MethodCaller.newVirtual(Integer.class,"intValue").call(cv);
    cv.visitInsn(IRETURN);
  }
 else {
    if (c == Boolean.class) {
      Label l0=new Label();
      cv.visitJumpInsn(IFEQ,l0);
      cv.visitFieldInsn(GETSTATIC,"java/lang/Boolean","TRUE","Ljava/lang/Boolean;");
      cv.visitInsn(ARETURN);
      cv.visitLabel(l0);
      cv.visitFieldInsn(GETSTATIC,"java/lang/Boolean","FALSE","Ljava/lang/Boolean;");
      cv.visitInsn(ARETURN);
    }
 else {
      if (isValidTypeForCast(returnType) && !returnType.equals(c.getName())) {
        doCast(returnType);
      }
      cv.visitInsn(ARETURN);
    }
  }
  outputReturn=true;
}
