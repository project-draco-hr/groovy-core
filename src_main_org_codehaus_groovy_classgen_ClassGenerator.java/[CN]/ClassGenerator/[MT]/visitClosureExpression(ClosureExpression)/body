{
  ClassNode innerClass=createClosureClass(expression);
  addInnerClass(innerClass);
  String innerClassinternalName=getClassInternalName(innerClass.getName());
  ClassNode owner=innerClass.getOuterClass();
  String ownerTypeName=owner.getName();
  if (isStaticMethod()) {
    ownerTypeName="java.lang.Class";
  }
  if (classNode instanceof InnerClassNode) {
    int paramIdx=defineVariable(createVariableName("iterator"),"java.lang.Object",false).getIndex();
    cv.visitVarInsn(ALOAD,0);
    cv.visitFieldInsn(GETFIELD,internalClassName,"owner",getTypeDescription(ownerTypeName));
    cv.visitVarInsn(ASTORE,paramIdx);
    cv.visitTypeInsn(NEW,innerClassinternalName);
    cv.visitInsn(DUP);
    cv.visitVarInsn(ALOAD,paramIdx);
  }
 else {
    cv.visitTypeInsn(NEW,innerClassinternalName);
    cv.visitInsn(DUP);
    if (isStaticMethod()) {
      visitClassExpression(new ClassExpression(ownerTypeName));
    }
 else {
      cv.visitVarInsn(ALOAD,0);
    }
  }
  if (innerClass.getSuperClass().equals("groovy.lang.Closure")) {
    if (isStaticMethod()) {
      visitClassExpression(new ClassExpression(ownerTypeName));
    }
 else {
      cv.visitVarInsn(ALOAD,0);
    }
  }
  String prototype="(L" + getClassInternalName(ownerTypeName) + ";Ljava/lang/Object;";
  Parameter[] localVariableParams=getClosureSharedVariables(expression);
  for (int i=0; i < localVariableParams.length; i++) {
    Parameter param=localVariableParams[i];
    visitVariableExpression(new VariableExpression(param.getName()));
    prototype=prototype + "L" + getClassInternalName(param.getType())+ ";";
  }
  cv.visitMethodInsn(INVOKESPECIAL,innerClassinternalName,"<init>",prototype + ")V");
}
