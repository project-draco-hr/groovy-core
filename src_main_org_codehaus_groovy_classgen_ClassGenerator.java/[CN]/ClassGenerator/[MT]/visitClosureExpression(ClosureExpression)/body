{
  ClassNode innerClass=createClosureClass(expression);
  innerClasses.add(innerClass);
  String innerClassinternalName=getClassInternalName(innerClass.getName());
  ClassNode owner=innerClass.getOuterClass();
  if (classNode instanceof InnerClassNode) {
    int paramIdx=defineVariable(createArgumentsName(),"java.lang.Object",false).getIndex();
    cv.visitVarInsn(ALOAD,0);
    cv.visitFieldInsn(GETFIELD,internalClassName,"__outerInstance",getTypeDescription(owner.getName()));
    cv.visitVarInsn(ASTORE,paramIdx);
    cv.visitTypeInsn(NEW,innerClassinternalName);
    cv.visitInsn(DUP);
    cv.visitVarInsn(ALOAD,paramIdx);
  }
 else {
    cv.visitTypeInsn(NEW,innerClassinternalName);
    cv.visitInsn(DUP);
    cv.visitVarInsn(ALOAD,0);
  }
  cv.visitMethodInsn(INVOKESPECIAL,innerClassinternalName,"<init>","(L" + getClassInternalName(owner.getName()) + ";)V");
}
