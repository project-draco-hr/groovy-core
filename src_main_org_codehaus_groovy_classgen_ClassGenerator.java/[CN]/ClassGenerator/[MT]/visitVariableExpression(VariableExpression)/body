{
  String variableName=expression.getVariable();
  if (isStaticMethod() && variableName.equals("this")) {
    visitClassExpression(new ClassExpression(classNode.getName()));
    return;
  }
  if (variableName.equals("super")) {
    visitClassExpression(new ClassExpression(classNode.getSuperClass()));
    return;
  }
  if (!variableName.equals("this")) {
    String className=resolveClassName(variableName);
    if (className != null) {
      if (leftHandExpression) {
        throw new RuntimeParserException("Cannot use a class expression on the left hand side of an assignment",expression);
      }
      visitClassExpression(new ClassExpression(className));
      return;
    }
  }
  boolean handled=false;
  Variable variable=(Variable)variableStack.get(variableName);
  if (variable != null) {
    if (variable.isProperty()) {
      processPropertyVariable(variableName,variable);
    }
 else {
      processStackVariable(variableName,variable);
    }
    handled=true;
  }
 else {
    int steps=0;
    ClassNode current=classNode;
    FieldNode field=null;
    do {
      if ((field=current.getField(variableName)) != null) {
        break;
      }
      steps++;
    }
 while ((current=current.getOuterClass()) != null);
    if (field != null) {
      processFieldAccess(variableName,field,steps);
      handled=true;
    }
  }
  if (!handled) {
    String variableType=expression.getType();
    variable=defineVariable(variableName,variableType);
    if (isInScriptBody() || !leftHandExpression) {
      variable.setProperty(true);
      processPropertyVariable(variableName,variable);
    }
 else {
      processStackVariable(variableName,variable);
    }
  }
}
