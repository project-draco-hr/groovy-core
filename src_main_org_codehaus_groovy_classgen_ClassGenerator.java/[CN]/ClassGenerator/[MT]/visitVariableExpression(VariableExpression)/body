{
  String variableName=expression.getVariable();
  if (isStaticMethod() && variableName.equals("this")) {
    visitClassExpression(new ClassExpression(classNode.getName()));
    return;
  }
  if (variableName.equals("super")) {
    visitClassExpression(new ClassExpression(classNode.getSuperClass()));
    return;
  }
  if (!variableName.equals("this")) {
    String className=resolveClassName(variableName);
    if (className != null) {
      if (leftHandExpression) {
        throw new RuntimeParserException("Cannot use a class expression on the left hand side of an assignment",expression);
      }
      visitClassExpression(new ClassExpression(className));
      return;
    }
  }
  FieldNode field=classNode.getField(variableName);
  if (field != null && variableStack.get(variableName) == null) {
    visitFieldExpression(new FieldExpression(field));
  }
 else {
    field=classNode.getOuterField(variableName);
    if (field != null) {
      visitOuterFieldExpression(new FieldExpression(field));
    }
 else {
      String name=variableName;
      Variable variable=null;
      String variableType=expression.getType();
      boolean useProperty=isInScriptBody();
      if (!leftHandExpression) {
        variable=(Variable)variableStack.get(name);
      }
 else {
        if (!useProperty) {
          variable=defineVariable(name,variableType);
        }
      }
      if (variable == null || variable.isProperty()) {
        if (variable == null) {
          variable=defineVariable(name,variableType);
          variable.setProperty(true);
        }
        visitPropertyExpression(new PropertyExpression(VariableExpression.THIS_EXPRESSION,name));
        return;
      }
      String type=variable.getTypeName();
      int index=variable.getIndex();
      boolean holder=variable.isHolder() && !passingClosureParams;
      if (leftHandExpression) {
        if (holder) {
          int tempIndex=defineVariable(createVariableName("reference"),variableType,false).getIndex();
          cv.visitVarInsn(ASTORE,tempIndex);
          cv.visitVarInsn(ALOAD,index);
          cv.visitVarInsn(ALOAD,tempIndex);
          cv.visitMethodInsn(INVOKEVIRTUAL,"groovy/lang/Reference","set","(Ljava/lang/Object;)V");
        }
 else {
          if (type.equals("double")) {
            cv.visitVarInsn(DSTORE,index);
          }
 else           if (type.equals("float")) {
            cv.visitVarInsn(FSTORE,index);
          }
 else           if (type.equals("long")) {
            cv.visitVarInsn(LSTORE,index);
          }
 else           if (type.equals("byte") || type.equals("short") || type.equals("boolean")|| type.equals("int")) {
            cv.visitVarInsn(ISTORE,index);
          }
 else {
            cv.visitVarInsn(ASTORE,index);
          }
        }
      }
 else {
        if (holder) {
          cv.visitVarInsn(ALOAD,index);
          cv.visitMethodInsn(INVOKEVIRTUAL,"groovy/lang/Reference","get","()Ljava/lang/Object;");
        }
 else {
          cv.visitVarInsn(ALOAD,index);
        }
      }
    }
  }
}
