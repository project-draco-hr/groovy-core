{
  this.leftHandExpression=false;
  Expression arguments=call.getArguments();
  if (MethodCallExpression.isSuperMethodCall(call)) {
    cv.visitVarInsn(ALOAD,0);
    cv.visitVarInsn(ALOAD,1);
    cv.visitMethodInsn(INVOKESPECIAL,internalBaseClassName,"<init>","(Ljava/lang/Object;)V");
  }
 else {
    String method=call.getMethod();
    if (isThisExpression(call.getObjectExpression()) && isFieldOrVariable(call.getMethod())) {
      visitVariableExpression(new VariableExpression(method));
      arguments.visit(this);
      invokeClosureMethod.call(cv);
    }
 else {
      if (argumentsUseStack(arguments)) {
        int paramIdx=defineVariable(createVariableName("iterator"),"java.lang.Object",false).getIndex();
        arguments.visit(this);
        cv.visitVarInsn(ASTORE,paramIdx);
        call.getObjectExpression().visit(this);
        cv.visitLdcInsn(method);
        cv.visitVarInsn(ALOAD,paramIdx);
      }
 else {
        call.getObjectExpression().visit(this);
        cv.visitLdcInsn(method);
        arguments.visit(this);
      }
      if (call.isSafe()) {
        invokeMethodSafeMethod.call(cv);
      }
 else {
        invokeMethodMethod.call(cv);
      }
    }
  }
}
