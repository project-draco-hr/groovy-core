{
  this.leftHandExpression=false;
  Expression arguments=call.getArguments();
  boolean superMethodCall=MethodCallExpression.isSuperMethodCall(call);
  String method=call.getMethod();
  if (superMethodCall && method.equals("<init>")) {
    cv.visitVarInsn(ALOAD,0);
    cv.visitVarInsn(ALOAD,1);
    cv.visitMethodInsn(INVOKESPECIAL,internalBaseClassName,"<init>","(Ljava/lang/Object;)V");
  }
 else {
    if (isThisExpression(call.getObjectExpression()) && isFieldOrVariable(call.getMethod())) {
      visitVariableExpression(new VariableExpression(method));
      arguments.visit(this);
      invokeClosureMethod.call(cv);
    }
 else {
      if (superMethodCall) {
        if (method.equals("super") || method.equals("<init>")) {
          ConstructorNode constructorNode=findSuperConstructor(call);
          cv.visitVarInsn(ALOAD,0);
          loadArguments(constructorNode.getParameters(),arguments);
          String descriptor=BytecodeHelper.getMethodDescriptor("void",constructorNode.getParameters());
          cv.visitMethodInsn(INVOKESPECIAL,BytecodeHelper.getClassInternalName(classNode.getSuperClass()),"<init>",descriptor);
        }
 else {
          MethodNode methodNode=findSuperMethod(call);
          cv.visitVarInsn(ALOAD,0);
          loadArguments(methodNode.getParameters(),arguments);
          String descriptor=BytecodeHelper.getMethodDescriptor(methodNode.getReturnType(),methodNode.getParameters());
          cv.visitMethodInsn(INVOKESPECIAL,BytecodeHelper.getClassInternalName(methodNode.getDeclaringClass().getName()),method,descriptor);
        }
      }
 else {
        if (emptyArguments(arguments) && !call.isSafe()) {
          call.getObjectExpression().visit(this);
          cv.visitLdcInsn(method);
          invokeNoArgumentsMethod.call(cv);
        }
 else {
          if (argumentsUseStack(arguments)) {
            int paramIdx=defineVariable(createVariableName("temp"),"java.lang.Object",false).getIndex();
            arguments.visit(this);
            cv.visitVarInsn(ASTORE,paramIdx);
            call.getObjectExpression().visit(this);
            cv.visitLdcInsn(method);
            cv.visitVarInsn(ALOAD,paramIdx);
          }
 else {
            call.getObjectExpression().visit(this);
            cv.visitLdcInsn(method);
            arguments.visit(this);
          }
          if (call.isSafe()) {
            invokeMethodSafeMethod.call(cv);
          }
 else {
            invokeMethodMethod.call(cv);
          }
        }
      }
    }
  }
}
