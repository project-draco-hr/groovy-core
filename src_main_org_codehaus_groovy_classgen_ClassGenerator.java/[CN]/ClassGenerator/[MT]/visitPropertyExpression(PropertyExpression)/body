{
  String className=checkForQualifiedClass(expression);
  if (className != null) {
    visitClassExpression(new ClassExpression(className));
    return;
  }
  Expression objectExpression=expression.getObjectExpression();
  if (expression.getProperty().equals("class")) {
    if ((objectExpression instanceof ClassExpression)) {
      visitClassExpression((ClassExpression)objectExpression);
      return;
    }
 else     if (objectExpression instanceof VariableExpression) {
      VariableExpression varExp=(VariableExpression)objectExpression;
      className=varExp.getVariable();
      try {
        className=resolveClassName(className);
        visitClassExpression(new ClassExpression(className));
        return;
      }
 catch (      Exception e) {
      }
    }
  }
  if (isThisExpression(objectExpression)) {
    String name=expression.getProperty();
    FieldNode field=classNode.getField(name);
    if (field != null) {
      visitFieldExpression(new FieldExpression(field));
      return;
    }
  }
  boolean left=leftHandExpression;
  leftHandExpression=false;
  objectExpression.visit(this);
  cv.visitLdcInsn(expression.getProperty());
  if (isGroovyObject(objectExpression) && !expression.isSafe()) {
    if (left) {
      setGroovyObjectPropertyMethod.call(cv);
    }
 else {
      getGroovyObjectPropertyMethod.call(cv);
    }
  }
 else {
    if (expression.isSafe()) {
      if (left) {
        setPropertySafeMethod2.call(cv);
      }
 else {
        getPropertySafeMethod.call(cv);
      }
    }
 else {
      if (left) {
        setPropertyMethod2.call(cv);
      }
 else {
        getPropertyMethod.call(cv);
      }
    }
  }
}
