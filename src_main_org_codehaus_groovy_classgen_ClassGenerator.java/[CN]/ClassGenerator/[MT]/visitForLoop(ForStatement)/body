{
  onLineNumber(loop);
  Type variableType=checkValidType(loop.getVariableType(),loop,"for loop variable");
  int iIdx=defineVariable(loop.getVariable(),variableType,true).getIndex();
  loop.getCollectionExpression().visit(this);
  asIteratorMethod.call(cv);
  final int iteratorIdx=defineVariable(createVariableName("iterator"),"java.util.Iterator",false).getIndex();
  cv.visitVarInsn(ASTORE,iteratorIdx);
  pushBlockScope();
  Label continueLabel=scope.getContinueLabel();
  cv.visitJumpInsn(GOTO,continueLabel);
  Label label2=new Label();
  cv.visitLabel(label2);
  BytecodeExpression expression=new BytecodeExpression(){
    public void visit(    GroovyCodeVisitor visitor){
      cv.visitVarInsn(ALOAD,iteratorIdx);
      iteratorNextMethod.call(cv);
    }
  }
;
  evaluateEqual(new BinaryExpression(new VariableExpression(loop.getVariable()),Token.newSymbol(Types.EQUAL,-1,-1),expression));
  loop.getLoopBlock().visit(this);
  cv.visitLabel(continueLabel);
  cv.visitVarInsn(ALOAD,iteratorIdx);
  iteratorHasNextMethod.call(cv);
  cv.visitJumpInsn(IFNE,label2);
  cv.visitLabel(scope.getBreakLabel());
  popScope();
}
