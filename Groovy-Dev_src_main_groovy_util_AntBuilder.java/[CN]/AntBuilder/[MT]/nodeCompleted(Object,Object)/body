{
  antElementHandler.onEndElement(null,null,antXmlContext);
  lastCompletedNode=node;
  if (parent != null && !(parent instanceof Target)) {
    log.finest("parent is not null: no perform on nodeCompleted");
    return;
  }
  if (node instanceof Task) {
    Object task=node;
    if (node instanceof UnknownElement) {
      final UnknownElement unknownElement=(UnknownElement)node;
      unknownElement.maybeConfigure();
      task=unknownElement.getRealThing();
    }
    lastCompletedNode=task;
    if (task instanceof Task) {
      final String taskName=((Task)task).getTaskName();
      InputStream savedIn=System.in;
      InputStream savedProjectInputStream=project.getDefaultInputStream();
      if (!(savedIn instanceof DemuxInputStream)) {
        project.setDefaultInputStream(savedIn);
        System.setIn(new DemuxInputStream(project));
      }
      try {
        ((Task)task).perform();
      }
  finally {
        project.setDefaultInputStream(savedProjectInputStream);
        System.setIn(savedIn);
      }
      if ("import".equals(taskName)) {
        antXmlContext.setCurrentTarget(collectorTarget);
      }
    }
  }
 else   if (node instanceof Target) {
    antXmlContext.setCurrentTarget(collectorTarget);
  }
 else {
    final RuntimeConfigurable r=(RuntimeConfigurable)node;
    r.maybeConfigure(project);
  }
}
