{
  int checkPoint=offset + length;
  if (lastBuffer != buffer) {
    matcher.reset(buffer);
    lastBuffer=buffer;
  }
  int matchEnd=offset;
  Style style=null;
  while (matchEnd < checkPoint && matcher.find(offset)) {
    int groupNum=0;
    while ((offset=matcher.start(++groupNum)) == -1) {
    }
    if (offset != matchEnd) {
      offset=offset > checkPoint ? checkPoint : offset;
      styledDocument.setCharacterAttributes(matchEnd,offset - matchEnd,defaultStyle,true);
      if (offset >= checkPoint) {
        return;
      }
    }
    matchEnd=matcher.end(groupNum);
    style=(Style)styleMap.get((String)groupList.get(groupNum));
    styledDocument.setCharacterAttributes(offset,matchEnd - offset,style,true);
    if (styledDocument.getParagraphElement(offset).getStartOffset() != styledDocument.getParagraphElement(matchEnd).getStartOffset()) {
      MultiLineRun mlr=new MultiLineRun(offset,matchEnd);
      mlTextRunSet.add(mlr);
    }
    LexerNode node=(LexerNode)children.get(groupList.get(groupNum));
    if (node != null) {
      node.parse(buffer,offset,matchEnd - offset);
    }
    offset=matchEnd;
  }
  if (matchEnd < checkPoint) {
    styledDocument.setCharacterAttributes(matchEnd,checkPoint - matchEnd,defaultStyle,true);
  }
}
