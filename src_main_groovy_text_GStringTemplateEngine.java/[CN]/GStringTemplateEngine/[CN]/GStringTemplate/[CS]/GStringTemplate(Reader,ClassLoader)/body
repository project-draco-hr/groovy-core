{
  final StringBuilder templateExpressions=new StringBuilder("package groovy.tmp.templates\n def getTemplate() { return { out -> delegate = new Binding(delegate); out << \"\"\"");
  boolean writingString=true;
  while (true) {
    int c=reader.read();
    if (c == -1)     break;
    if (c == '<') {
      c=reader.read();
      if (c == '%') {
        c=reader.read();
        if (c == '=') {
          parseExpression(reader,writingString,templateExpressions);
          writingString=true;
          continue;
        }
 else {
          parseSection(c,reader,writingString,templateExpressions);
          writingString=false;
          continue;
        }
      }
 else {
        appendCharacter('<',templateExpressions,writingString);
        writingString=true;
      }
    }
 else     if (c == '"') {
      appendCharacter('\\',templateExpressions,writingString);
      writingString=true;
    }
 else     if (c == '$') {
      appendCharacter('$',templateExpressions,writingString);
      writingString=true;
      c=reader.read();
      if (c == '{') {
        appendCharacter('{',templateExpressions,writingString);
        writingString=true;
        parseGSstring(reader,writingString,templateExpressions);
        writingString=true;
        continue;
      }
    }
    appendCharacter((char)c,templateExpressions,writingString);
    writingString=true;
  }
  if (writingString) {
    templateExpressions.append("\"\"\"");
  }
  templateExpressions.append("}.asWritable()}");
  final GroovyClassLoader loader=(GroovyClassLoader)AccessController.doPrivileged(new PrivilegedAction(){
    public Object run(){
      return new GroovyClassLoader(parentLoader);
    }
  }
);
  final Class groovyClass;
  try {
    groovyClass=loader.parseClass(new GroovyCodeSource(templateExpressions.toString(),"GStringTemplateScript" + counter++ + ".groovy","x"));
  }
 catch (  Exception e) {
    throw new GroovyRuntimeException("Failed to parse template script (your template may contain an error or be trying to use expressions not currently supported): " + e.getMessage());
  }
  try {
    final GroovyObject object=(GroovyObject)groovyClass.newInstance();
    this.template=(Closure)object.invokeMethod("getTemplate",null);
  }
 catch (  InstantiationException e) {
    throw new ClassNotFoundException(e.getMessage());
  }
catch (  IllegalAccessException e) {
    throw new ClassNotFoundException(e.getMessage());
  }
}
