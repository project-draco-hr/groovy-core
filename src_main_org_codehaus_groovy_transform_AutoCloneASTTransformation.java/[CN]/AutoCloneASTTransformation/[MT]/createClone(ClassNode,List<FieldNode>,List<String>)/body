{
  final BlockStatement body=new BlockStatement();
  final Expression result=varX("_result",cNode);
  body.addStatement(declS(result,castX(cNode,callSuperX("clone"))));
  for (  FieldNode fieldNode : fieldNodes) {
    if (excludes.contains(fieldNode.getName()))     continue;
    ClassNode fieldType=fieldNode.getType();
    Expression fieldExpr=varX(fieldNode);
    Expression to=propX(result,fieldNode.getName());
    Statement doClone=assignS(to,castX(fieldType,callCloneDirectX(fieldExpr)));
    Statement doCloneDynamic=assignS(to,castX(fieldType,callCloneDynamicX(fieldExpr)));
    if (isCloneableType(fieldType)) {
      body.addStatement(doClone);
    }
 else     if (possiblyCloneable(fieldType)) {
      body.addStatement(ifS(isInstanceOfX(fieldExpr,CLONEABLE_TYPE),doCloneDynamic));
    }
  }
  body.addStatement(returnS(result));
  ClassNode[] exceptions={make(CloneNotSupportedException.class)};
  cNode.addMethod("clone",ACC_PUBLIC,GenericsUtils.nonGeneric(cNode),Parameter.EMPTY_ARRAY,exceptions,body);
}
