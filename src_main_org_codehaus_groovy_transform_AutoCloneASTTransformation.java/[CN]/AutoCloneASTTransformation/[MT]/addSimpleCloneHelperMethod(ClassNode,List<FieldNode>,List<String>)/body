{
  Parameter methodParam=new Parameter(GenericsUtils.nonGeneric(cNode),"other");
  final Expression other=varX(methodParam);
  boolean hasParent=cNode.getSuperClass() != ClassHelper.OBJECT_TYPE;
  BlockStatement methodBody=new BlockStatement();
  if (hasParent) {
    methodBody.addStatement(stmt(callSuperX("cloneOrCopyMembers",args(other))));
  }
  for (  FieldNode fieldNode : fieldNodes) {
    String name=fieldNode.getName();
    if (excludes.contains(name))     continue;
    ClassNode fieldType=fieldNode.getType();
    Expression direct=propX(varX("this"),name);
    Expression to=propX(other,name);
    Statement assignDirect=assignS(to,direct);
    Statement assignCloned=assignS(to,castX(fieldType,callX(direct,"clone")));
    Statement assignClonedDynamic=assignS(to,castX(fieldType,callCloneDynamicX(direct)));
    if (isOrImplements(fieldType,CLONEABLE_TYPE)) {
      methodBody.addStatement(assignCloned);
    }
 else     if (!possiblyCloneable(fieldType)) {
      methodBody.addStatement(assignDirect);
    }
 else {
      methodBody.addStatement(ifElseS(isInstanceOfX(direct,CLONEABLE_TYPE),assignClonedDynamic,assignDirect));
    }
  }
  ClassNode[] exceptions={make(CloneNotSupportedException.class)};
  cNode.addMethod("cloneOrCopyMembers",ACC_PROTECTED,ClassHelper.VOID_TYPE,params(methodParam),exceptions,methodBody);
}
