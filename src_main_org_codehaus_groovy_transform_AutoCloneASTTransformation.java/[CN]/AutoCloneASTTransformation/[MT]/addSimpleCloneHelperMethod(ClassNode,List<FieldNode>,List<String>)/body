{
  Parameter methodParam=new Parameter(GenericsUtils.nonGeneric(cNode),"other");
  final Expression other=varX(methodParam);
  boolean hasParent=cNode.getSuperClass() != ClassHelper.OBJECT_TYPE;
  BlockStatement methodBody=new BlockStatement();
  if (hasParent) {
    methodBody.addStatement(stmt(callSuperX("cloneOrCopyMembers",args(other))));
  }
  for (  FieldNode fieldNode : fieldNodes) {
    String name=fieldNode.getName();
    if (excludes.contains(name))     continue;
    Expression direct=propX(varX("this"),name);
    Expression cloned=callX(direct,"clone");
    Expression to=propX(other,name);
    Statement assignCloned=assignS(to,cloned);
    Statement assignDirect=assignS(to,direct);
    methodBody.addStatement(ifElseS(isInstanceOfX(direct,CLONEABLE_TYPE),assignCloned,assignDirect));
  }
  ClassNode[] exceptions={make(CloneNotSupportedException.class)};
  cNode.addMethod("cloneOrCopyMembers",ACC_PROTECTED,ClassHelper.VOID_TYPE,params(methodParam),exceptions,methodBody);
}
