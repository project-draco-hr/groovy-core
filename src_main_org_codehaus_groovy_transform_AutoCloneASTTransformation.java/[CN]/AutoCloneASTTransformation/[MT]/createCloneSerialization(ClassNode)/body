{
  final BlockStatement body=new BlockStatement();
  final Expression baos=varX("baos");
  body.addStatement(declS(baos,ctorX(BAOS_TYPE)));
  MethodCallExpression writeObject=callX(castX(OOS_TYPE,varX("it")),"writeObject",varX("this"));
  writeObject.setImplicitThis(false);
  ClosureExpression writeClos=closureX(block(stmt(writeObject)));
  writeClos.setVariableScope(new VariableScope());
  body.addStatement(stmt(callX(baos,"withObjectOutputStream",args(writeClos))));
  final Expression bais=varX("bais");
  body.addStatement(declS(bais,ctorX(BAIS_TYPE,args(callX(baos,"toByteArray")))));
  MethodCallExpression readObject=callX(castX(OIS_TYPE,varX("it")),"readObject");
  readObject.setImplicitThis(false);
  ClosureExpression readClos=closureX(block(stmt(castX(GenericsUtils.nonGeneric(cNode),readObject))));
  readClos.setVariableScope(new VariableScope());
  Expression classLoader=callX(callThisX("getClass"),"getClassLoader");
  body.addStatement(returnS(callX(bais,"withObjectInputStream",args(classLoader,readClos))));
  new VariableScopeVisitor(sourceUnit,true).visitClass(cNode);
  ClassNode[] exceptions={make(CloneNotSupportedException.class)};
  cNode.addMethod("clone",ACC_PUBLIC,GenericsUtils.nonGeneric(cNode),Parameter.EMPTY_ARRAY,exceptions,body);
}
