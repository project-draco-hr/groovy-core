{
  final BlockStatement body=new BlockStatement();
  final Expression baos=var("baos");
  body.addStatement(declS(baos,ctorX(BAOS_TYPE)));
  final Expression it=var("it");
  ClosureExpression writeClosure=new ClosureExpression(Parameter.EMPTY_ARRAY,block(stmt(callX(it,"writeObject",var("this")))));
  writeClosure.setVariableScope(new VariableScope());
  body.addStatement(stmt(callX(baos,"withObjectOutputStream",args(writeClosure))));
  final Expression bais=var("bais");
  ConstructorCallExpression bytes=ctorX(BAIS_TYPE,args(callX(baos,"toByteArray")));
  body.addStatement(declS(bais,bytes));
  ClosureExpression readClosure=new ClosureExpression(new Parameter[]{},block(stmt(callX(it,"readObject"))));
  readClosure.setVariableScope(new VariableScope());
  Expression klass=callThisX("getClass");
  Expression classLoader=callX(klass,"getClassLoader");
  Expression result=callX(bais,"withObjectInputStream",args(classLoader,readClosure));
  body.addStatement(returnS(result));
  ClassNode[] exceptions={make(CloneNotSupportedException.class)};
  cNode.addMethod("clone",ACC_PUBLIC,ClassHelper.OBJECT_TYPE,Parameter.EMPTY_ARRAY,exceptions,body);
}
