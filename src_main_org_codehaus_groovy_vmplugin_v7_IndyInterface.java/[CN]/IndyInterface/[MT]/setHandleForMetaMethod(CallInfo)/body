{
  MetaMethod metaMethod=info.method;
  boolean isCategoryTypeMethod=metaMethod instanceof NewInstanceMetaMethod;
  if (metaMethod instanceof ReflectionMetaMethod) {
    ReflectionMetaMethod rmm=(ReflectionMetaMethod)metaMethod;
    metaMethod=rmm.getCachedMethod();
  }
  if (metaMethod instanceof CachedMethod) {
    CachedMethod cm=(CachedMethod)metaMethod;
    info.isVargs=cm.isVargsMethod();
    try {
      Method m=cm.getCachedMethod();
      info.handle=LOOKUP.unreflect(m);
      if (!isCategoryTypeMethod && isStatic(m)) {
        info.handle=MethodHandles.dropArguments(info.handle,0,Class.class);
      }
    }
 catch (    IllegalAccessException e) {
      throw new GroovyBugError(e);
    }
  }
 else   if (info.method != null) {
    info.handle=META_METHOD_INVOKER;
    info.handle=info.handle.bindTo(info.method);
    if (info.method.getNativeParameterTypes().length == 1 && info.args.length == 1) {
      info.handle=MethodHandles.insertArguments(info.handle,1,new Object[]{new Object[]{null}});
    }
 else     if (info.method.isVargsMethod()) {
      info.handle=info.handle.asCollector(Object[].class,info.targetType.parameterCount() - 2);
      info.handle=info.handle.asCollector(Object[].class,info.targetType.parameterCount() - 2);
    }
 else {
      info.handle=info.handle.asCollector(Object[].class,info.targetType.parameterCount() - 2);
    }
  }
}
