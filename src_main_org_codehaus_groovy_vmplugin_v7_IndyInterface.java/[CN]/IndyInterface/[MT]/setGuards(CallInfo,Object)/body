{
  if (ci.handle == null)   return;
  MethodHandle fallback=makeFallBack(ci.callSite,ci.sender,ci.methodName,ci.targetType,ci.safeNavigation);
  MethodHandle test;
  if (receiver == null) {
    test=IS_NULL.asType(MethodType.methodType(boolean.class,ci.targetType.parameterType(1)));
    test=MethodHandles.dropArguments(test,0,ci.targetType.parameterType(0));
  }
 else   if (receiver instanceof GroovyObject) {
    GroovyObject go=(GroovyObject)receiver;
    MetaClassImpl mc=(MetaClassImpl)go.getMetaClass();
    test=SAME_MC.bindTo(mc);
    test=test.asType(MethodType.methodType(boolean.class,ci.targetType.parameterType(1)));
    test=MethodHandles.dropArguments(test,0,ci.targetType.parameterType(0));
  }
 else {
    ConstantMetaClassVersioning mcv=DefaultMetaClassInfo.getCurrentConstantMetaClassVersioning();
    test=VALID_MC_VERSION.bindTo(mcv);
    ci.handle=MethodHandles.guardWithTest(test,ci.handle,fallback);
    test=IS_NOT_NULL.asType(MethodType.methodType(boolean.class,ci.targetType.parameterType(1)));
    test=MethodHandles.dropArguments(test,0,ci.targetType.parameterType(0));
  }
  ci.handle=MethodHandles.guardWithTest(test,ci.handle,fallback);
  Class[] pt=ci.handle.type().parameterArray();
  for (int i=1; i < ci.args.length; i++) {
    Object arg=ci.args[i];
    if (arg == null) {
      test=IS_NULL.asType(MethodType.methodType(boolean.class,pt[i + 1]));
    }
 else {
      Class argClass=arg.getClass();
      test=SAME_CLASS.bindTo(argClass).asType(MethodType.methodType(boolean.class,pt[i + 1]));
      Class[] drops=new Class[i + 1];
      for (int j=0; j < drops.length; j++)       drops[j]=pt[j];
      test=MethodHandles.dropArguments(test,0,drops);
    }
    ci.handle=MethodHandles.guardWithTest(test,ci.handle,fallback);
  }
}
