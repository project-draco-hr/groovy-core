{
  if (ci.handle == null)   return;
  MethodHandle fallback=makeFallBack(ci.callSite,ci.sender,ci.methodName,ci.targetType,ci.safeNavigationOrig,ci.thisCall);
  if (receiver instanceof GroovyObject) {
    GroovyObject go=(GroovyObject)receiver;
    MetaClass mc=(MetaClass)go.getMetaClass();
    MethodHandle test=SAME_MC.bindTo(mc);
    test=test.asType(MethodType.methodType(boolean.class,ci.targetType.parameterType(0)));
    ci.handle=MethodHandles.guardWithTest(test,ci.handle,fallback);
  }
 else   if (receiver != null) {
    ci.handle=switchPoint.guardWithTest(ci.handle,fallback);
  }
  Class[] pt=ci.handle.type().parameterArray();
  for (int i=0; i < ci.args.length; i++) {
    Object arg=ci.args[i];
    MethodHandle test=null;
    if (arg == null) {
      test=IS_NULL.asType(MethodType.methodType(boolean.class,pt[i]));
    }
 else {
      Class argClass=arg.getClass();
      if (Modifier.isFinal(argClass.getModifiers()) && argumentClassIsParameterClass(argClass,pt[i]))       continue;
      test=SAME_CLASS.bindTo(argClass).asType(MethodType.methodType(boolean.class,pt[i]));
    }
    Class[] drops=new Class[i];
    for (int j=0; j < drops.length; j++)     drops[j]=pt[j];
    test=MethodHandles.dropArguments(test,0,drops);
    ci.handle=MethodHandles.guardWithTest(test,ci.handle,fallback);
  }
}
