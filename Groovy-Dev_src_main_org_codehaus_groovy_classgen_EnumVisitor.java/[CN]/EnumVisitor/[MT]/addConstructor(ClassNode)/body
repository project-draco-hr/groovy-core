{
  List ctors=new ArrayList(enumClass.getDeclaredConstructors());
  if (ctors.size() == 0) {
    ConstructorNode init=new ConstructorNode(Opcodes.ACC_PRIVATE,new Parameter[0],ClassNode.EMPTY_ARRAY,new BlockStatement());
    enumClass.addConstructor(init);
    ctors.add(init);
  }
  for (Iterator iterator=ctors.iterator(); iterator.hasNext(); ) {
    ConstructorNode ctor=(ConstructorNode)iterator.next();
    if (ctor.firstStatementIsSpecialConstructorCall())     continue;
    Parameter[] oldP=ctor.getParameters();
    Parameter[] newP=new Parameter[oldP.length + 2];
    String stringParameterName=getUniqueVariableName("__str",ctor.getCode());
    newP[0]=new Parameter(ClassHelper.STRING_TYPE,stringParameterName);
    String intParameterName=getUniqueVariableName("__int",ctor.getCode());
    newP[1]=new Parameter(ClassHelper.int_TYPE,intParameterName);
    System.arraycopy(oldP,0,newP,2,oldP.length);
    ctor.setParameters(newP);
    ConstructorCallExpression cce=new ConstructorCallExpression(ClassNode.SUPER,new ArgumentListExpression(new VariableExpression(stringParameterName),new VariableExpression(intParameterName)));
    BlockStatement code=new BlockStatement();
    code.addStatement(new ExpressionStatement(cce));
    Statement oldCode=ctor.getCode();
    if (oldCode != null)     code.addStatement(oldCode);
    ctor.setCode(code);
  }
}
