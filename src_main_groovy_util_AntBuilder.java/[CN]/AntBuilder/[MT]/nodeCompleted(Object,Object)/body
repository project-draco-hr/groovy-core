{
  if (parent == null)   insideTask=false;
  antElementHandler.onEndElement(null,null,antXmlContext);
  lastCompletedNode=node;
  if (parent != null && !(parent instanceof Target)) {
    log.finest("parent is not null: no perform on nodeCompleted");
    return;
  }
  if (node instanceof Task) {
    Task task=(Task)node;
    final String taskName=task.getTaskName();
    if ("antcall".equals(taskName) && parent == null) {
      throw new BuildException("antcall not supported within AntBuilder, consider using 'ant.project.executeTarget('targetName')' instead.");
    }
    InputStream savedProjectInputStream=project.getDefaultInputStream();
    InputStream savedIn=System.in;
    PrintStream savedErr=System.err;
    PrintStream savedOut=System.out;
    if (!(savedIn instanceof DemuxInputStream)) {
      project.setDefaultInputStream(savedIn);
      System.setIn(new DemuxInputStream(project));
    }
    System.setOut(new PrintStream(new DemuxOutputStream(project,false)));
    System.setErr(new PrintStream(new DemuxOutputStream(project,true)));
    try {
      lastCompletedNode=performTask(task);
    }
  finally {
      project.setDefaultInputStream(savedProjectInputStream);
      System.setIn(savedIn);
      System.setOut(savedOut);
      System.setErr(savedErr);
    }
    if ("import".equals(taskName)) {
      antXmlContext.setCurrentTarget(collectorTarget);
    }
  }
 else   if (node instanceof Target) {
    antXmlContext.setCurrentTarget(collectorTarget);
  }
 else {
    final RuntimeConfigurable r=(RuntimeConfigurable)node;
    r.maybeConfigure(project);
  }
}
