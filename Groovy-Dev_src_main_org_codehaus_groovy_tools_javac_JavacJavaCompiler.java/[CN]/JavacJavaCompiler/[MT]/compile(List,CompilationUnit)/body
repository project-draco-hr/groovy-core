{
  String[] javacParameters=makeParameters(files,cu.getClassLoader());
  StringWriter javacOutput=null;
  int javacReturnValue=0;
  try {
    Class javac=findJavac(cu);
    Method method=null;
    try {
      method=javac.getMethod("compile",new Class[]{String[].class,PrintWriter.class});
      javacOutput=new StringWriter();
      PrintWriter writer=new PrintWriter(javacOutput);
      Object ret=method.invoke(null,new Object[]{javacParameters,writer});
      javacReturnValue=((Integer)ret).intValue();
    }
 catch (    NoSuchMethodException e) {
    }
    if (method == null) {
      method=javac.getMethod("compile",new Class[]{String[].class});
      Object ret=method.invoke(null,new Object[]{javacParameters});
      javacReturnValue=((Integer)ret).intValue();
    }
    cu.getConfiguration().getOutput();
  }
 catch (  InvocationTargetException ite) {
    cu.getErrorCollector().addFatalError(new ExceptionMessage((Exception)ite.getCause(),true,cu));
  }
catch (  Exception e) {
    cu.getErrorCollector().addFatalError(new ExceptionMessage(e,true,cu));
  }
  if (javacReturnValue != 0) {
switch (javacReturnValue) {
case 1:
      addJavacError("Compile error during compilation with javac.",cu,javacOutput);
    break;
case 2:
  addJavacError("Invalid commandline usage for javac.",cu,javacOutput);
break;
case 3:
addJavacError("System error during compilation with javac.",cu,javacOutput);
break;
case 4:
addJavacError("Abnormal termination of javac.",cu,javacOutput);
break;
default :
addJavacError("unexpected return value by javac.",cu,javacOutput);
break;
}
}
}
