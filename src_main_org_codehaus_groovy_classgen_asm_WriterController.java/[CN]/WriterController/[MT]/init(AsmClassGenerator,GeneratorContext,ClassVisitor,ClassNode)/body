{
  Map<String,Boolean> optOptions=cn.getCompileUnit().getConfig().getOptimizationOptions();
  if (optOptions.isEmpty()) {
  }
 else   if (optOptions.get("all") == Boolean.FALSE) {
    optimizeForInt=false;
  }
 else {
    if (optOptions.get("int") == Boolean.FALSE)     optimizeForInt=false;
  }
  this.classNode=cn;
  this.outermostClass=null;
  this.internalClassName=BytecodeHelper.getClassInternalName(classNode);
  this.callSiteWriter=new CallSiteWriter(this);
  this.invocationWriter=new InvocationWriter(this);
  this.binaryExpHelper=new BinaryExpressionHelper(this);
  if (optimizeForInt) {
    this.fastPathBinaryExpHelper=new BinaryExpressionMultiTypeDispatcher(this);
  }
 else {
    this.fastPathBinaryExpHelper=this.binaryExpHelper;
  }
  this.operandStack=new OperandStack(this);
  this.assertionWriter=new AssertionWriter(this);
  this.closureWriter=new ClosureWriter(this);
  this.internalBaseClassName=BytecodeHelper.getClassInternalName(classNode.getSuperClass());
  this.acg=asmClassGenerator;
  this.sourceUnit=acg.getSourceUnit();
  this.context=gcon;
  this.compileStack=new CompileStack(this);
  this.cv=cv;
  if (optimizeForInt) {
    this.statementWriter=new OptimizingStatementWriter(this);
  }
 else {
    this.statementWriter=new StatementWriter(this);
  }
}
