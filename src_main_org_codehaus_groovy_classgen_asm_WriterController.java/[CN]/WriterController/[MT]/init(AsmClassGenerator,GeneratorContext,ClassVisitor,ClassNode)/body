{
  Map<String,Boolean> optOptions=cn.getCompileUnit().getConfig().getOptimizationOptions();
  boolean invokedynamic=false;
  if (optOptions.isEmpty()) {
  }
 else   if (Boolean.FALSE.equals(optOptions.get("all"))) {
    optimizeForInt=false;
  }
 else {
    if (Boolean.TRUE.equals(optOptions.get("indy")))     invokedynamic=true;
    if (Boolean.FALSE.equals(optOptions.get("int")))     optimizeForInt=false;
    if (invokedynamic)     optimizeForInt=false;
  }
  this.classNode=cn;
  this.outermostClass=null;
  this.internalClassName=BytecodeHelper.getClassInternalName(classNode);
  this.callSiteWriter=new CallSiteWriter(this);
  if (invokedynamic) {
    bytecodeVersion=Opcodes.V1_7;
    try {
      this.invocationWriter=(InvocationWriter)indyWriter.newInstance(this);
    }
 catch (    Exception e) {
      throw new GroovyRuntimeException("Cannot use invokedynamic, indy module was excluded from this build.");
    }
  }
 else {
    this.invocationWriter=new InvocationWriter(this);
  }
  this.binaryExpHelper=new BinaryExpressionHelper(this);
  this.unaryExpressionHelper=new UnaryExpressionHelper(this);
  if (optimizeForInt) {
    this.fastPathBinaryExpHelper=new BinaryExpressionMultiTypeDispatcher(this);
    this.fastPathUnaryExpressionHelper=new UnaryExpressionHelper(this);
  }
 else {
    this.fastPathBinaryExpHelper=this.binaryExpHelper;
    this.fastPathUnaryExpressionHelper=new UnaryExpressionHelper(this);
  }
  this.operandStack=new OperandStack(this);
  this.assertionWriter=new AssertionWriter(this);
  this.closureWriter=new ClosureWriter(this);
  this.internalBaseClassName=BytecodeHelper.getClassInternalName(classNode.getSuperClass());
  this.acg=asmClassGenerator;
  this.sourceUnit=acg.getSourceUnit();
  this.context=gcon;
  this.compileStack=new CompileStack(this);
  this.cv=cv;
  if (optimizeForInt) {
    this.statementWriter=new OptimizingStatementWriter(this);
  }
 else {
    this.statementWriter=new StatementWriter(this);
  }
  this.typeChooser=new StatementMetaTypeChooser();
}
