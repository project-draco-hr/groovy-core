{
  ClassNode enumArray=enumClass.makeArray();
  FieldNode values=new FieldNode("$VALUES",PRIVATE_FS,enumArray,enumClass,null);
  values.setSynthetic(true);
{
    MethodNode valuesMethod=new MethodNode("values",PUBLIC_FS,enumArray,new Parameter[0],ClassNode.EMPTY_ARRAY,null);
    valuesMethod.setSynthetic(true);
    BlockStatement code=new BlockStatement();
    code.addStatement(new ReturnStatement(new MethodCallExpression(new FieldExpression(values),"clone",MethodCallExpression.NO_ARGUMENTS)));
    valuesMethod.setCode(code);
    enumClass.addMethod(valuesMethod);
  }
{
    Parameter stringParameter=new Parameter(ClassHelper.STRING_TYPE,"name");
    MethodNode valueOfMethod=new MethodNode("valueOf",PS,enumClass,new Parameter[]{stringParameter},ClassNode.EMPTY_ARRAY,null);
    ArgumentListExpression callArguments=new ArgumentListExpression();
    callArguments.addExpression(new ClassExpression(enumClass));
    callArguments.addExpression(new VariableExpression("name"));
    BlockStatement code=new BlockStatement();
    code.addStatement(new ReturnStatement(new MethodCallExpression(new ClassExpression(ClassHelper.Enum_Type),"valueOf",callArguments)));
    valueOfMethod.setCode(code);
    enumClass.addMethod(valueOfMethod);
  }
  addConstructor(enumClass);
{
    Parameter[] parameter=new Parameter[]{new Parameter(ClassHelper.OBJECT_TYPE.makeArray(),"para")};
    MethodNode initMethod=new MethodNode("$INIT",PRIVATE_FS,enumClass,parameter,ClassNode.EMPTY_ARRAY,null);
    initMethod.setSynthetic(true);
    ConstructorCallExpression cce=new ConstructorCallExpression(ClassNode.THIS,new ArgumentListExpression(new SpreadExpression(new VariableExpression("para"))));
    BlockStatement code=new BlockStatement();
    code.addStatement(new ReturnStatement(cce));
    initMethod.setCode(code);
    enumClass.addMethod(initMethod);
  }
{
    List fields=enumClass.getFields();
    List arrayInit=new ArrayList();
    int value=-1;
    Token assign=Token.newSymbol(Types.ASSIGN,-1,-1);
    List block=new ArrayList();
    for (Iterator iterator=fields.iterator(); iterator.hasNext(); ) {
      FieldNode field=(FieldNode)iterator.next();
      if ((field.getModifiers() & Opcodes.ACC_ENUM) == 0)       continue;
      value++;
      ArgumentListExpression args=new ArgumentListExpression();
      args.addExpression(new ConstantExpression(field.getName()));
      args.addExpression(new ConstantExpression(new Integer(value)));
      if (field.getInitialExpression() != null) {
        ListExpression oldArgs=(ListExpression)field.getInitialExpression();
        for (Iterator oldArgsIterator=oldArgs.getExpressions().iterator(); oldArgsIterator.hasNext(); ) {
          Expression exp=(Expression)oldArgsIterator.next();
          args.addExpression(exp);
        }
      }
      field.setInitialValueExpression(null);
      block.add(new ExpressionStatement(new BinaryExpression(new FieldExpression(field),assign,new MethodCallExpression(new ClassExpression(enumClass),"$INIT",args))));
    }
    block.add(new ExpressionStatement(new BinaryExpression(new FieldExpression(values),assign,new ArrayExpression(enumClass,arrayInit))));
    enumClass.addStaticInitializerStatements(block,true);
    enumClass.addField(values);
  }
}
