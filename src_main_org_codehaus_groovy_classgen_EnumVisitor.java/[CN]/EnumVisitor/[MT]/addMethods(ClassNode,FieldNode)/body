{
  List methods=enumClass.getMethods();
  boolean hasNext=false;
  boolean hasPrevious=false;
  for (int i=0; i < methods.size(); i++) {
    MethodNode m=(MethodNode)methods.get(i);
    if (m.getName().equals("next") && m.getParameters().length == 0)     hasNext=true;
    if (m.getName().equals("previous") && m.getParameters().length == 0)     hasPrevious=true;
    if (hasNext && hasPrevious)     break;
  }
{
    MethodNode valuesMethod=new MethodNode("values",PUBLIC_FS,enumClass.makeArray(),new Parameter[0],ClassNode.EMPTY_ARRAY,null);
    valuesMethod.setSynthetic(true);
    BlockStatement code=new BlockStatement();
    code.addStatement(new ReturnStatement(new MethodCallExpression(new FieldExpression(values),"clone",MethodCallExpression.NO_ARGUMENTS)));
    valuesMethod.setCode(code);
    enumClass.addMethod(valuesMethod);
  }
  if (!hasNext) {
    Token assign=Token.newSymbol(Types.ASSIGN,-1,-1);
    Token ge=Token.newSymbol(Types.COMPARE_GREATER_THAN_EQUAL,-1,-1);
    MethodNode nextMethod=new MethodNode("next",Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC,enumClass,new Parameter[0],ClassNode.EMPTY_ARRAY,null);
    nextMethod.setSynthetic(true);
    BlockStatement code=new BlockStatement();
    BlockStatement ifStatement=new BlockStatement();
    ifStatement.addStatement(new ExpressionStatement(new BinaryExpression(new VariableExpression("ordinal"),assign,new ConstantExpression(Integer.valueOf(0)))));
    code.addStatement(new ExpressionStatement(new DeclarationExpression(new VariableExpression("ordinal"),assign,new MethodCallExpression(new MethodCallExpression(VariableExpression.THIS_EXPRESSION,"ordinal",MethodCallExpression.NO_ARGUMENTS),"next",MethodCallExpression.NO_ARGUMENTS))));
    code.addStatement(new IfStatement(new BooleanExpression(new BinaryExpression(new VariableExpression("ordinal"),ge,new MethodCallExpression(new FieldExpression(values),"size",MethodCallExpression.NO_ARGUMENTS))),ifStatement,EmptyStatement.INSTANCE));
    code.addStatement(new ReturnStatement(new MethodCallExpression(new FieldExpression(values),"getAt",new VariableExpression("ordinal"))));
    nextMethod.setCode(code);
    enumClass.addMethod(nextMethod);
  }
  if (!hasPrevious) {
    Token assign=Token.newSymbol(Types.ASSIGN,-1,-1);
    Token lt=Token.newSymbol(Types.COMPARE_LESS_THAN,-1,-1);
    MethodNode nextMethod=new MethodNode("previous",Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC,enumClass,new Parameter[0],ClassNode.EMPTY_ARRAY,null);
    nextMethod.setSynthetic(true);
    BlockStatement code=new BlockStatement();
    BlockStatement ifStatement=new BlockStatement();
    ifStatement.addStatement(new ExpressionStatement(new BinaryExpression(new VariableExpression("ordinal"),assign,new MethodCallExpression(new MethodCallExpression(new FieldExpression(values),"size",MethodCallExpression.NO_ARGUMENTS),"minus",new ConstantExpression(Integer.valueOf(1))))));
    code.addStatement(new ExpressionStatement(new DeclarationExpression(new VariableExpression("ordinal"),assign,new MethodCallExpression(new MethodCallExpression(VariableExpression.THIS_EXPRESSION,"ordinal",MethodCallExpression.NO_ARGUMENTS),"previous",MethodCallExpression.NO_ARGUMENTS))));
    code.addStatement(new IfStatement(new BooleanExpression(new BinaryExpression(new VariableExpression("ordinal"),lt,new ConstantExpression(Integer.valueOf(0)))),ifStatement,EmptyStatement.INSTANCE));
    code.addStatement(new ReturnStatement(new MethodCallExpression(new FieldExpression(values),"getAt",new VariableExpression("ordinal"))));
    nextMethod.setCode(code);
    enumClass.addMethod(nextMethod);
  }
{
    Parameter stringParameter=new Parameter(ClassHelper.STRING_TYPE,"name");
    MethodNode valueOfMethod=new MethodNode("valueOf",PS,enumClass,new Parameter[]{stringParameter},ClassNode.EMPTY_ARRAY,null);
    ArgumentListExpression callArguments=new ArgumentListExpression();
    callArguments.addExpression(new ClassExpression(enumClass));
    callArguments.addExpression(new VariableExpression("name"));
    BlockStatement code=new BlockStatement();
    code.addStatement(new ReturnStatement(new MethodCallExpression(new ClassExpression(ClassHelper.Enum_Type),"valueOf",callArguments)));
    valueOfMethod.setCode(code);
    valueOfMethod.setSynthetic(true);
    enumClass.addMethod(valueOfMethod);
  }
}
