{
  ClassNode enumRef=enumClass.getPlainNodeReference();
  Parameter[] parameter=new Parameter[]{new Parameter(ClassHelper.OBJECT_TYPE.makeArray(),"para")};
  MethodNode initMethod=new MethodNode("$INIT",PUBLIC_FS | Opcodes.ACC_SYNTHETIC,enumRef,parameter,ClassNode.EMPTY_ARRAY,null);
  initMethod.setSynthetic(true);
  ConstructorCallExpression cce=new ConstructorCallExpression(ClassNode.THIS,new ArgumentListExpression(new SpreadExpression(new VariableExpression("para"))));
  BlockStatement code=new BlockStatement();
  code.addStatement(new ReturnStatement(cce));
  initMethod.setCode(code);
  enumClass.addMethod(initMethod);
  List<FieldNode> fields=enumClass.getFields();
  List<Expression> arrayInit=new ArrayList<Expression>();
  int value=-1;
  Token assign=Token.newSymbol(Types.ASSIGN,-1,-1);
  List<Statement> block=new ArrayList<Statement>();
  FieldNode tempMin=null;
  FieldNode tempMax=null;
  for (  FieldNode field : fields) {
    if ((field.getModifiers() & Opcodes.ACC_ENUM) == 0)     continue;
    value++;
    if (tempMin == null)     tempMin=field;
    tempMax=field;
    ClassNode enumBase=enumClass;
    ArgumentListExpression args=new ArgumentListExpression();
    args.addExpression(new ConstantExpression(field.getName()));
    args.addExpression(new ConstantExpression(value));
    if (field.getInitialExpression() == null) {
      if ((enumClass.getModifiers() & Opcodes.ACC_ABSTRACT) != 0) {
        addError(field,"The enum constant " + field.getName() + " must override abstract methods from "+ enumBase.getName()+ ".");
        continue;
      }
    }
 else {
      ListExpression oldArgs=(ListExpression)field.getInitialExpression();
      List<MapEntryExpression> savedMapEntries=new ArrayList<MapEntryExpression>();
      for (      Expression exp : oldArgs.getExpressions()) {
        if (exp instanceof MapEntryExpression) {
          savedMapEntries.add((MapEntryExpression)exp);
          continue;
        }
        InnerClassNode inner=null;
        if (exp instanceof ClassExpression) {
          ClassExpression clazzExp=(ClassExpression)exp;
          ClassNode ref=clazzExp.getType();
          if (ref instanceof EnumConstantClassNode) {
            inner=(InnerClassNode)ref;
          }
        }
        if (inner != null) {
          List<MethodNode> baseMethods=enumBase.getMethods();
          for (          MethodNode methodNode : baseMethods) {
            if (!methodNode.isAbstract())             continue;
            MethodNode enumConstMethod=inner.getMethod(methodNode.getName(),methodNode.getParameters());
            if (enumConstMethod == null || (enumConstMethod.getModifiers() & Opcodes.ACC_ABSTRACT) != 0) {
              addError(field,"Can't have an abstract method in enum constant " + field.getName() + ". Implement method '"+ methodNode.getTypeDescriptor()+ "'.");
            }
          }
          if (inner.getVariableScope() == null) {
            enumBase=inner;
            initMethod.setModifiers(initMethod.getModifiers() & ~Opcodes.ACC_FINAL);
            continue;
          }
        }
        args.addExpression(exp);
      }
      if (savedMapEntries.size() > 0) {
        args.getExpressions().add(2,new MapExpression(savedMapEntries));
      }
    }
    field.setInitialValueExpression(null);
    block.add(new ExpressionStatement(new BinaryExpression(new FieldExpression(field),assign,new StaticMethodCallExpression(enumBase,"$INIT",args))));
    arrayInit.add(new FieldExpression(field));
  }
  if (!isAic) {
    if (tempMin != null) {
      block.add(new ExpressionStatement(new BinaryExpression(new FieldExpression(minValue),assign,new FieldExpression(tempMin))));
      block.add(new ExpressionStatement(new BinaryExpression(new FieldExpression(maxValue),assign,new FieldExpression(tempMax))));
      enumClass.addField(minValue);
      enumClass.addField(maxValue);
    }
    block.add(new ExpressionStatement(new BinaryExpression(new FieldExpression(values),assign,new ArrayExpression(enumClass,arrayInit))));
    enumClass.addField(values);
  }
  enumClass.addStaticInitializerStatements(block,true);
}
