{
  Parameter[] parameters=new Parameter[1];
  parameters[0]=new Parameter(MAP_TYPE,"namedArgs");
  BlockStatement code=new BlockStatement();
  List<String> knownNames=new ArrayList<String>();
  VariableExpression namedArgs=new VariableExpression("namedArgs");
  for (  PropertyNode pNode : enumClass.getProperties()) {
    BooleanExpression ifTest=new BooleanExpression(new MethodCallExpression(namedArgs,"containsKey",new ConstantExpression(pNode.getName())));
    Expression pExpr=new VariableExpression(pNode);
    Statement thenBlock=assignStatement(pExpr,new PropertyExpression(namedArgs,pNode.getName()));
    knownNames.add(pNode.getName());
    IfStatement ifStatement=new IfStatement(ifTest,thenBlock,new EmptyStatement());
    code.addStatement(ifStatement);
  }
  Expression checkArgs=new ArgumentListExpression(new VariableExpression("this"),namedArgs);
  code.addStatement(new ExpressionStatement(new StaticMethodCallExpression(CHECK_METHOD_TYPE,"checkPropNames",checkArgs)));
  ConstructorNode init=new ConstructorNode(Opcodes.ACC_PUBLIC,parameters,ClassNode.EMPTY_ARRAY,code);
  enumClass.addConstructor(init);
  code=new BlockStatement();
  code.addStatement(new ExpressionStatement(new ConstructorCallExpression(ClassNode.THIS,new StaticMethodCallExpression(COLLECTIONS_TYPE,"emptyMap",MethodCallExpression.NO_ARGUMENTS))));
  init=new ConstructorNode(Opcodes.ACC_PUBLIC,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,code);
  enumClass.addConstructor(init);
}
