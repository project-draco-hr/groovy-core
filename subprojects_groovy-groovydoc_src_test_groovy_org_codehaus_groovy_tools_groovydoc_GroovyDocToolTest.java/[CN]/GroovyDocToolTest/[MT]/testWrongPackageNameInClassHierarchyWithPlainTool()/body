{
  List<String> srcList=new ArrayList<String>();
  String fullPathBaseA="org/codehaus/groovy/tools/groovydoc/testfiles/a/Base";
  srcList.add(fullPathBaseA + ".groovy");
  String fullPathBaseB="org/codehaus/groovy/tools/groovydoc/testfiles/b/Base";
  srcList.add(fullPathBaseB + ".groovy");
  String fullPathBaseC="org/codehaus/groovy/tools/groovydoc/testfiles/c/Base";
  srcList.add("org/codehaus/groovy/tools/groovydoc/testfiles/a/DescendantA.groovy");
  srcList.add("org/codehaus/groovy/tools/groovydoc/testfiles/b/DescendantB.groovy");
  srcList.add("org/codehaus/groovy/tools/groovydoc/testfiles/a/DescendantC.groovy");
  srcList.add("org/codehaus/groovy/tools/groovydoc/testfiles/a/DescendantD.groovy");
  srcList.add("org/codehaus/groovy/tools/groovydoc/testfiles/c/DescendantE.groovy");
  srcList.add("org/codehaus/groovy/tools/groovydoc/testfiles/c/DescendantF.groovy");
  plainTool.add(srcList);
  GroovyRootDoc root=plainTool.getRootDoc();
  GroovyClassDoc classDocDescendantA=getGroovyClassDocByName(root,"DescendantA");
  assertTrue(fullPathBaseA.equals(root.classNamed(classDocDescendantA,"Base").getFullPathName()));
  GroovyClassDoc classDocDescendantB=getGroovyClassDocByName(root,"DescendantB");
  assertTrue(fullPathBaseB.equals(root.classNamed(classDocDescendantB,"Base").getFullPathName()));
  GroovyClassDoc classDocDescendantC=getGroovyClassDocByName(root,"DescendantC");
  assertTrue(fullPathBaseA.equals(root.classNamed(classDocDescendantC,"Base").getFullPathName()));
  GroovyClassDoc classDocDescendantD=getGroovyClassDocByName(root,"DescendantD");
  assertTrue(fullPathBaseA.equals(root.classNamed(classDocDescendantD,"Base").getFullPathName()));
  GroovyClassDoc classDocDescendantE=getGroovyClassDocByName(root,"DescendantE");
  assertTrue(fullPathBaseC.equals(root.classNamed(classDocDescendantE,"Base").getFullPathName()));
  GroovyClassDoc classDocDescendantF=getGroovyClassDocByName(root,"DescendantF");
  assertTrue(fullPathBaseC.equals(root.classNamed(classDocDescendantF,"Base").getFullPathName()));
}
