{
  final Range range1=createRange(1,5);
  Range range2=createRange(1,5);
  assertTrue("ranges not equal",range1.equals((Object)range2));
  assertTrue("ranges not equal",range2.equals((Object)range1));
  assertEquals("hash codes not equal",range1.hashCode(),range2.hashCode());
  range2=createRange(0,5);
  assertFalse("ranges equal",range1.equals((Object)range2));
  assertFalse("ranges equal",range2.equals((Object)range1));
  assertFalse("hash codes equal",range1.hashCode() == range2.hashCode());
  range2=createRange(1,6);
  assertFalse("ranges equal",range1.equals((Object)range2));
  assertFalse("ranges equal",range2.equals((Object)range1));
  assertFalse("hash codes equal",range1.hashCode() == range2.hashCode());
  range2=createRange(0,6);
  assertFalse("ranges equal",range1.equals((Object)range2));
  assertFalse("ranges equal",range2.equals((Object)range1));
  assertFalse("hash codes equal",range1.hashCode() == range2.hashCode());
  range2=createRange(2,4);
  assertFalse("ranges equal",range1.equals((Object)range2));
  assertFalse("ranges equal",range2.equals((Object)range1));
  assertFalse("hash codes equal",range1.hashCode() == range2.hashCode());
  range2=createRange(5,1);
  assertFalse("ranges equal",range1.equals((Object)range2));
  assertFalse("ranges equal",range2.equals((Object)range1));
  assertFalse("hash codes equal",range1.hashCode() == range2.hashCode());
}
