{
  final OperandStack operandStack=controller.getOperandStack();
  ClassNode BEType=BinaryExpressionMultiTypeDispatcher.getType(expression,controller.getClassNode());
  Expression callSiteReceiverSwap=new BytecodeExpression(BEType){
    @Override public void visit(    MethodVisitor mv){
      operandStack.push(ClassHelper.OBJECT_TYPE);
      operandStack.swap();
      setType(operandStack.getTopOperand());
      operandStack.remove(2);
    }
  }
;
  controller.getCallSiteWriter().makeCallSite(callSiteReceiverSwap,method,MethodCallExpression.NO_ARGUMENTS,false,false,false,false);
  if (usesSubscript != null) {
    CompileStack compileStack=controller.getCompileStack();
    BinaryExpression be=(BinaryExpression)expression;
    ClassNode methodResultType=operandStack.getTopOperand();
    final int resultIdx=compileStack.defineTemporaryVariable("postfix_" + method,methodResultType,true);
    BytecodeExpression methodResultLoader=new VariableSlotLoader(methodResultType,resultIdx,operandStack);
    assignToArray(be,be.getLeftExpression(),usesSubscript,methodResultLoader);
    compileStack.removeVar(resultIdx);
  }
 else   if (expression instanceof VariableExpression || expression instanceof FieldExpression || expression instanceof PropertyExpression) {
    operandStack.dup();
    controller.getCompileStack().pushLHS(true);
    expression.visit(controller.getAcg());
    controller.getCompileStack().popLHS();
  }
}
