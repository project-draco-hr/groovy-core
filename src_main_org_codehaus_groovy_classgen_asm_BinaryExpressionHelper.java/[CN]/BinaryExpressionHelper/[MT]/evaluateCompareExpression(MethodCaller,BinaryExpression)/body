{
  Expression leftExp=expression.getLeftExpression();
  TypeChooser typeChooser=controller.getTypeChooser();
  ClassNode cn=controller.getClassNode();
  ClassNode leftType=typeChooser.resolveType(leftExp,cn);
  Expression rightExp=expression.getRightExpression();
  ClassNode rightType=typeChooser.resolveType(rightExp,cn);
  boolean done=false;
  if (ClassHelper.isPrimitiveType(leftType) && ClassHelper.isPrimitiveType(rightType)) {
    BinaryExpressionMultiTypeDispatcher helper=new BinaryExpressionMultiTypeDispatcher(getController());
    done=helper.doPrimitiveCompare(leftType,rightType,expression);
  }
  if (!done) {
    AsmClassGenerator acg=controller.getAcg();
    OperandStack operandStack=controller.getOperandStack();
    leftExp.visit(acg);
    operandStack.box();
    rightExp.visit(acg);
    operandStack.box();
    compareMethod.call(controller.getMethodVisitor());
    ClassNode resType=ClassHelper.boolean_TYPE;
    if (compareMethod == findRegexMethod) {
      resType=ClassHelper.OBJECT_TYPE;
    }
    operandStack.replace(resType,2);
  }
}
