{
  AsmClassGenerator acg=controller.getAcg();
  CompileStack compileStack=controller.getCompileStack();
  OperandStack operandStack=controller.getOperandStack();
  Expression rightExpression=expression.getRightExpression();
  Expression leftExpression=expression.getLeftExpression();
  if (defineVariable && rightExpression instanceof EmptyExpression && !(leftExpression instanceof TupleExpression)) {
    VariableExpression ve=(VariableExpression)leftExpression;
    BytecodeVariable var=compileStack.defineVariable(ve,false);
    operandStack.loadOrStoreVariable(var,false);
    return;
  }
  ClassNode rhsType;
  if (rightExpression instanceof EmptyExpression) {
    rhsType=leftExpression.getType();
    loadInitValue(rhsType);
  }
 else {
    rightExpression.visit(acg);
    rhsType=controller.getOperandStack().getTopOperand();
  }
  boolean directAssignment=defineVariable && !(leftExpression instanceof TupleExpression);
  int rhsValueId;
  if (directAssignment) {
    VariableExpression var=(VariableExpression)leftExpression;
    rhsType=controller.getTypeChooser().resolveType(var,controller.getClassNode());
    operandStack.doGroovyCast(rhsType);
    rhsValueId=compileStack.defineVariable(var,rhsType,true).getIndex();
  }
 else {
    rhsValueId=compileStack.defineTemporaryVariable("$rhs",rhsType,true);
  }
  BytecodeExpression rhsValueLoader=new VariableSlotLoader(rhsType,rhsValueId,operandStack);
  if (leftExpression instanceof BinaryExpression) {
    BinaryExpression leftBinExpr=(BinaryExpression)leftExpression;
    if (leftBinExpr.getOperation().getType() == Types.LEFT_SQUARE_BRACKET) {
      assignToArray(expression,leftBinExpr.getLeftExpression(),leftBinExpr.getRightExpression(),rhsValueLoader);
    }
    compileStack.removeVar(rhsValueId);
    return;
  }
  compileStack.pushLHS(true);
  if (leftExpression instanceof TupleExpression) {
    TupleExpression tuple=(TupleExpression)leftExpression;
    int i=0;
    for (    Expression e : tuple.getExpressions()) {
      VariableExpression var=(VariableExpression)e;
      MethodCallExpression call=new MethodCallExpression(rhsValueLoader,"getAt",new ArgumentListExpression(new ConstantExpression(i)));
      call.visit(acg);
      i++;
      if (defineVariable) {
        operandStack.doGroovyCast(var);
        compileStack.defineVariable(var,true);
        operandStack.remove(1);
      }
 else {
        acg.visitVariableExpression(var);
      }
    }
  }
 else   if (defineVariable) {
    rhsValueLoader.visit(acg);
    operandStack.remove(1);
    compileStack.popLHS();
    return;
  }
 else {
    int mark=operandStack.getStackLength();
    rhsValueLoader.visit(acg);
    operandStack.doGroovyCast(leftExpression.getType());
    leftExpression.visit(acg);
    operandStack.remove(operandStack.getStackLength() - mark);
  }
  compileStack.popLHS();
  rhsValueLoader.visit(acg);
  compileStack.removeVar(rhsValueId);
}
