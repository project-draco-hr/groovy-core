{
  if (methods.isEmpty())   return Collections.emptyList();
  List<MethodNode> bestChoices=new LinkedList<MethodNode>();
  int bestDist=Integer.MAX_VALUE;
  ClassNode actualReceiver;
  Collection<MethodNode> choicesLeft=removeCovariants(methods);
  for (  MethodNode m : choicesLeft) {
    final ClassNode declaringClass=m.getDeclaringClass();
    actualReceiver=receiver != null ? receiver : declaringClass;
    Parameter[] params=parameterizeArguments(actualReceiver,m);
    if (params.length == args.length) {
      int allPMatch=allParametersAndArgumentsMatch(params,args);
      boolean firstParamMatches=true;
      if (args.length > 0) {
        Parameter[] firstParams=new Parameter[params.length - 1];
        System.arraycopy(params,0,firstParams,0,firstParams.length);
        firstParamMatches=allParametersAndArgumentsMatch(firstParams,args) >= 0;
      }
      int lastArgMatch=isVargs(params) && firstParamMatches ? lastArgMatchesVarg(params,args) : -1;
      if (lastArgMatch >= 0) {
        lastArgMatch+=256 - params.length;
      }
      int dist=allPMatch >= 0 ? Math.max(allPMatch,lastArgMatch) : lastArgMatch;
      if (dist >= 0 && !actualReceiver.equals(declaringClass))       dist+=getDistance(actualReceiver,declaringClass);
      if (dist >= 0 && dist < bestDist) {
        bestChoices.clear();
        bestChoices.add(m);
        bestDist=dist;
      }
 else       if (dist >= 0 && dist == bestDist) {
        bestChoices.add(m);
      }
    }
 else     if (isVargs(params)) {
      boolean firstParamMatches=true;
      if (args.length > 0) {
        Parameter[] firstParams=new Parameter[params.length - 1];
        System.arraycopy(params,0,firstParams,0,firstParams.length);
        firstParamMatches=allParametersAndArgumentsMatch(firstParams,args) >= 0;
      }
      if (firstParamMatches) {
        if (params.length == args.length + 1) {
          if (bestDist > 1) {
            bestChoices.clear();
            bestChoices.add(m);
            bestDist=1;
          }
        }
 else {
          int dist=excessArgumentsMatchesVargsParameter(params,args);
          if (dist >= 0 && !actualReceiver.equals(declaringClass))           dist+=getDistance(actualReceiver,declaringClass);
          dist+=256 - params.length;
          if (params.length < args.length && dist >= 0) {
            if (dist >= 0 && dist < bestDist) {
              bestChoices.clear();
              bestChoices.add(m);
              bestDist=dist;
            }
 else             if (dist >= 0 && dist == bestDist) {
              bestChoices.add(m);
            }
          }
        }
      }
    }
  }
  return bestChoices;
}
