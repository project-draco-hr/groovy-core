{
  Map<String,List<MethodNode>> methods=new HashMap<String,List<MethodNode>>();
  CachedClass cachedClass=ReflectionCache.getCachedClass(DefaultGroovyMethods.class);
  for (  MetaMethod metaMethod : cachedClass.getMethods()) {
    CachedClass[] types=metaMethod.getParameterTypes();
    if (metaMethod.isStatic() && metaMethod.isPublic() && types.length > 0) {
      Parameter[] parameters=new Parameter[types.length - 1];
      for (int i=1; i < types.length; i++) {
        CachedClass type=types[i];
        parameters[i - 1]=new Parameter(ClassHelper.make(type.getTheClass()),"p" + i);
      }
      MethodNode node=new MethodNode(metaMethod.getName(),metaMethod.getModifiers(),ClassHelper.make(metaMethod.getReturnType()),parameters,ClassNode.EMPTY_ARRAY,null);
      node.setDeclaringClass(ClassHelper.make(types[0].getTheClass()));
      String name=types[0].getName();
      List<MethodNode> nodes=methods.get(name);
      if (nodes == null) {
        nodes=new LinkedList<MethodNode>();
        methods.put(name,nodes);
      }
      nodes.add(node);
    }
  }
  return methods;
}
