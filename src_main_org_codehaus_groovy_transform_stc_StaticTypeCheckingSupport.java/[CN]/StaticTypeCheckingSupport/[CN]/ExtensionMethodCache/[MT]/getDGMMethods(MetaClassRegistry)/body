{
  Set<Class> instanceExtClasses=new LinkedHashSet<Class>();
  Set<Class> staticExtClasses=new LinkedHashSet<Class>();
  if (registry instanceof MetaClassRegistryImpl) {
    MetaClassRegistryImpl impl=(MetaClassRegistryImpl)registry;
    List<ExtensionModule> modules=impl.getModuleRegistry().getModules();
    for (    ExtensionModule module : modules) {
      if (module instanceof MetaInfExtensionModule) {
        MetaInfExtensionModule extensionModule=(MetaInfExtensionModule)module;
        instanceExtClasses.addAll(extensionModule.getInstanceMethodsExtensionClasses());
        staticExtClasses.addAll(extensionModule.getStaticMethodsExtensionClasses());
      }
    }
  }
  Map<String,List<MethodNode>> methods=new HashMap<String,List<MethodNode>>();
  Collections.addAll(instanceExtClasses,DefaultGroovyMethods.DGM_LIKE_CLASSES);
  Collections.addAll(instanceExtClasses,DefaultGroovyMethods.additionals);
  staticExtClasses.add(DefaultGroovyStaticMethods.class);
  instanceExtClasses.add(ObjectArrayStaticTypesHelper.class);
  List<Class> allClasses=new ArrayList<Class>(instanceExtClasses.size() + staticExtClasses.size());
  allClasses.addAll(instanceExtClasses);
  allClasses.addAll(staticExtClasses);
  for (  Class dgmLikeClass : allClasses) {
    ClassNode cn=ClassHelper.makeWithoutCaching(dgmLikeClass,true);
    for (    MethodNode metaMethod : cn.getMethods()) {
      Parameter[] types=metaMethod.getParameters();
      if (metaMethod.isStatic() && metaMethod.isPublic() && types.length > 0 && metaMethod.getAnnotations(Deprecated_TYPE).isEmpty()) {
        Parameter[] parameters=new Parameter[types.length - 1];
        System.arraycopy(types,1,parameters,0,parameters.length);
        ExtensionMethodNode node=new ExtensionMethodNode(metaMethod,metaMethod.getName(),metaMethod.getModifiers(),metaMethod.getReturnType(),parameters,ClassNode.EMPTY_ARRAY,null,staticExtClasses.contains(dgmLikeClass));
        node.setGenericsTypes(metaMethod.getGenericsTypes());
        ClassNode declaringClass=types[0].getType();
        String declaringClassName=declaringClass.getName();
        node.setDeclaringClass(declaringClass);
        List<MethodNode> nodes=methods.get(declaringClassName);
        if (nodes == null) {
          nodes=new LinkedList<MethodNode>();
          methods.put(declaringClassName,nodes);
        }
        nodes.add(node);
      }
    }
  }
  return methods;
}
