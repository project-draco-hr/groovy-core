{
  AnnotationNode annotation=(AnnotationNode)nodes[0];
  ClassNode parent=(ClassNode)nodes[1];
  ClassNode targetClass=getTargetClass(source,annotation);
  final LinkedList<Set<String>> varStack=new LinkedList<Set<String>>();
  Set<String> names=new HashSet<String>();
  for (  FieldNode field : parent.getFields()) {
    names.add(field.getName());
  }
  varStack.add(names);
  final ClassCodeExpressionTransformer expressionTransformer=new ClassCodeExpressionTransformer(){
    protected SourceUnit getSourceUnit(){
      return source;
    }
    public void visitMethod(    MethodNode node){
      Set<String> names=new HashSet<String>();
      names.addAll(varStack.getLast());
      final Parameter[] params=node.getParameters();
      for (int i=0; i < params.length; i++) {
        Parameter param=params[i];
        names.add(param.getName());
      }
      varStack.add(names);
      super.visitMethod(node);
      varStack.removeLast();
    }
    public void visitBlockStatement(    BlockStatement block){
      Set<String> names=new HashSet<String>();
      names.addAll(varStack.getLast());
      varStack.add(names);
      super.visitBlockStatement(block);
      varStack.remove(names);
    }
    public void visitDeclarationExpression(    DeclarationExpression expression){
      varStack.getLast().add(expression.getVariableExpression().getName());
      super.visitDeclarationExpression(expression);
    }
    public Expression transform(    Expression exp){
      if (exp instanceof VariableExpression) {
        VariableExpression ve=(VariableExpression)exp;
        if (ve.getName().equals("this"))         return THIS_EXPRESSION;
 else {
          if (!varStack.getLast().contains(ve.getName())) {
            return new PropertyExpression(THIS_EXPRESSION,ve.getName());
          }
        }
      }
      return super.transform(exp);
    }
  }
;
  for (  MethodNode method : parent.getMethods()) {
    if (!method.isStatic()) {
      method.setModifiers(method.getModifiers() | Opcodes.ACC_STATIC);
      final Parameter[] origParams=method.getParameters();
      final Parameter[] newParams=new Parameter[origParams.length + 1];
      newParams[0]=new Parameter(targetClass,"$this");
      System.arraycopy(origParams,0,newParams,1,origParams.length);
      method.setParameters(newParams);
      expressionTransformer.visitMethod(method);
    }
  }
}
