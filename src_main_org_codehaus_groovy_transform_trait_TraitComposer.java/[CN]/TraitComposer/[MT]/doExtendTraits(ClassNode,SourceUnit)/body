{
  boolean isItselfTrait=TraitConstants.isTrait(cNode);
  SuperCallTraitTransformer superCallTransformer=new SuperCallTraitTransformer(unit);
  if (isItselfTrait) {
    checkTraitAllowed(cNode,unit);
    return;
  }
  if (!cNode.getNameWithoutPackage().endsWith(TraitConstants.TRAIT_HELPER)) {
    List<ClassNode> traits=findTraits(cNode);
    for (    ClassNode trait : traits) {
      TraitHelpersTuple helpers=TraitConstants.findHelpers(trait);
      applyTrait(trait,cNode,helpers);
      superCallTransformer.visitClass(cNode);
    }
  }
}
