{
  ClassNode[] exceptionNodes=copyExceptions(helperMethod.getExceptions());
  MethodCallExpression mce=new MethodCallExpression(new ClassExpression(helperClassNode),helperMethod.getName(),helperMethodArgList);
  mce.setImplicitThis(false);
  ClassNode fixedReturnType=correctToGenericsSpecRecurse(genericsSpec,helperMethod.getReturnType());
  Expression forwardExpression=genericsSpec.isEmpty() ? mce : new CastExpression(fixedReturnType,mce);
  int access=helperMethod.getModifiers();
  boolean isHelperForStaticMethod=helperMethodParams[0].getOriginType().equals(ClassHelper.CLASS_Type);
  if (Modifier.isPrivate(access) && !isHelperForStaticMethod) {
    return;
  }
  if (!isHelperForStaticMethod) {
    access=access ^ Opcodes.ACC_STATIC;
  }
  MethodNode forwarder=new MethodNode(helperMethod.getName(),access,fixedReturnType,forwarderParams,exceptionNodes,new ExpressionStatement(forwardExpression));
  List<AnnotationNode> copied=new LinkedList<AnnotationNode>();
  List<AnnotationNode> notCopied=Collections.emptyList();
  GeneralUtils.copyAnnotatedNodeAnnotations(helperMethod,copied,notCopied);
  if (!copied.isEmpty()) {
    forwarder.addAnnotations(copied);
  }
  if (originalMethod != null) {
    forwarder.setGenericsTypes(originalMethod.getGenericsTypes());
  }
  AnnotationNode bridgeAnnotation=new AnnotationNode(Traits.TRAITBRIDGE_CLASSNODE);
  bridgeAnnotation.addMember("traitClass",new ClassExpression(trait));
  bridgeAnnotation.addMember("desc",new ConstantExpression(BytecodeHelper.getMethodDescriptor(helperMethod.getReturnType(),traitMethodParams)));
  forwarder.addAnnotation(bridgeAnnotation);
  if (!shouldSkipMethod(targetNode,forwarder.getName(),forwarderParams)) {
    targetNode.addMethod(forwarder);
  }
  createSuperForwarder(targetNode,forwarder,genericsSpec);
}
