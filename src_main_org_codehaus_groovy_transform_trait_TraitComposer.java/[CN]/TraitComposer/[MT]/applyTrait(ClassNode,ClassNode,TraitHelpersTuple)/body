{
  ClassNode helperClassNode=helpers.getHelper();
  ClassNode fieldHelperClassNode=helpers.getFieldHelper();
  Map genericsSpec=GenericsUtils.createGenericsSpec(cNode,new HashMap());
  genericsSpec=GenericsUtils.createGenericsSpec(trait,genericsSpec);
  for (  MethodNode methodNode : helperClassNode.getAllDeclaredMethods()) {
    String name=methodNode.getName();
    Parameter[] helperMethodParams=methodNode.getParameters();
    boolean isAbstract=methodNode.isAbstract();
    if (!isAbstract && helperMethodParams.length > 0 && ((methodNode.getModifiers() & Opcodes.ACC_STATIC) == Opcodes.ACC_STATIC) && !name.contains("$")) {
      ArgumentListExpression argList=new ArgumentListExpression();
      argList.addExpression(new VariableExpression("this"));
      Parameter[] origParams=new Parameter[helperMethodParams.length - 1];
      Parameter[] params=new Parameter[helperMethodParams.length - 1];
      for (int i=1; i < helperMethodParams.length; i++) {
        Parameter parameter=helperMethodParams[i];
        ClassNode originType=parameter.getOriginType();
        ClassNode fixedType=correctToGenericsSpecRecurse(genericsSpec,originType);
        Parameter newParam=new Parameter(fixedType,"arg" + i);
        List<AnnotationNode> copied=new LinkedList<AnnotationNode>();
        List<AnnotationNode> notCopied=new LinkedList<AnnotationNode>();
        GeneralUtils.copyAnnotatedNodeAnnotations(parameter,copied,notCopied);
        newParam.addAnnotations(copied);
        params[i - 1]=newParam;
        origParams[i - 1]=parameter;
        argList.addExpression(new VariableExpression(params[i - 1]));
      }
      createForwarderMethod(trait,cNode,methodNode,helperClassNode,genericsSpec,helperMethodParams,origParams,params,argList);
    }
  }
  cNode.addObjectInitializerStatements(new ExpressionStatement(new MethodCallExpression(new ClassExpression(helperClassNode),Traits.INIT_METHOD,new ArgumentListExpression(new VariableExpression("this")))));
  cNode.addStaticInitializerStatements(Collections.<Statement>singletonList(new ExpressionStatement(new MethodCallExpression(new ClassExpression(helperClassNode),Traits.STATIC_INIT_METHOD,new ArgumentListExpression(new VariableExpression("this"))))),false);
  if (fieldHelperClassNode != null) {
    cNode.addInterface(fieldHelperClassNode);
    List<MethodNode> declaredMethods=fieldHelperClassNode.getAllDeclaredMethods();
    Collections.sort(declaredMethods,GETTER_FIRST_COMPARATOR);
    for (    MethodNode methodNode : declaredMethods) {
      String fieldName=methodNode.getName();
      if (fieldName.endsWith(Traits.DIRECT_GETTER_SUFFIX) || fieldName.endsWith(Traits.DIRECT_SETTER_SUFFIX)) {
        int suffixIdx=fieldName.lastIndexOf("$");
        fieldName=fieldName.substring(0,suffixIdx);
        String operation=methodNode.getName().substring(suffixIdx + 1);
        boolean getter="get".equals(operation);
        ClassNode returnType=correctToGenericsSpecRecurse(genericsSpec,methodNode.getReturnType());
        int isStatic=0;
        boolean publicField=true;
        FieldNode helperField=fieldHelperClassNode.getField(Traits.FIELD_PREFIX + Traits.PUBLIC_FIELD_PREFIX + fieldName);
        if (helperField == null) {
          publicField=false;
          helperField=fieldHelperClassNode.getField(Traits.FIELD_PREFIX + Traits.PRIVATE_FIELD_PREFIX + fieldName);
        }
        if (helperField == null) {
          publicField=true;
          helperField=fieldHelperClassNode.getField(Traits.STATIC_FIELD_PREFIX + Traits.PUBLIC_FIELD_PREFIX + fieldName);
          if (helperField == null) {
            publicField=false;
            helperField=fieldHelperClassNode.getField(Traits.STATIC_FIELD_PREFIX + Traits.PRIVATE_FIELD_PREFIX + fieldName);
          }
          isStatic=Opcodes.ACC_STATIC;
        }
        if (getter) {
          if (helperField != null) {
            List<AnnotationNode> copied=new LinkedList<AnnotationNode>();
            List<AnnotationNode> notCopied=new LinkedList<AnnotationNode>();
            GeneralUtils.copyAnnotatedNodeAnnotations(helperField,copied,notCopied);
            FieldNode fieldNode=cNode.addField(fieldName,(publicField ? Opcodes.ACC_PUBLIC : Opcodes.ACC_PRIVATE) | isStatic,returnType,null);
            fieldNode.addAnnotations(copied);
          }
        }
        Parameter[] newParams;
        if (getter) {
          newParams=Parameter.EMPTY_ARRAY;
        }
 else {
          ClassNode originType=methodNode.getParameters()[0].getOriginType();
          ClassNode fixedType=originType.isGenericsPlaceHolder() ? ClassHelper.OBJECT_TYPE : correctToGenericsSpecRecurse(genericsSpec,originType);
          newParams=new Parameter[]{new Parameter(fixedType,"val")};
        }
        Expression fieldExpr=new VariableExpression(cNode.getField(fieldName));
        Statement body=getter ? new ReturnStatement(fieldExpr) : new ExpressionStatement(new BinaryExpression(fieldExpr,Token.newSymbol(Types.EQUAL,0,0),new VariableExpression(newParams[0])));
        MethodNode impl=new MethodNode(methodNode.getName(),Opcodes.ACC_PUBLIC | isStatic,returnType,newParams,ClassNode.EMPTY_ARRAY,body);
        impl.addAnnotation(new AnnotationNode(COMPILESTATIC_CLASSNODE));
        cNode.addMethod(impl);
      }
    }
  }
}
