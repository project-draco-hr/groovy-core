{
  Class clazz=classNode.getTypeClass();
  Field[] fields=clazz.getDeclaredFields();
  for (int i=0; i < fields.length; i++) {
    classNode.addField(fields[i].getName(),fields[i].getModifiers(),classNode,null);
  }
  Method[] methods=clazz.getDeclaredMethods();
  for (int i=0; i < methods.length; i++) {
    Method m=methods[i];
    ClassNode ret=makeClassNode(compileUnit,m.getGenericReturnType(),m.getReturnType());
    Parameter[] params=makeParameters(compileUnit,m.getGenericParameterTypes(),m.getParameterTypes());
    ClassNode[] exceptions=makeClassNodes(compileUnit,m.getGenericExceptionTypes(),m.getExceptionTypes());
    MethodNode mn=new MethodNode(m.getName(),m.getModifiers(),ret,params,exceptions,null);
    setMethodDefaultValue(mn,m);
    classNode.addMethod(mn);
  }
  Constructor[] constructors=clazz.getDeclaredConstructors();
  for (int i=0; i < constructors.length; i++) {
    Constructor ctor=constructors[i];
    Parameter[] params=makeParameters(compileUnit,ctor.getGenericParameterTypes(),ctor.getParameterTypes());
    ClassNode[] exceptions=makeClassNodes(compileUnit,ctor.getGenericExceptionTypes(),ctor.getExceptionTypes());
    classNode.addConstructor(ctor.getModifiers(),params,exceptions,null);
  }
  Class sc=clazz.getSuperclass();
  if (sc != null)   classNode.setUnresolvedSuperClass(makeClassNode(compileUnit,clazz.getGenericSuperclass(),sc));
  makeInterfaceTypes(compileUnit,classNode,clazz);
  setAnnotationMetaData(classNode);
}
