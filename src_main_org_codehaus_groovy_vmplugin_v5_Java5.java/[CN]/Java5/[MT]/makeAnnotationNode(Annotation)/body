{
  AnnotationNode node=new AnnotationNode(ClassHelper.make(annotation.annotationType()));
  Class type=annotation.annotationType();
  if (type == Retention.class) {
    Retention r=(Retention)annotation;
switch (r.value()) {
case RUNTIME:
      node.setRuntimeRetention(true);
    break;
case SOURCE:
  node.setSourceRetention(true);
break;
case CLASS:
node.setClassRetention(true);
break;
default :
throw new GroovyBugError("unsupported Retention " + r.value());
}
}
 else if (type == Target.class) {
Target t=(Target)annotation;
ElementType[] elements=t.value();
int bitmap=0;
for (int i=0; i < elements.length; i++) {
switch (elements[i]) {
case TYPE:
bitmap|=AnnotationNode.TYPE_TARGET;
break;
case CONSTRUCTOR:
bitmap|=AnnotationNode.CONSTRUCTOR_TARGET;
break;
case METHOD:
bitmap|=AnnotationNode.METHOD_TARGET;
break;
case FIELD:
bitmap|=AnnotationNode.FIELD_TARGET;
break;
case PARAMETER:
bitmap|=AnnotationNode.PARAMETER_TARGET;
break;
case LOCAL_VARIABLE:
bitmap|=AnnotationNode.LOCAL_VARIABLE_TARGET;
break;
case ANNOTATION_TYPE:
bitmap|=AnnotationNode.ANNOTATION_TARGET;
break;
case PACKAGE:
bitmap|=AnnotationNode.PACKAGE_TARGET;
break;
default :
throw new GroovyBugError("unsupported Target " + elements[i]);
}
}
node.setAllowedTargets(bitmap);
}
return node;
}
