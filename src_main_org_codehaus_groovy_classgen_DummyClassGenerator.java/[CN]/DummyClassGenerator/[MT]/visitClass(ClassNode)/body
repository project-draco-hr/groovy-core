{
  try {
    this.classNode=classNode;
    this.internalClassName=BytecodeHelper.getClassInternalName(classNode);
    this.internalBaseClassName=BytecodeHelper.getClassInternalName(classNode.getSuperClass());
    cw.visit(asmJDKVersion,classNode.getModifiers(),internalClassName,(String)null,internalBaseClassName,BytecodeHelper.getClassInternalNames(classNode.getInterfaces()));
    classNode.visitContents(this);
    for (Iterator iter=innerClasses.iterator(); iter.hasNext(); ) {
      ClassNode innerClass=(ClassNode)iter.next();
      ClassNode innerClassType=innerClass;
      String innerClassInternalName=BytecodeHelper.getClassInternalName(innerClassType);
      String outerClassName=internalClassName;
      MethodNode enclosingMethod=innerClass.getEnclosingMethod();
      if (enclosingMethod != null) {
        outerClassName=null;
      }
      cw.visitInnerClass(innerClassInternalName,outerClassName,innerClassType.getName(),innerClass.getModifiers());
    }
    cw.visitEnd();
  }
 catch (  GroovyRuntimeException e) {
    e.setModule(classNode.getModule());
    throw e;
  }
}
