{
  this.savedRootDoc=rootDoc;
  Map visibleClasses=rootDoc.getVisibleClasses(importedClassesAndPackages);
  for (  GroovyConstructorDoc constructor : constructors) {
    for (    GroovyParameter groovyParameter : constructor.parameters()) {
      SimpleGroovyParameter param=(SimpleGroovyParameter)groovyParameter;
      String paramTypeName=param.typeName();
      if (visibleClasses.containsKey(paramTypeName)) {
        param.setType((GroovyType)visibleClasses.get(paramTypeName));
      }
 else {
        GroovyClassDoc doc=resolveClass(rootDoc,paramTypeName);
        if (doc != null)         param.setType(doc);
      }
      processAnnotationRefs(rootDoc,param.annotations());
    }
    processAnnotationRefs(rootDoc,constructor.annotations());
  }
  for (  GroovyFieldDoc field : fields) {
    SimpleGroovyFieldDoc mutableField=(SimpleGroovyFieldDoc)field;
    GroovyType fieldType=field.type();
    String typeName=fieldType.typeName();
    if (visibleClasses.containsKey(typeName)) {
      mutableField.setType((GroovyType)visibleClasses.get(typeName));
    }
 else {
      GroovyClassDoc doc=resolveClass(rootDoc,typeName);
      if (doc != null)       mutableField.setType(doc);
    }
    processAnnotationRefs(rootDoc,field.annotations());
  }
  for (  GroovyMethodDoc method : methods) {
    GroovyType returnType=method.returnType();
    String typeName=returnType.typeName();
    if (visibleClasses.containsKey(typeName)) {
      method.setReturnType((GroovyType)visibleClasses.get(typeName));
    }
 else {
      GroovyClassDoc doc=resolveClass(rootDoc,typeName);
      if (doc != null)       method.setReturnType(doc);
    }
    for (    GroovyParameter groovyParameter : method.parameters()) {
      SimpleGroovyParameter param=(SimpleGroovyParameter)groovyParameter;
      String paramTypeName=param.typeName();
      if (visibleClasses.containsKey(paramTypeName)) {
        param.setType((GroovyType)visibleClasses.get(paramTypeName));
      }
 else {
        GroovyClassDoc doc=resolveClass(rootDoc,paramTypeName);
        if (doc != null)         param.setType(doc);
      }
      processAnnotationRefs(rootDoc,param.annotations());
    }
    processAnnotationRefs(rootDoc,method.annotations());
  }
  for (  GroovyFieldDoc property : properties) {
    if (property instanceof SimpleGroovyFieldDoc) {
      SimpleGroovyFieldDoc simpleGroovyFieldDoc=(SimpleGroovyFieldDoc)property;
      if (simpleGroovyFieldDoc.type() instanceof SimpleGroovyType) {
        SimpleGroovyType simpleGroovyType=(SimpleGroovyType)simpleGroovyFieldDoc.type();
        GroovyClassDoc propertyTypeClassDoc=resolveClass(rootDoc,simpleGroovyType.qualifiedTypeName());
        if (propertyTypeClassDoc != null) {
          simpleGroovyFieldDoc.setType(propertyTypeClassDoc);
        }
      }
    }
    processAnnotationRefs(rootDoc,property.annotations());
  }
  if (superClassName != null && superClass == null) {
    superClass=resolveClass(rootDoc,superClassName);
  }
  for (  String name : interfaceNames) {
    interfaceClasses.add(resolveClass(rootDoc,name));
  }
  processAnnotationRefs(rootDoc,annotations());
}
