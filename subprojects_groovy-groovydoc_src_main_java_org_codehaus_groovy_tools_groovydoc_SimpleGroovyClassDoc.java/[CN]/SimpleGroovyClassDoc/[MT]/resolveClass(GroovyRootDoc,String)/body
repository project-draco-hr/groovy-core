{
  if (isPrimitiveType(name))   return null;
  if (name.endsWith("[]")) {
    GroovyClassDoc componentClass=resolveClass(rootDoc,name.substring(0,name.length() - 2));
    if (componentClass != null)     return new ArrayClassDocWrapper(componentClass);
    return null;
  }
  if (name.equals("T") || name.equals("U") || name.equals("K")|| name.equals("V")|| name.equals("G")) {
    name="java/lang/Object";
  }
  GroovyClassDoc doc=((SimpleGroovyRootDoc)rootDoc).classNamedExact(name);
  if (doc != null)   return doc;
  int slashIndex=name.lastIndexOf("/");
  if (slashIndex < 1) {
    doc=resolveInternalClassDocFromImport(rootDoc,name);
    if (doc != null)     return doc;
    for (    GroovyClassDoc nestedDoc : nested) {
      if (nestedDoc.name().endsWith("." + name))       return nestedDoc;
    }
    doc=rootDoc.classNamed(this,name);
    if (doc != null)     return doc;
  }
  String shortname=name;
  Class c;
  if (slashIndex > 0) {
    shortname=name.substring(slashIndex + 1);
    c=resolveExternalFullyQualifiedClass(name);
  }
 else {
    c=resolveExternalClassFromImport(name);
  }
  if (c == null) {
    c=resolveFromJavaLang(name);
  }
  if (c != null) {
    return new ExternalGroovyClassDoc(c);
  }
  if (name.contains("/")) {
    if (slashIndex > 0) {
      String outerName=name.substring(0,slashIndex);
      GroovyClassDoc gcd=resolveClass(rootDoc,outerName);
      if (gcd instanceof ExternalGroovyClassDoc) {
        ExternalGroovyClassDoc egcd=(ExternalGroovyClassDoc)gcd;
        String innerName=name.substring(slashIndex + 1);
        Class outerClass=egcd.externalClass();
        for (        Class inner : outerClass.getDeclaredClasses()) {
          if (inner.getName().equals(outerClass.getName() + "$" + innerName)) {
            return new ExternalGroovyClassDoc(inner);
          }
        }
      }
      if (gcd instanceof SimpleGroovyClassDoc) {
        String innerClassName=name.substring(slashIndex + 1);
        SimpleGroovyClassDoc innerClass=new SimpleGroovyClassDoc(importedClassesAndPackages,aliases,innerClassName);
        innerClass.setFullPathName(gcd.getFullPathName() + "." + innerClassName);
        return innerClass;
      }
    }
  }
  if (hasAlias(name)) {
    String fullyQualifiedTypeName=getFullyQualifiedTypeNameForAlias(name);
    GroovyClassDoc gcd=resolveClass(rootDoc,fullyQualifiedTypeName);
    if (gcd != null)     return gcd;
  }
  SimpleGroovyClassDoc placeholder=new SimpleGroovyClassDoc(null,shortname);
  placeholder.setFullPathName(name);
  return placeholder;
}
