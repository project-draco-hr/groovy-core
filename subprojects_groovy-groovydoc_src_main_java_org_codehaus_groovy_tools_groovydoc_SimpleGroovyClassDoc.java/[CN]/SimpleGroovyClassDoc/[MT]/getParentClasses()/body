{
  List<GroovyClassDoc> result=new LinkedList<GroovyClassDoc>();
  if (isInterface())   return result;
  result.add(0,this);
  GroovyClassDoc next=this;
  while (next.superclass() != null && !"java.lang.Object".equals(next.qualifiedTypeName())) {
    next=next.superclass();
    result.add(0,next);
  }
  GroovyClassDoc prev=next;
  Class nextClass=getClassOf(next.qualifiedTypeName());
  while (nextClass != null && nextClass.getSuperclass() != null && !Object.class.equals(nextClass)) {
    nextClass=nextClass.getSuperclass();
    GroovyClassDoc nextDoc=new ExternalGroovyClassDoc(nextClass);
    if (prev instanceof SimpleGroovyClassDoc) {
      SimpleGroovyClassDoc parent=(SimpleGroovyClassDoc)prev;
      parent.setSuperClass(nextDoc);
    }
    result.add(0,nextDoc);
    prev=nextDoc;
  }
  if (!result.get(0).qualifiedTypeName().equals("java.lang.Object")) {
    result.add(0,new ExternalGroovyClassDoc(Object.class));
  }
  return result;
}
