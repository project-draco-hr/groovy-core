{
  if (type == null)   return type;
  type=type.trim();
  if (isPrimitiveType(type) || type.length() == 1)   return type;
  if (type.equals("def"))   type="java.lang.Object def";
  if (type.startsWith("<a href="))   return type;
  if (type.startsWith("? extends "))   return "? extends " + getDocUrl(type.substring(10),full,links,relativePath,rootDoc,classDoc);
  if (type.startsWith("? super "))   return "? super " + getDocUrl(type.substring(8),full,links,relativePath,rootDoc,classDoc);
  String label=null;
  int lt=type.indexOf("<");
  if (lt != -1) {
    String outerType=type.substring(0,lt);
    int gt=type.lastIndexOf(">");
    if (gt != -1) {
      if (gt > lt) {
        String allTypeArgs=type.substring(lt + 1,gt);
        List<String> typeArgs=new ArrayList<String>();
        int nested=0;
        StringBuilder sb=new StringBuilder();
        for (        char ch : allTypeArgs.toCharArray()) {
          if (ch == '<')           nested++;
 else           if (ch == '>')           nested--;
 else           if (ch == ',' && nested == 0) {
            typeArgs.add(sb.toString().trim());
            sb=new StringBuilder();
            continue;
          }
          sb.append(ch);
        }
        if (sb.length() > 0) {
          typeArgs.add(sb.toString().trim());
        }
        List<String> typeUrls=new ArrayList<String>();
        for (        String typeArg : typeArgs) {
          typeUrls.add(getDocUrl(typeArg,full,links,relativePath,rootDoc,classDoc));
        }
        sb=new StringBuilder(getDocUrl(outerType,full,links,relativePath,rootDoc,classDoc));
        sb.append("&lt;");
        sb.append(DefaultGroovyMethods.join(typeUrls,", "));
        sb.append("&gt;");
        return sb.toString();
      }
      return type.replaceAll("<","&lt;").replaceAll(">","&gt;");
    }
  }
  Matcher matcher=REF_LABEL_REGEX.matcher(type);
  if (matcher.find()) {
    type=matcher.group(1);
    label=matcher.group(4);
  }
  if (type.startsWith("#"))   return "<a href='" + resolveMethodArgs(rootDoc,classDoc,type) + "'>"+ (label == null ? type.substring(1) : label)+ "</a>";
  if (type.endsWith("[]")) {
    if (label != null)     return getDocUrl(type.substring(0,type.length() - 2) + " " + label,full,links,relativePath,rootDoc,classDoc);
    return getDocUrl(type.substring(0,type.length() - 2),full,links,relativePath,rootDoc,classDoc) + "[]";
  }
  if (!type.contains(".") && classDoc != null) {
    String[] pieces=type.split("#");
    String candidate=pieces[0];
    Class c=classDoc.resolveExternalClassFromImport(candidate);
    if (c != null)     type=c.getName();
    if (pieces.length > 1)     type+="#" + pieces[1];
    type=resolveMethodArgs(rootDoc,classDoc,type);
  }
  if (type.indexOf('.') == -1)   return type;
  final String[] target=type.split("#");
  String shortClassName=target[0].replaceAll(".*\\.","");
  shortClassName+=(target.length > 1 ? "#" + target[1].split("\\(")[0] : "");
  String name=(full ? target[0] : shortClassName).replaceAll("#",".").replace('$','.');
  if (rootDoc != null) {
    String slashedName=target[0].replaceAll("\\.","/");
    GroovyClassDoc doc=rootDoc.classNamed(classDoc,slashedName);
    if (doc != null) {
      return buildUrl(relativePath,target,label == null ? name : label);
    }
  }
  if (links != null) {
    for (    LinkArgument link : links) {
      final StringTokenizer tokenizer=new StringTokenizer(link.getPackages(),", ");
      while (tokenizer.hasMoreTokens()) {
        final String token=tokenizer.nextToken();
        if (type.startsWith(token)) {
          return buildUrl(link.getHref(),target,label == null ? name : label);
        }
      }
    }
  }
  return type;
}
