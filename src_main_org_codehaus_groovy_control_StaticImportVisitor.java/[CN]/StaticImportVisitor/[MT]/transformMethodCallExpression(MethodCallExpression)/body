{
  Expression args=transform(mce.getArguments());
  Expression method=transform(mce.getMethod());
  Expression object=transform(mce.getObjectExpression());
  boolean isExplicitThisOrSuper=false;
  boolean isExplicitSuper;
  if (object instanceof VariableExpression) {
    VariableExpression ve=(VariableExpression)object;
    isExplicitThisOrSuper=!mce.isImplicitThis() && (ve.getName().equals("this") || ve.getName().equals("super"));
    isExplicitSuper=ve.getName().equals("super");
    if (isExplicitSuper && currentMethod != null && currentMethod.isStatic()) {
      addError("'super' cannot be used in a static context, use the explicit class instead.",mce);
      return mce;
    }
  }
  if (mce.isImplicitThis() || isExplicitThisOrSuper) {
    if (mce.isImplicitThis()) {
      Expression ret=findStaticMethodImportFromModule(method,args);
      if (ret != null) {
        ret.setSourcePosition(mce);
        return ret;
      }
      if (method instanceof ConstantExpression && !inLeftExpression) {
        String methodName=(String)((ConstantExpression)method).getValue();
        ret=findStaticFieldOrPropAccessorImportFromModule(methodName);
        if (ret != null) {
          ret=new MethodCallExpression(ret,"call",args);
          ret.setSourcePosition(mce);
          return ret;
        }
      }
    }
    if (method instanceof ConstantExpression) {
      ConstantExpression ce=(ConstantExpression)method;
      Object value=ce.getValue();
      if (value instanceof String) {
        String methodName=(String)value;
        boolean lookForPossibleStaticMethod=!methodName.equals("call");
        if (currentMethod != null && !currentMethod.isStatic()) {
          if (currentClass.hasPossibleMethod(methodName,args)) {
            lookForPossibleStaticMethod=false;
          }
        }
        if (inSpecialConstructorCall || (lookForPossibleStaticMethod && currentClass.hasPossibleStaticMethod(methodName,args))) {
          StaticMethodCallExpression smce=new StaticMethodCallExpression(currentClass,methodName,args);
          smce.setSourcePosition(mce);
          return smce;
        }
      }
    }
  }
  MethodCallExpression result=new MethodCallExpression(object,method,args);
  result.setSafe(mce.isSafe());
  result.setImplicitThis(mce.isImplicitThis());
  result.setSpreadSafe(mce.isSpreadSafe());
  result.setSourcePosition(mce);
  return result;
}
