{
  Expression args=transform(mce.getArguments());
  Expression method=transform(mce.getMethod());
  Expression object=transform(mce.getObjectExpression());
  boolean isExplicitThisOrSuper=false;
  if (object instanceof VariableExpression) {
    VariableExpression ve=(VariableExpression)object;
    isExplicitThisOrSuper=!mce.isImplicitThis() && (ve.getName().equals("this") || ve.getName().equals("super"));
    if (isExplicitThisOrSuper && currentMethod != null && currentMethod.isStatic()) {
      addError("Non-static variable '" + ve.getName() + "' cannot be referenced from the static method "+ currentMethod.getName()+ ".",mce);
      return null;
    }
  }
  if (mce.isImplicitThis() || isExplicitThisOrSuper) {
    Expression ret=findStaticMethodImportFromModule(method,args);
    if (ret != null) {
      return ret;
    }
    if (method instanceof ConstantExpression) {
      ConstantExpression ce=(ConstantExpression)method;
      Object value=ce.getValue();
      if (value instanceof String) {
        String methodName=(String)value;
        if (inSpecialConstructorCall || currentClass.hasPossibleStaticMethod(methodName,args))         return new StaticMethodCallExpression(currentClass,methodName,args);
      }
    }
  }
  MethodCallExpression result=new MethodCallExpression(object,method,args);
  result.setSafe(mce.isSafe());
  result.setImplicitThis(mce.isImplicitThis());
  result.setSpreadSafe(mce.isSpreadSafe());
  result.setSourcePosition(mce);
  return result;
}
