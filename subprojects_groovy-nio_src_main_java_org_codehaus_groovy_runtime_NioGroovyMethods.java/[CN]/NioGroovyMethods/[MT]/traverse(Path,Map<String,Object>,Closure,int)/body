{
  checkDir(self);
  final Closure pre=(Closure)options.get("preDir");
  final Closure post=(Closure)options.get("postDir");
  final FileType type=(FileType)options.get("type");
  final Object filter=options.get("filter");
  final Object nameFilter=options.get("nameFilter");
  final Object excludeFilter=options.get("excludeFilter");
  final Object excludeNameFilter=options.get("excludeNameFilter");
  final Closure sort=(Closure)options.get("sort");
  final Iterator<Path> itr=Files.newDirectoryStream(self).iterator();
  List<Path> files=new LinkedList<Path>();
  while (itr.hasNext()) {
    files.add(itr.next());
  }
  if (sort != null)   files=DefaultGroovyMethods.sort(files,sort);
  for (  Path path : files) {
    if (Files.isDirectory(path)) {
      if (type != FileType.FILES) {
        if (closure != null && notFiltered(path,filter,nameFilter,excludeFilter,excludeNameFilter)) {
          Object closureResult=closure.call(path);
          if (closureResult == FileVisitResult.SKIP_SIBLINGS)           break;
          if (closureResult == FileVisitResult.TERMINATE)           return FileVisitResult.TERMINATE;
        }
      }
      if (maxDepth != 0) {
        Object preResult=null;
        if (pre != null) {
          preResult=pre.call(path);
        }
        if (preResult == FileVisitResult.SKIP_SIBLINGS)         break;
        if (preResult == FileVisitResult.TERMINATE)         return FileVisitResult.TERMINATE;
        if (preResult != FileVisitResult.SKIP_SUBTREE) {
          FileVisitResult terminated=traverse(path,options,closure,maxDepth - 1);
          if (terminated == FileVisitResult.TERMINATE)           return terminated;
        }
        Object postResult=null;
        if (post != null) {
          postResult=post.call(path);
        }
        if (postResult == FileVisitResult.SKIP_SIBLINGS)         break;
        if (postResult == FileVisitResult.TERMINATE)         return FileVisitResult.TERMINATE;
      }
    }
 else     if (type != FileType.DIRECTORIES) {
      if (closure != null && notFiltered(path,filter,nameFilter,excludeFilter,excludeNameFilter)) {
        Object closureResult=closure.call(path);
        if (closureResult == FileVisitResult.SKIP_SIBLINGS)         break;
        if (closureResult == FileVisitResult.TERMINATE)         return FileVisitResult.TERMINATE;
      }
    }
  }
  return FileVisitResult.CONTINUE;
}
