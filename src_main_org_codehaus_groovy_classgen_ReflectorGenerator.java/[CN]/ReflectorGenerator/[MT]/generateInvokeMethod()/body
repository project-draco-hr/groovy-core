{
  int methodCount=methods.size();
  MethodVisitor mv=cv.visitMethod(ACC_PUBLIC,"invoke","(Lgroovy/lang/MetaMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;",null,null);
  mv.visitVarInsn(ALOAD,0);
  mv.visitVarInsn(ALOAD,1);
  mv.visitVarInsn(ALOAD,2);
  mv.visitVarInsn(ALOAD,3);
  mv.visitVarInsn(ALOAD,1);
  mv.visitMethodInsn(INVOKEVIRTUAL,"groovy/lang/MetaMethod","getMethodIndex","()I");
  Label defaultLabel=new Label();
  Label[] labels=new Label[methodCount];
  int[] indices=new int[methodCount];
  for (int i=0; i < methodCount; i++) {
    labels[i]=new Label();
    MetaMethod method=(MetaMethod)methods.get(i);
    method.setMethodIndex(i + 1);
    indices[i]=method.getMethodIndex();
  }
  mv.visitLookupSwitchInsn(defaultLabel,indices,labels);
  for (int i=0; i < methodCount; i++) {
    mv.visitLabel(labels[i]);
    mv.visitMethodInsn(INVOKESPECIAL,classInternalName,"m" + i,"(Lgroovy/lang/MetaMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
    mv.visitInsn(ARETURN);
  }
  mv.visitLabel(defaultLabel);
  mv.visitMethodInsn(INVOKEVIRTUAL,classInternalName,"noSuchMethod","(Lgroovy/lang/MetaMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
  mv.visitInsn(ARETURN);
  mv.visitMaxs(4,4);
  mv.visitEnd();
  for (int i=0; i < methodCount; i++) {
    mv=cv.visitMethod(ACC_PRIVATE,"m" + i,"(Lgroovy/lang/MetaMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;",null,null);
    helper=new BytecodeHelper(mv);
    MetaMethod method=(MetaMethod)methods.get(i);
    invokeMethod(method,mv);
    if (method.getReturnType() == void.class) {
      mv.visitInsn(ACONST_NULL);
    }
    mv.visitInsn(ARETURN);
    mv.visitMaxs(0,0);
    mv.visitEnd();
  }
}
