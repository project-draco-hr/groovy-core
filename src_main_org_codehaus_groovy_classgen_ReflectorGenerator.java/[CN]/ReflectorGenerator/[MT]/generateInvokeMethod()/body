{
  int methodCount=methods.size();
  MethodVisitor cv=cw.visitMethod(ACC_PUBLIC,"invoke","(Lgroovy/lang/MetaMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;",null,null);
  cv.visitVarInsn(ALOAD,0);
  cv.visitVarInsn(ALOAD,1);
  cv.visitVarInsn(ALOAD,2);
  cv.visitVarInsn(ALOAD,3);
  cv.visitVarInsn(ALOAD,1);
  cv.visitMethodInsn(INVOKEVIRTUAL,"groovy/lang/MetaMethod","getMethodIndex","()I");
  Label defaultLabel=new Label();
  Label[] labels=new Label[methodCount];
  int[] indices=new int[methodCount];
  for (int i=0; i < methodCount; i++) {
    labels[i]=new Label();
    MetaMethod method=(MetaMethod)methods.get(i);
    method.setMethodIndex(i + 1);
    indices[i]=method.getMethodIndex();
  }
  cv.visitLookupSwitchInsn(defaultLabel,indices,labels);
  for (int i=0; i < methodCount; i++) {
    cv.visitLabel(labels[i]);
    cv.visitMethodInsn(INVOKESPECIAL,classInternalName,"m" + i,"(Lgroovy/lang/MetaMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
    cv.visitInsn(ARETURN);
  }
  cv.visitLabel(defaultLabel);
  cv.visitMethodInsn(INVOKEVIRTUAL,classInternalName,"noSuchMethod","(Lgroovy/lang/MetaMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
  cv.visitInsn(ARETURN);
  cv.visitMaxs(4,4);
  cv.visitEnd();
  for (int i=0; i < methodCount; i++) {
    cv=cw.visitMethod(ACC_PRIVATE,"m" + i,"(Lgroovy/lang/MetaMethod;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;",null,null);
    helper=new BytecodeHelper(cv);
    MetaMethod method=(MetaMethod)methods.get(i);
    invokeMethod(method,cv);
    if (method.getReturnType() == void.class) {
      cv.visitInsn(ACONST_NULL);
    }
    cv.visitInsn(ARETURN);
    cv.visitMaxs(0,0);
    cv.visitEnd();
  }
}
