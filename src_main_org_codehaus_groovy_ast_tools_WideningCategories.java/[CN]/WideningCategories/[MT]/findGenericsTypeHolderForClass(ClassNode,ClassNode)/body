{
  if (isPrimitiveType(source))   source=getWrapper(source);
  if (source.equals(type))   return source;
  if (type.isInterface()) {
    for (    ClassNode interfaceNode : source.getAllInterfaces()) {
      if (interfaceNode.equals(type)) {
        ClassNode parameterizedInterface=GenericsUtils.parameterizeType(source,interfaceNode);
        return parameterizedInterface;
      }
    }
  }
  ClassNode superClass=source.getUnresolvedSuperClass();
  if (superClass != null && superClass.isUsingGenerics()) {
    Map<String,GenericsType> genericsTypeMap=GenericsUtils.extractPlaceholders(source);
    GenericsType[] genericsTypes=superClass.getGenericsTypes();
    if (genericsTypes != null) {
      GenericsType[] copyTypes=new GenericsType[genericsTypes.length];
      for (int i=0; i < genericsTypes.length; i++) {
        GenericsType genericsType=genericsTypes[i];
        if (genericsType.isPlaceholder() && genericsTypeMap.containsKey(genericsType.getName())) {
          copyTypes[i]=genericsTypeMap.get(genericsType.getName());
        }
 else {
          copyTypes[i]=genericsType;
        }
      }
      superClass=superClass.getPlainNodeReference();
      superClass.setGenericsTypes(copyTypes);
    }
  }
  if (superClass != null)   return findGenericsTypeHolderForClass(superClass,type);
  return null;
}
