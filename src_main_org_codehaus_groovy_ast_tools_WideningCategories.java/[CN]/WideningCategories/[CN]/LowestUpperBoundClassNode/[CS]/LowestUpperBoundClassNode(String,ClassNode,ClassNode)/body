{
  super(name,ACC_PUBLIC | ACC_FINAL,upper,interfaces,null);
  boolean usesGenerics;
  Arrays.sort(interfaces,CLASS_NODE_COMPARATOR);
  compileTimeClassNode=upper.equals(OBJECT_TYPE) && interfaces.length > 0 ? interfaces[0] : upper;
  this.name=name;
  usesGenerics=upper.isUsingGenerics();
  List<GenericsType[]> genericsTypesList=new LinkedList<GenericsType[]>();
  genericsTypesList.add(upper.getGenericsTypes());
  for (  ClassNode anInterface : interfaces) {
    usesGenerics|=anInterface.isUsingGenerics();
    genericsTypesList.add(anInterface.getGenericsTypes());
    for (    MethodNode methodNode : anInterface.getMethods()) {
      addMethod(methodNode.getName(),methodNode.getModifiers(),methodNode.getReturnType(),methodNode.getParameters(),methodNode.getExceptions(),methodNode.getCode());
    }
  }
  setUsingGenerics(usesGenerics);
  if (usesGenerics) {
    List<GenericsType> asArrayList=new ArrayList<GenericsType>();
    for (    GenericsType[] genericsTypes : genericsTypesList) {
      if (genericsTypes != null) {
        Collections.addAll(asArrayList,genericsTypes);
      }
    }
    setGenericsTypes(asArrayList.toArray(new GenericsType[asArrayList.size()]));
  }
  StringBuilder sb=new StringBuilder();
  if (!upper.equals(OBJECT_TYPE))   sb.append(upper.getName());
  for (  ClassNode anInterface : interfaces) {
    if (sb.length() > 0) {
      sb.append(" or ");
    }
    sb.append(anInterface.getName());
  }
  this.text=sb.toString();
}
