{
  List methods=new ArrayList(node.getMethods());
  addDefaultParameters(methods,new DefaultArgsAction(){
    public void call(    ArgumentListExpression arguments,    Parameter[] newParams,    MethodNode method){
      final BlockStatement code=new BlockStatement();
      MethodNode newMethod=new MethodNode(method.getName(),method.getModifiers(),method.getReturnType(),newParams,method.getExceptions(),code);
      for (      Expression argument : arguments.getExpressions()) {
        if (argument instanceof CastExpression) {
          argument=((CastExpression)argument).getExpression();
        }
        if (argument instanceof ConstructorCallExpression) {
          ClassNode type=argument.getType();
          if (type instanceof InnerClassNode && ((InnerClassNode)type).isAnonymous()) {
            type.setEnclosingMethod(newMethod);
          }
        }
        if (argument instanceof ClosureExpression) {
          final List<Parameter> newMethodNodeParameters=Arrays.asList(newParams);
          CodeVisitorSupport visitor=new CodeVisitorSupport(){
            @Override public void visitVariableExpression(            VariableExpression expression){
              Variable v=expression.getAccessedVariable();
              if (!(v instanceof Parameter))               return;
              Parameter param=(Parameter)v;
              if (param.hasInitialExpression() && code.getVariableScope().getDeclaredVariable(param.getName()) == null && !newMethodNodeParameters.contains(param)) {
                VariableExpression localVariable=new VariableExpression(param.getName(),ClassHelper.makeReference());
                DeclarationExpression declarationExpression=new DeclarationExpression(localVariable,Token.newSymbol(Types.EQUAL,-1,-1),new ConstructorCallExpression(ClassHelper.makeReference(),param.getInitialExpression()));
                code.addStatement(new ExpressionStatement(declarationExpression));
                code.getVariableScope().putDeclaredVariable(localVariable);
              }
            }
          }
;
          visitor.visitClosureExpression((ClosureExpression)argument);
        }
      }
      MethodCallExpression expression=new MethodCallExpression(VariableExpression.THIS_EXPRESSION,method.getName(),arguments);
      expression.setMethodTarget(method);
      expression.setImplicitThis(true);
      if (method.isVoidMethod()) {
        code.addStatement(new ExpressionStatement(expression));
      }
 else {
        code.addStatement(new ReturnStatement(expression));
      }
      List<AnnotationNode> annotations=method.getAnnotations();
      if (annotations != null) {
        newMethod.addAnnotations(annotations);
      }
      MethodNode oldMethod=node.getDeclaredMethod(method.getName(),newParams);
      if (oldMethod != null) {
        throw new RuntimeParserException("The method with default parameters \"" + method.getTypeDescriptor() + "\" defines a method \""+ newMethod.getTypeDescriptor()+ "\" that is already defined.",method);
      }
      addPropertyMethod(newMethod);
      newMethod.setGenericsTypes(method.getGenericsTypes());
    }
  }
);
}
