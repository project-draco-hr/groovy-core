{
  this.methodNode=node;
  Statement statement=node.getCode();
  if (!node.isVoidMethod()) {
    if (statement instanceof ExpressionStatement) {
      ExpressionStatement expStmt=(ExpressionStatement)statement;
      node.setCode(new ReturnStatement(expStmt.getExpression()));
    }
 else     if (statement instanceof BlockStatement) {
      BlockStatement block=(BlockStatement)statement;
      List list=new ArrayList(block.getStatements());
      if (!list.isEmpty()) {
        int idx=list.size() - 1;
        Statement last=(Statement)list.get(idx);
        if (last instanceof ExpressionStatement) {
          ExpressionStatement expStmt=(ExpressionStatement)last;
          list.set(idx,new ReturnStatement(expStmt.getExpression()));
        }
 else         if (!(last instanceof ReturnStatement)) {
          list.add(new ReturnStatement(ConstantExpression.NULL));
        }
      }
 else {
        list.add(new ReturnStatement(ConstantExpression.NULL));
      }
      node.setCode(new BlockStatement(filterStatements(list)));
    }
  }
 else {
    if (statement instanceof BlockStatement) {
      BlockStatement block=(BlockStatement)statement;
      node.setCode(new BlockStatement(filterStatements(block.getStatements())));
    }
 else {
      node.setCode(filterStatement(statement));
    }
  }
  if (node.getName().equals("main") && node.isStatic()) {
    Parameter[] params=node.getParameters();
    if (params.length == 1) {
      Parameter param=params[0];
      if (param.getType() == null || param.getType().equals("java.lang.Object")) {
        param.setType("java.lang.String[]");
      }
    }
  }
  node.getCode().visit(new VerifierCodeVisitor(this));
}
