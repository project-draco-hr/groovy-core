{
  this.classNode=node;
  if ((classNode.getModifiers() & Opcodes.ACC_INTERFACE) > 0) {
    ConstructorNode dummy=new ConstructorNode(0,null);
    addInitialization(node,dummy);
    node.visitContents(this);
    if (classNode.getNodeMetaData(ClassNodeSkip.class) == null) {
      classNode.setNodeMetaData(ClassNodeSkip.class,true);
    }
    return;
  }
  ClassNode[] classNodes=classNode.getInterfaces();
  List<String> interfaces=new ArrayList<String>();
  for (  ClassNode classNode : classNodes) {
    interfaces.add(classNode.getName());
  }
  Set<String> interfaceSet=new HashSet<String>(interfaces);
  if (interfaceSet.size() != interfaces.size()) {
    throw new RuntimeParserException("Duplicate interfaces in implements list: " + interfaces,classNode);
  }
  addDefaultParameterMethods(node);
  addDefaultParameterConstructors(node);
  final String classInternalName=BytecodeHelper.getClassInternalName(node);
  addStaticMetaClassField(node,classInternalName);
  boolean knownSpecialCase=node.isDerivedFrom(ClassHelper.GSTRING_TYPE) || node.isDerivedFrom(ClassHelper.GROOVY_OBJECT_SUPPORT_TYPE);
  addFastPathHelperFieldsAndHelperMethod(node,classInternalName,knownSpecialCase);
  if (!knownSpecialCase)   addGroovyObjectInterfaceAndMethods(node,classInternalName);
  addDefaultConstructor(node);
  if (!(node instanceof InnerClassNode))   addTimeStamp(node);
  addInitialization(node);
  checkReturnInObjectInitializer(node.getObjectInitializerStatements());
  node.getObjectInitializerStatements().clear();
  node.visitContents(this);
  checkForDuplicateMethods(node);
  addCovariantMethods(node);
}
