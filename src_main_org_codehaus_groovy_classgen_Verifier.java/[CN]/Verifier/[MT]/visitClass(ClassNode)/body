{
  this.classNode=node;
  if ((classNode.getModifiers() & Opcodes.ACC_INTERFACE) > 0) {
    node.visitContents(this);
    return;
  }
  addDefaultParameterMethods(node);
  if (!node.isDerivedFromGroovyObject()) {
    node.addInterface(GroovyObject.class.getName());
    StaticMethodCallExpression initMetaClassCall=new StaticMethodCallExpression(ScriptBytecodeAdapter.class.getName(),"getMetaClass",VariableExpression.THIS_EXPRESSION);
    PropertyNode metaClassProperty=node.addProperty("metaClass",ACC_PUBLIC,MetaClass.class.getName(),initMetaClassCall,null,null);
    metaClassProperty.setSynthetic(true);
    FieldNode metaClassField=metaClassProperty.getField();
    metaClassField.setModifiers(metaClassField.getModifiers() | ACC_TRANSIENT);
    FieldExpression metaClassVar=new FieldExpression(metaClassField);
    IfStatement initMetaClassField=new IfStatement(new BooleanExpression(new BinaryExpression(metaClassVar,Token.newSymbol(Types.COMPARE_EQUAL,-1,-1),ConstantExpression.NULL)),new ExpressionStatement(new BinaryExpression(metaClassVar,Token.newSymbol(Types.EQUAL,-1,-1),initMetaClassCall)),EmptyStatement.INSTANCE);
    node.addSyntheticMethod("getMetaClass",ACC_PUBLIC,MetaClass.class.getName(),Parameter.EMPTY_ARRAY,new BlockStatement(new Statement[]{initMetaClassField,new ReturnStatement(metaClassVar)}));
    String superClass=node.getSuperClass();
    boolean addDelegateObject=(node instanceof InnerClassNode && superClass.equals(Closure.class.getName())) || superClass.equals(GString.class.getName());
    if (!addDelegateObject) {
      node.addSyntheticMethod("invokeMethod",ACC_PUBLIC,Object.class.getName(),new Parameter[]{new Parameter(String.class.getName(),"method"),new Parameter(Object.class.getName(),"arguments")},new BlockStatement(new Statement[]{initMetaClassField,new ReturnStatement(new MethodCallExpression(metaClassVar,"invokeMethod",new ArgumentListExpression(new Expression[]{VariableExpression.THIS_EXPRESSION,new VariableExpression("method"),new VariableExpression("arguments")})))}));
      if (!node.isScript()) {
        node.addSyntheticMethod("getProperty",ACC_PUBLIC,Object.class.getName(),new Parameter[]{new Parameter(String.class.getName(),"property")},new BlockStatement(new Statement[]{initMetaClassField,new ReturnStatement(new MethodCallExpression(metaClassVar,"getProperty",new ArgumentListExpression(new Expression[]{VariableExpression.THIS_EXPRESSION,new VariableExpression("property")})))}));
        node.addSyntheticMethod("setProperty",ACC_PUBLIC,"void",new Parameter[]{new Parameter(String.class.getName(),"property"),new Parameter(Object.class.getName(),"value")},new BlockStatement(new Statement[]{initMetaClassField,new ExpressionStatement(new MethodCallExpression(metaClassVar,"setProperty",new ArgumentListExpression(new Expression[]{VariableExpression.THIS_EXPRESSION,new VariableExpression("property"),new VariableExpression("value")})))}));
      }
    }
  }
  if (node.getDeclaredConstructors().isEmpty()) {
    ConstructorNode constructor=new ConstructorNode(ACC_PUBLIC,null);
    constructor.setSynthetic(true);
    node.addConstructor(constructor);
  }
  if (!(node instanceof InnerClassNode)) {
    FieldNode timeTagField=new FieldNode(Verifier.__TIMESTAMP,Modifier.PUBLIC | Modifier.STATIC,"java.lang.Long",node.getName(),new ConstantExpression(new Long(System.currentTimeMillis())));
    timeTagField.setSynthetic(true);
    node.addField(timeTagField);
  }
  addFieldInitialization(node);
  node.visitContents(this);
}
