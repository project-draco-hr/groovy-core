{
  if (!node.isDerivedFromGroovyObject())   node.addInterface(ClassHelper.make(GroovyObject.class));
  FieldNode metaClassField=getMetaClassField(node);
  if (!node.hasMethod("getMetaClass",Parameter.EMPTY_ARRAY)) {
    metaClassField=setMetaClassFieldIfNotExists(node,metaClassField);
    addMethod(node,!Modifier.isAbstract(node.getModifiers()),"getMetaClass",ACC_PUBLIC,ClassHelper.METACLASS_TYPE,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,new BytecodeSequence(new BytecodeInstruction(){
      public void visit(      MethodVisitor mv){
        Label nullLabel=new Label();
        mv.visitVarInsn(ALOAD,0);
        mv.visitFieldInsn(GETFIELD,classInternalName,"metaClass","Lgroovy/lang/MetaClass;");
        mv.visitInsn(DUP);
        mv.visitJumpInsn(IFNULL,nullLabel);
        mv.visitInsn(ARETURN);
        mv.visitLabel(nullLabel);
        mv.visitInsn(POP);
        mv.visitVarInsn(ALOAD,0);
        mv.visitInsn(DUP);
        mv.visitMethodInsn(INVOKEVIRTUAL,classInternalName,"$getStaticMetaClass","()Lgroovy/lang/MetaClass;",false);
        mv.visitFieldInsn(PUTFIELD,classInternalName,"metaClass","Lgroovy/lang/MetaClass;");
        mv.visitVarInsn(ALOAD,0);
        mv.visitFieldInsn(GETFIELD,classInternalName,"metaClass","Lgroovy/lang/MetaClass;");
        mv.visitInsn(ARETURN);
      }
    }
));
  }
  Parameter[] parameters=new Parameter[]{new Parameter(ClassHelper.METACLASS_TYPE,"mc")};
  if (!node.hasMethod("setMetaClass",parameters)) {
    metaClassField=setMetaClassFieldIfNotExists(node,metaClassField);
    Statement setMetaClassCode;
    if (Modifier.isFinal(metaClassField.getModifiers())) {
      ConstantExpression text=new ConstantExpression("cannot set read-only meta class");
      ConstructorCallExpression cce=new ConstructorCallExpression(ClassHelper.make(IllegalArgumentException.class),text);
      setMetaClassCode=new ExpressionStatement(cce);
    }
 else {
      List list=new ArrayList();
      list.add(new BytecodeInstruction(){
        public void visit(        MethodVisitor mv){
          mv.visitVarInsn(ALOAD,0);
          mv.visitVarInsn(ALOAD,1);
          mv.visitFieldInsn(PUTFIELD,classInternalName,"metaClass","Lgroovy/lang/MetaClass;");
          mv.visitInsn(RETURN);
        }
      }
);
      setMetaClassCode=new BytecodeSequence(list);
    }
    addMethod(node,!Modifier.isAbstract(node.getModifiers()),"setMetaClass",ACC_PUBLIC,ClassHelper.VOID_TYPE,SET_METACLASS_PARAMS,ClassNode.EMPTY_ARRAY,setMetaClassCode);
  }
  if (!node.hasMethod("invokeMethod",INVOKE_METHOD_PARAMS)) {
    VariableExpression vMethods=new VariableExpression("method");
    VariableExpression vArguments=new VariableExpression("arguments");
    VariableScope blockScope=new VariableScope();
    blockScope.putReferencedLocalVariable(vMethods);
    blockScope.putReferencedLocalVariable(vArguments);
    addMethod(node,!Modifier.isAbstract(node.getModifiers()),"invokeMethod",ACC_PUBLIC,ClassHelper.OBJECT_TYPE,INVOKE_METHOD_PARAMS,ClassNode.EMPTY_ARRAY,new BytecodeSequence(new BytecodeInstruction(){
      public void visit(      MethodVisitor mv){
        mv.visitVarInsn(ALOAD,0);
        mv.visitMethodInsn(INVOKEVIRTUAL,classInternalName,"getMetaClass","()Lgroovy/lang/MetaClass;",false);
        mv.visitVarInsn(ALOAD,0);
        mv.visitVarInsn(ALOAD,1);
        mv.visitVarInsn(ALOAD,2);
        mv.visitMethodInsn(INVOKEINTERFACE,"groovy/lang/MetaClass","invokeMethod","(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;",true);
        mv.visitInsn(ARETURN);
      }
    }
));
  }
  if (!node.hasMethod("getProperty",GET_PROPERTY_PARAMS)) {
    addMethod(node,!Modifier.isAbstract(node.getModifiers()),"getProperty",ACC_PUBLIC,ClassHelper.OBJECT_TYPE,GET_PROPERTY_PARAMS,ClassNode.EMPTY_ARRAY,new BytecodeSequence(new BytecodeInstruction(){
      public void visit(      MethodVisitor mv){
        mv.visitVarInsn(ALOAD,0);
        mv.visitMethodInsn(INVOKEVIRTUAL,classInternalName,"getMetaClass","()Lgroovy/lang/MetaClass;",false);
        mv.visitVarInsn(ALOAD,0);
        mv.visitVarInsn(ALOAD,1);
        mv.visitMethodInsn(INVOKEINTERFACE,"groovy/lang/MetaClass","getProperty","(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;",true);
        mv.visitInsn(ARETURN);
      }
    }
));
  }
  if (!node.hasMethod("setProperty",SET_PROPERTY_PARAMS)) {
    addMethod(node,!Modifier.isAbstract(node.getModifiers()),"setProperty",ACC_PUBLIC,ClassHelper.VOID_TYPE,SET_PROPERTY_PARAMS,ClassNode.EMPTY_ARRAY,new BytecodeSequence(new BytecodeInstruction(){
      public void visit(      MethodVisitor mv){
        mv.visitVarInsn(ALOAD,0);
        mv.visitMethodInsn(INVOKEVIRTUAL,classInternalName,"getMetaClass","()Lgroovy/lang/MetaClass;",false);
        mv.visitVarInsn(ALOAD,0);
        mv.visitVarInsn(ALOAD,1);
        mv.visitVarInsn(ALOAD,2);
        mv.visitMethodInsn(INVOKEINTERFACE,"groovy/lang/MetaClass","setProperty","(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)V",true);
        mv.visitInsn(RETURN);
      }
    }
));
  }
}
