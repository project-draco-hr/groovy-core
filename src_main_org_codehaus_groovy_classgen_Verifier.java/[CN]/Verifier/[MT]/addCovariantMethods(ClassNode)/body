{
  Map methodsToAdd=new HashMap();
  List declaredMethods=new ArrayList(classNode.getMethods());
  Map genericsSpec=new HashMap();
  for (Iterator methodsIterator=declaredMethods.iterator(); methodsIterator.hasNext(); ) {
    MethodNode m=(MethodNode)methodsIterator.next();
    if (m.isStatic())     methodsIterator.remove();
  }
  addCovariantMethods(classNode,declaredMethods,methodsToAdd,genericsSpec);
  Set declaredMethodsSet=new HashSet();
  if (methodsToAdd.size() > 0) {
    for (Iterator methodsIterator=declaredMethods.iterator(); methodsIterator.hasNext(); ) {
      MethodNode m=(MethodNode)methodsIterator.next();
      declaredMethodsSet.add(m.getTypeDescriptor());
    }
  }
  for (Iterator it=methodsToAdd.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry entry=(Map.Entry)it.next();
    MethodNode method=(MethodNode)entry.getValue();
    if (declaredMethodsSet.contains(entry.getKey()))     continue;
    classNode.addMethod(method);
  }
}
