{
  Statement firstStatement=constructorNode.getFirstStatement();
  if (firstStatement instanceof BytecodeSequence)   return;
  ConstructorCallExpression first=getFirstIfSpecialConstructorCall(firstStatement);
  if (first != null && (first.isThisCall()))   return;
  List<Statement> statements=new ArrayList<Statement>();
  List<Statement> staticStatements=new ArrayList<Statement>();
  final boolean isEnum=node.isEnum();
  List<Statement> initStmtsAfterEnumValuesInit=new ArrayList<Statement>();
  Set<String> explicitStaticPropsInEnum=new HashSet<String>();
  if (isEnum) {
    for (    PropertyNode propNode : node.getProperties()) {
      if (!propNode.isSynthetic() && propNode.getField().isStatic()) {
        explicitStaticPropsInEnum.add(propNode.getField().getName());
      }
    }
    for (    FieldNode fieldNode : node.getFields()) {
      if (!fieldNode.isSynthetic() && fieldNode.isStatic() && fieldNode.getType() != node) {
        explicitStaticPropsInEnum.add(fieldNode.getName());
      }
    }
  }
  for (  FieldNode fn : node.getFields()) {
    addFieldInitialization(statements,staticStatements,fn,isEnum,initStmtsAfterEnumValuesInit,explicitStaticPropsInEnum);
  }
  statements.addAll(node.getObjectInitializerStatements());
  Statement code=constructorNode.getCode();
  BlockStatement block=new BlockStatement();
  List<Statement> otherStatements=block.getStatements();
  if (code instanceof BlockStatement) {
    block=(BlockStatement)code;
    otherStatements=block.getStatements();
  }
 else   if (code != null) {
    otherStatements.add(code);
  }
  if (!otherStatements.isEmpty()) {
    if (first != null) {
      otherStatements.remove(0);
      statements.add(0,firstStatement);
    }
    Statement stmtThis$0=getImplicitThis$0StmtIfInnerClass(otherStatements);
    if (stmtThis$0 != null) {
      statements.add(0,stmtThis$0);
    }
    statements.addAll(otherStatements);
  }
  BlockStatement newBlock=new BlockStatement(statements,block.getVariableScope());
  newBlock.setSourcePosition(block);
  constructorNode.setCode(newBlock);
  if (!staticStatements.isEmpty()) {
    if (isEnum) {
      staticStatements.removeAll(initStmtsAfterEnumValuesInit);
      node.addStaticInitializerStatements(staticStatements,true);
      if (!initStmtsAfterEnumValuesInit.isEmpty()) {
        node.positionStmtsAfterEnumInitStmts(initStmtsAfterEnumValuesInit);
      }
    }
 else {
      node.addStaticInitializerStatements(staticStatements,true);
    }
  }
}
