{
  Statement firstStatement=constructorNode.getFirstStatement();
  ConstructorCallExpression first=getFirstIfSpecialConstructorCall(firstStatement);
  if (first != null && (first.isThisCall()))   return;
  List statements=new ArrayList();
  List staticStatements=new ArrayList();
  final boolean isEnum=node.isEnum();
  List<Statement> initStmtsAfterEnumValuesInit=new ArrayList();
  Set explicitStaticPropsInEnum=new HashSet();
  if (isEnum) {
    for (Iterator iter=node.getProperties().iterator(); iter.hasNext(); ) {
      PropertyNode propNode=(PropertyNode)iter.next();
      if (!propNode.isSynthetic() && propNode.getField().isStatic()) {
        explicitStaticPropsInEnum.add(propNode.getField().getName());
      }
    }
  }
  for (Iterator iter=node.getFields().iterator(); iter.hasNext(); ) {
    addFieldInitialization(statements,staticStatements,(FieldNode)iter.next(),isEnum,initStmtsAfterEnumValuesInit,explicitStaticPropsInEnum);
  }
  statements.addAll(node.getObjectInitializerStatements());
  if (!statements.isEmpty()) {
    Statement code=constructorNode.getCode();
    BlockStatement block=new BlockStatement();
    List otherStatements=block.getStatements();
    if (code instanceof BlockStatement) {
      block=(BlockStatement)code;
      otherStatements=block.getStatements();
    }
 else     if (code != null) {
      otherStatements.add(code);
    }
    if (!otherStatements.isEmpty()) {
      if (first != null) {
        otherStatements.remove(0);
        statements.add(0,firstStatement);
      }
      statements.addAll(otherStatements);
    }
    BlockStatement newBlock=new BlockStatement(statements,block.getVariableScope());
    newBlock.setSourcePosition(block);
    constructorNode.setCode(newBlock);
  }
  if (!staticStatements.isEmpty()) {
    if (isEnum) {
      staticStatements.removeAll(initStmtsAfterEnumValuesInit);
      node.addStaticInitializerStatements(staticStatements,true);
      if (!initStmtsAfterEnumValuesInit.isEmpty()) {
        node.positionStmtsAfterEnumInitStmts(initStmtsAfterEnumValuesInit);
      }
    }
 else {
      node.addStaticInitializerStatements(staticStatements,true);
    }
  }
}
