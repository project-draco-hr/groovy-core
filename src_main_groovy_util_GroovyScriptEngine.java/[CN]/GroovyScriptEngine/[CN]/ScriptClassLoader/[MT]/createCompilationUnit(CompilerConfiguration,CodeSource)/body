{
  CompilationUnit cu=super.createCompilationUnit(configuration,source);
  getLocalCompilationUnit().set(cu);
  final StringSetMap cache=getDepCache().get();
  for (  String depSourcePath : cache.get(".")) {
    try {
      cu.addSource(getResourceConnection(depSourcePath).getURL());
    }
 catch (    ResourceException e) {
    }
  }
  cache.clear();
  cu.addPhaseOperation(new CompilationUnit.PrimaryClassNodeOperation(){
    @Override public void call(    final SourceUnit source,    GeneratorContext context,    ClassNode classNode) throws CompilationFailedException {
      if (classNode instanceof InnerClassNode)       return;
      DependencyTracker dt=new DependencyTracker(source,cache);
      dt.visitClass(classNode);
    }
  }
,Phases.CLASS_GENERATION);
  final List<CompilationCustomizer> customizers=config.getCompilationCustomizers();
  if (customizers != null) {
    for (    CompilationCustomizer customizer : customizers) {
      cu.addPhaseOperation(customizer,customizer.getPhase().getPhaseNumber());
    }
  }
  return cu;
}
