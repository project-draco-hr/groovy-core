{
  ScriptCacheEntry entry;
  script=script.intern();
synchronized (script) {
    URLConnection groovyScriptConn=rc.getResourceConnection(script);
    long lastModified=groovyScriptConn.getLastModified();
    entry=(ScriptCacheEntry)scriptCache.get(script);
    boolean dependencyOutOfDate=false;
    if (entry != null) {
      for (Iterator i=entry.dependencies.keySet().iterator(); i.hasNext(); ) {
        URLConnection urlc=null;
        URL url=(URL)i.next();
        try {
          urlc=url.openConnection();
          urlc.setDoInput(false);
          urlc.setDoOutput(false);
          long dependentLastModified=urlc.getLastModified();
          if (dependentLastModified > ((Long)entry.dependencies.get(url)).longValue()) {
            dependencyOutOfDate=true;
            break;
          }
        }
 catch (        IOException ioe) {
          dependencyOutOfDate=true;
          break;
        }
      }
    }
    if (entry == null || entry.lastModified < lastModified || dependencyOutOfDate) {
      entry=new ScriptCacheEntry();
      final ScriptCacheEntry finalEntry=entry;
      GroovyClassLoader groovyLoader=(GroovyClassLoader)AccessController.doPrivileged(new PrivilegedAction(){
        public Object run(){
          return new GroovyClassLoader(getClass().getClassLoader()){
            protected Class findClass(            String className) throws ClassNotFoundException {
              String filename=className.replace('.',File.separatorChar) + ".groovy";
              URLConnection dependentScriptConn=null;
              try {
                dependentScriptConn=rc.getResourceConnection(filename);
                finalEntry.dependencies.put(dependentScriptConn.getURL(),new Long(dependentScriptConn.getLastModified()));
              }
 catch (              ResourceException e1) {
                throw new ClassNotFoundException("Could not read " + className + ": "+ e1);
              }
              try {
                return parseClass(dependentScriptConn.getInputStream(),filename);
              }
 catch (              SyntaxException e2) {
                throw new ClassNotFoundException("Syntax error in " + className + ": "+ e2);
              }
catch (              IOException e2) {
                throw new ClassNotFoundException("Problem reading " + className + ": "+ e2);
              }
            }
          }
;
        }
      }
);
      try {
        entry.scriptClass=groovyLoader.parseClass(groovyScriptConn.getInputStream(),script);
      }
 catch (      Exception e) {
        throw new ScriptException("Could not parse script: " + script,e);
      }
      entry.lastModified=lastModified;
      scriptCache.put(script,entry);
    }
  }
  Script scriptObject=InvokerHelper.createScript(entry.scriptClass,binding);
  return scriptObject.run();
}
