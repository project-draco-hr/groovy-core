{
  if (groovyLoader == null || groovyLoader.getParent() != parentClassLoader) {
    groovyLoader=(GroovyClassLoader)AccessController.doPrivileged(new PrivilegedAction(){
      public Object run(){
        return new GroovyClassLoader(parentClassLoader){
          protected Class findClass(          String className) throws ClassNotFoundException {
            String filename=className.replace('.',File.separatorChar) + ".groovy";
            URLConnection dependentScriptConn=null;
            try {
              dependentScriptConn=rc.getResourceConnection(filename);
              ScriptCacheEntry currentCacheEntry=(ScriptCacheEntry)currentCacheEntryHolder.get();
              if (currentCacheEntry != null)               currentCacheEntry.dependencies.put(dependentScriptConn.getURL(),new Long(dependentScriptConn.getLastModified()));
              return parseClass(dependentScriptConn.getInputStream(),filename);
            }
 catch (            ResourceException e1) {
              throw new ClassNotFoundException("Could not read " + className + ": "+ e1);
            }
catch (            CompilationFailedException e2) {
              throw new ClassNotFoundException("Syntax error in " + className + ": "+ e2);
            }
catch (            IOException e3) {
              throw new ClassNotFoundException("Problem reading " + className + ": "+ e3);
            }
 finally {
              try {
                if (dependentScriptConn != null && dependentScriptConn.getInputStream() != null) {
                  dependentScriptConn.getInputStream().close();
                }
              }
 catch (              IOException e) {
              }
            }
          }
        }
;
      }
    }
);
  }
}
