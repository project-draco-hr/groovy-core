{
  ScriptCacheEntry entry;
  scriptName=scriptName.intern();
synchronized (scriptName) {
    URLConnection groovyScriptConn=rc.getResourceConnection(scriptName);
    long lastModified=groovyScriptConn.getLastModified();
    entry=(ScriptCacheEntry)scriptCache.get(scriptName);
    boolean dependencyOutOfDate=false;
    if (entry != null) {
      for (Iterator i=entry.dependencies.keySet().iterator(); i.hasNext(); ) {
        URLConnection urlc=null;
        URL url=(URL)i.next();
        try {
          urlc=url.openConnection();
          urlc.setDoInput(false);
          urlc.setDoOutput(false);
          long dependentLastModified=urlc.getLastModified();
          if (dependentLastModified > ((Long)entry.dependencies.get(url)).longValue()) {
            dependencyOutOfDate=true;
            break;
          }
        }
 catch (        IOException ioe) {
          dependencyOutOfDate=true;
          break;
        }
      }
    }
    if (entry == null || entry.lastModified < lastModified || dependencyOutOfDate) {
      ScriptCacheEntry currentCacheEntry=new ScriptCacheEntry();
      currentCacheEntryHolder.set(currentCacheEntry);
      try {
        currentCacheEntry.scriptClass=groovyLoader.parseClass(groovyScriptConn.getInputStream(),scriptName);
      }
 catch (      Exception e) {
        throw new ScriptException("Could not parse scriptName: " + scriptName,e);
      }
 finally {
        currentCacheEntryHolder.set(null);
      }
      currentCacheEntry.lastModified=lastModified;
      scriptCache.put(scriptName,currentCacheEntry);
      entry=currentCacheEntry;
      currentCacheEntry=null;
    }
  }
  return entry;
}
