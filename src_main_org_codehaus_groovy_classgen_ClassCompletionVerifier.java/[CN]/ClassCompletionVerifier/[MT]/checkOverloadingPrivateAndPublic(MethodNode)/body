{
  if (isConstructor(node))   return;
  boolean hasPrivate=node.isPrivate();
  boolean hasPublic=node.isPublic();
  for (  MethodNode method : currentClass.getMethods(node.getName())) {
    if (method == node)     continue;
    if (!method.getDeclaringClass().equals(node.getDeclaringClass()))     continue;
    if (method.isPublic() || method.isProtected()) {
      hasPublic=true;
    }
 else {
      hasPrivate=true;
    }
    if (hasPrivate && hasPublic)     break;
  }
  if (hasPrivate && hasPublic) {
    addError("Mixing private and public/protected methods of the same name causes multimethods to be disabled and is forbidden to avoid surprising behaviour. Renaming the private methods will solve the problem.",node);
  }
}
