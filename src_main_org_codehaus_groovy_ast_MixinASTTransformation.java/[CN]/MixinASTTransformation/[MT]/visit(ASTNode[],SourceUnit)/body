{
  AnnotationNode node=(AnnotationNode)nodes[0];
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  if (!useClassNode.equals(node.getClassNode()))   return;
  final Expression expr=node.getMember("value");
  if (expr == null) {
    return;
  }
  Expression useClasses=null;
  if (expr instanceof ClassExpression) {
    useClasses=expr;
  }
  if (expr instanceof ListExpression) {
    ListExpression listExpression=(ListExpression)expr;
    for (Iterator it=listExpression.getExpressions().iterator(); it.hasNext(); ) {
      Expression ex=(Expression)it.next();
      if (!(ex instanceof ClassExpression))       return;
    }
    useClasses=expr;
  }
  if (useClasses == null)   return;
  if (parent instanceof ClassNode) {
    ClassNode annotatedClass=(ClassNode)parent;
    final Parameter[] NOPARAMS=new Parameter[0];
    MethodNode clinit=annotatedClass.getDeclaredMethod("<clinit>",NOPARAMS);
    if (clinit == null) {
      clinit=annotatedClass.addMethod("<clinit>",Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_SYNTHETIC,ClassHelper.VOID_TYPE,NOPARAMS,null,new BlockStatement());
      clinit.setSynthetic(true);
    }
    final BlockStatement code=(BlockStatement)clinit.getCode();
    code.addStatement(new ExpressionStatement(new MethodCallExpression(new PropertyExpression(new ClassExpression(annotatedClass),"metaClass"),"mixin",useClasses)));
  }
}
