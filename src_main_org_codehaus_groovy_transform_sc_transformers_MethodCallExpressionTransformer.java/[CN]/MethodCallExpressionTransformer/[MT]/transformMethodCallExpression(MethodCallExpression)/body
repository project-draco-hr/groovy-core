{
  Expression objectExpression=expr.getObjectExpression();
  ClassNode type=staticCompilationTransformer.getTypeChooser().resolveType(objectExpression,staticCompilationTransformer.getClassNode());
  if (isCallOnClosure(expr)) {
    FieldNode field=staticCompilationTransformer.getClassNode().getField(expr.getMethodAsString());
    if (field != null) {
      MethodCallExpression result=new MethodCallExpression(new FieldExpression(field),"call",staticCompilationTransformer.transform(expr.getArguments()));
      result.setImplicitThis(false);
      result.setSourcePosition(expr);
      result.setSafe(expr.isSafe());
      result.setSpreadSafe(expr.isSpreadSafe());
      return result;
    }
  }
  if (type != null && type.isArray()) {
    String method=expr.getMethodAsString();
    ClassNode componentType=type.getComponentType();
    if ("getAt".equals(method)) {
      Expression arguments=expr.getArguments();
      if (arguments instanceof TupleExpression) {
        List<Expression> argList=((TupleExpression)arguments).getExpressions();
        if (argList.size() == 1) {
          Expression indexExpr=argList.get(0);
          ClassNode argType=staticCompilationTransformer.getTypeChooser().resolveType(indexExpr,staticCompilationTransformer.getClassNode());
          ClassNode indexType=ClassHelper.getWrapper(argType);
          if (componentType.isEnum() && ClassHelper.Number_TYPE == indexType) {
            indexType=ClassHelper.Integer_TYPE;
          }
          if (argType != null && ClassHelper.Integer_TYPE == indexType) {
            BinaryExpression binaryExpression=new BinaryExpression(objectExpression,Token.newSymbol("[",indexExpr.getLineNumber(),indexExpr.getColumnNumber()),indexExpr);
            binaryExpression.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE,componentType);
            return staticCompilationTransformer.transform(binaryExpression);
          }
        }
      }
    }
 else     if ("putAt".equals(method)) {
      Expression arguments=expr.getArguments();
      if (arguments instanceof TupleExpression) {
        List<Expression> argList=((TupleExpression)arguments).getExpressions();
        if (argList.size() == 2) {
          Expression indexExpr=argList.get(0);
          Expression objExpr=argList.get(1);
          ClassNode argType=staticCompilationTransformer.getTypeChooser().resolveType(indexExpr,staticCompilationTransformer.getClassNode());
          if (argType != null && ClassHelper.Integer_TYPE == ClassHelper.getWrapper(argType)) {
            BinaryExpression arrayGet=new BinaryExpression(objectExpression,Token.newSymbol("[",indexExpr.getLineNumber(),indexExpr.getColumnNumber()),indexExpr);
            arrayGet.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE,componentType);
            BinaryExpression assignment=new BinaryExpression(arrayGet,Token.newSymbol("=",objExpr.getLineNumber(),objExpr.getColumnNumber()),objExpr);
            return staticCompilationTransformer.transform(assignment);
          }
        }
      }
    }
  }
  return staticCompilationTransformer.superTransform(expr);
}
