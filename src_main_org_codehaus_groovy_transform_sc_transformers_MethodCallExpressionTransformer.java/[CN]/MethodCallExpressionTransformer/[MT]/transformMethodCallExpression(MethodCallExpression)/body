{
  Expression objectExpression=expr.getObjectExpression();
  if (expr.isSafe()) {
    MethodCallExpression notSafe=new MethodCallExpression(objectExpression,expr.getMethod(),expr.getArguments());
    notSafe.copyNodeMetaData(expr);
    notSafe.setSpreadSafe(expr.isSpreadSafe());
    notSafe.setSourcePosition(expr);
    notSafe.setMethodTarget(expr.getMethodTarget());
    TernaryExpression texpr=new TernaryExpression(new BooleanExpression(new BinaryExpression(objectExpression,Token.newSymbol("!=",objectExpression.getLineNumber(),objectExpression.getColumnNumber()),ConstantExpression.NULL)),notSafe,ConstantExpression.NULL);
    return staticCompilationTransformer.transform(texpr);
  }
  ClassNode type=staticCompilationTransformer.getTypeChooser().resolveType(objectExpression,staticCompilationTransformer.getClassNode());
  if (type != null && type.isArray()) {
    String method=expr.getMethodAsString();
    ClassNode componentType=type.getComponentType();
    if ("getAt".equals(method)) {
      Expression arguments=expr.getArguments();
      if (arguments instanceof TupleExpression) {
        List<Expression> argList=((TupleExpression)arguments).getExpressions();
        if (argList.size() == 1) {
          Expression indexExpr=argList.get(0);
          ClassNode argType=staticCompilationTransformer.getTypeChooser().resolveType(indexExpr,staticCompilationTransformer.getClassNode());
          ClassNode indexType=ClassHelper.getWrapper(argType);
          if (componentType.isEnum() && ClassHelper.Number_TYPE == indexType) {
            indexType=ClassHelper.Integer_TYPE;
          }
          if (argType != null && ClassHelper.Integer_TYPE == indexType) {
            BinaryExpression binaryExpression=new BinaryExpression(objectExpression,Token.newSymbol("[",indexExpr.getLineNumber(),indexExpr.getColumnNumber()),indexExpr);
            binaryExpression.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE,componentType);
            return binaryExpression;
          }
        }
      }
    }
    if ("putAt".equals(method)) {
      Expression arguments=expr.getArguments();
      if (arguments instanceof TupleExpression) {
        List<Expression> argList=((TupleExpression)arguments).getExpressions();
        if (argList.size() == 2) {
          Expression indexExpr=argList.get(0);
          Expression objExpr=argList.get(1);
          ClassNode argType=staticCompilationTransformer.getTypeChooser().resolveType(indexExpr,staticCompilationTransformer.getClassNode());
          if (argType != null && ClassHelper.Integer_TYPE == ClassHelper.getWrapper(argType)) {
            BinaryExpression arrayGet=new BinaryExpression(objectExpression,Token.newSymbol("[",indexExpr.getLineNumber(),indexExpr.getColumnNumber()),indexExpr);
            arrayGet.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE,componentType);
            BinaryExpression assignment=new BinaryExpression(arrayGet,Token.newSymbol("=",objExpr.getLineNumber(),objExpr.getColumnNumber()),objExpr);
            return assignment;
          }
        }
      }
    }
  }
  return staticCompilationTransformer.superTransform(expr);
}
