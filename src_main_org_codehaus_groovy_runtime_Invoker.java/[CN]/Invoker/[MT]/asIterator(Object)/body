{
  if (value == null) {
    return Collections.EMPTY_LIST.iterator();
  }
  if (value instanceof Iterator) {
    return (Iterator)value;
  }
  if (value instanceof NodeList) {
    final NodeList nodeList=(NodeList)value;
    return new Iterator(){
      private int current=0;
      public boolean hasNext(){
        return current < nodeList.getLength();
      }
      public Object next(){
        Node node=nodeList.item(current++);
        return node;
      }
      public void remove(){
        throw new UnsupportedOperationException("Cannot remove() from an Enumeration");
      }
    }
;
  }
 else   if (value instanceof Enumeration) {
    final Enumeration enumeration=(Enumeration)value;
    return new Iterator(){
      private Object last;
      public boolean hasNext(){
        return enumeration.hasMoreElements();
      }
      public Object next(){
        last=enumeration.nextElement();
        return last;
      }
      public void remove(){
        throw new UnsupportedOperationException("Cannot remove() from an Enumeration");
      }
    }
;
  }
 else   if (value instanceof Matcher) {
    final Matcher matcher=(Matcher)value;
    return new Iterator(){
      private boolean found=false;
      private boolean done=false;
      public boolean hasNext(){
        if (done) {
          return false;
        }
        if (!found) {
          found=matcher.find();
          if (!found) {
            done=true;
          }
        }
        return found;
      }
      public Object next(){
        if (!found) {
          if (!hasNext()) {
            throw new NoSuchElementException();
          }
        }
        found=false;
        return matcher.group();
      }
      public void remove(){
        throw new UnsupportedOperationException();
      }
    }
;
  }
 else   if (value instanceof Reader) {
    return iteratorForReader((Reader)value);
  }
 else   if (value instanceof InputStream) {
    final DataInputStream dis=new DataInputStream((InputStream)value);
    return new Iterator(){
      Byte nextVal=null;
      boolean nextMustRead=true;
      boolean hasNext=true;
      public boolean hasNext(){
        if (nextMustRead && hasNext) {
          try {
            byte bPrimitive=dis.readByte();
            nextVal=new Byte(bPrimitive);
            nextMustRead=false;
          }
 catch (          IOException e) {
            hasNext=false;
          }
        }
        return hasNext;
      }
      public Object next(){
        Byte retval=null;
        if (nextMustRead) {
          try {
            byte b=dis.readByte();
            retval=new Byte(b);
          }
 catch (          IOException e) {
            hasNext=false;
          }
        }
 else         retval=nextVal;
        nextMustRead=true;
        return retval;
      }
      public void remove(){
        throw new UnsupportedOperationException("Cannot remove() from an InputStream Iterator");
      }
    }
;
  }
 else   if (value instanceof File) {
    try {
      return iteratorForReader(DefaultGroovyMethods.newReader((File)value));
    }
 catch (    IOException e) {
      throw new GroovyRuntimeException("Error reading file: " + value,e);
    }
  }
 else {
    try {
      return (Iterator)invokeMethod(value,"iterator",EMPTY_ARGUMENTS);
    }
 catch (    Exception e) {
    }
  }
  return asCollection(value).iterator();
}
