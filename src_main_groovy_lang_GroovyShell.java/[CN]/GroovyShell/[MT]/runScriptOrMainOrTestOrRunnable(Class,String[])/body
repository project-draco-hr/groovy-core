{
  if (scriptClass == null) {
    return null;
  }
  if (Script.class.isAssignableFrom(scriptClass)) {
    Script script=null;
    try {
      script=(Script)scriptClass.newInstance();
    }
 catch (    InstantiationException e) {
    }
catch (    IllegalAccessException e) {
    }
    if (script != null) {
      script.setBinding(context);
      script.setProperty("args",args);
      return script.run();
    }
  }
  try {
    scriptClass.getMethod("main",new Class[]{String[].class});
    return InvokerHelper.invokeMethod(scriptClass,"main",new Object[]{args});
  }
 catch (  NoSuchMethodException e) {
    if (Runnable.class.isAssignableFrom(scriptClass)) {
      return runRunnable(scriptClass,args);
    }
    if (isJUnit3Test(scriptClass)) {
      return runJUnit3Test(scriptClass);
    }
    if (isJUnit3TestSuite(scriptClass)) {
      return runJUnit3TestSuite(scriptClass);
    }
    if (isJUnit4Test(scriptClass)) {
      return runJUnit4Test(scriptClass);
    }
    for (    Map.Entry<String,GroovyRunner> entry : GroovySystem.RUNNER_REGISTRY.entrySet()) {
      GroovyRunner runner=entry.getValue();
      if (runner != null && runner.canRun(scriptClass,this.loader)) {
        return runner.run(scriptClass,this.loader);
      }
    }
    String message="This script or class could not be run.\n" + "It should either:\n" + "- have a main method,\n"+ "- be a JUnit test or extend GroovyTestCase,\n"+ "- implement the Runnable interface,\n"+ "- or be compatible with a registered script runner. Known runners:\n";
    if (GroovySystem.RUNNER_REGISTRY.isEmpty()) {
      message+="  * <none>";
    }
    for (    Map.Entry<String,GroovyRunner> entry : GroovySystem.RUNNER_REGISTRY.entrySet()) {
      message+="  * " + entry.getKey() + "\n";
    }
    throw new GroovyRuntimeException(message);
  }
}
