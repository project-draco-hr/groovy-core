{
  if (nodes == null) {
    return;
  }
  init(nodes,source);
  AnnotationNode annotationNode=(AnnotationNode)nodes[0];
  AnnotatedNode annotatedNode=(AnnotatedNode)nodes[1];
  if (MY_TYPE.equals(annotationNode.getClassNode()) && annotatedNode instanceof MethodNode) {
    MethodNode methodNode=(MethodNode)annotatedNode;
    if (methodNode.isAbstract()) {
      addError("Annotation " + MY_TYPE_NAME + " cannot be used for abstract methods.",methodNode);
      return;
    }
    if (methodNode.isVoidMethod()) {
      addError("Annotation " + MY_TYPE_NAME + " cannot be used for void methods.",methodNode);
      return;
    }
    ClosureExpression closureExpression=new ClosureExpression(methodNode.getParameters(),methodNode.getCode());
    closureExpression.setVariableScope(methodNode.getVariableScope());
    ClassNode ownerClassNode=methodNode.getDeclaringClass();
    int modifiers=FieldNode.ACC_PRIVATE | FieldNode.ACC_FINAL;
    if (methodNode.isStatic()) {
      modifiers=modifiers | FieldNode.ACC_STATIC;
    }
    int protectedCacheSize=getIntMemberValue(annotationNode,PROTECTED_CACHE_SIZE_NAME);
    int maxCacheSize=getIntMemberValue(annotationNode,MAX_CACHE_SIZE_NAME);
    MethodCallExpression memoizeClosureCallExpression=buildMemoizeClosureCallExpression(closureExpression,protectedCacheSize,maxCacheSize);
    String memoizedClosureFieldName=buildUniqueName(ownerClassNode,methodNode);
    FieldNode memoizedClosureField=new FieldNode(memoizedClosureFieldName,modifiers,ClassHelper.DYNAMIC_TYPE,null,memoizeClosureCallExpression);
    ownerClassNode.addField(memoizedClosureField);
    BlockStatement newCode=new BlockStatement();
    ArgumentListExpression args=new ArgumentListExpression(methodNode.getParameters());
    MethodCallExpression closureCallExpression=new MethodCallExpression(new FieldExpression(memoizedClosureField),CLOSURE_CALL_METHOD_NAME,args);
    newCode.addStatement(new ReturnStatement(closureCallExpression));
    newCode.setVariableScope(methodNode.getVariableScope());
    methodNode.setCode(newCode);
  }
}
