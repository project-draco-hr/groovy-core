{
  init(nodes,source);
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  AnnotationNode anno=(AnnotationNode)nodes[0];
  if (!MY_TYPE.equals(anno.getClassNode()))   return;
  if (parent instanceof ClassNode) {
    ClassNode cNode=(ClassNode)parent;
    checkNotInterface(cNode,MY_TYPE_NAME);
    boolean includeSuper=memberHasValue(anno,"includeSuper",true);
    if (includeSuper && cNode.getSuperClass().getName().equals("java.lang.Object")) {
      addError("Error during " + MY_TYPE_NAME + " processing: includeSuper=true but '"+ cNode.getName()+ "' has no super class.",anno);
    }
    boolean includeNames=memberHasValue(anno,"includeNames",true);
    boolean includeFields=memberHasValue(anno,"includeFields",true);
    List<String> excludes=tokenize((String)getMemberValue(anno,"excludes"));
    List<String> includes=tokenize((String)getMemberValue(anno,"includes"));
    boolean ignoreNullValues=memberHasValue(anno,"ignoreNullValues",true);
    if (hasAnnotation(cNode,CanonicalASTTransformation.MY_TYPE)) {
      AnnotationNode canonical=cNode.getAnnotations(CanonicalASTTransformation.MY_TYPE).get(0);
      if (excludes == null || excludes.isEmpty())       excludes=tokenize((String)getMemberValue(canonical,"excludes"));
      if (includes == null || includes.isEmpty())       includes=tokenize((String)getMemberValue(canonical,"includes"));
    }
    if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {
      addError("Error during " + MY_TYPE_NAME + " processing: Only one of 'includes' and 'excludes' should be supplied not both.",anno);
    }
    toStringInit(cNode,new ConstantExpression(includeNames));
    createToString(cNode,includeSuper,includeFields,excludes,includes,ignoreNullValues);
  }
}
