{
  final Expression result=var("_result");
  body.addStatement(declS(result,ctorX(STRINGBUILDER_TYPE)));
  final VariableExpression first=var("$toStringFirst");
  body.addStatement(declS(first,constX(Boolean.TRUE)));
  String className=(includePackage) ? cNode.getName() : cNode.getNameWithoutPackage();
  body.addStatement(appendS(result,constX(className + "(")));
  List<PropertyNode> pList=getInstanceProperties(cNode);
  for (  PropertyNode pNode : pList) {
    if (shouldSkip(pNode.getName(),excludes,includes))     continue;
    Expression getter=callX(INVOKER_TYPE,"getProperty",args(var("this"),constX(pNode.getName())));
    appendValue(body,result,first,getter,pNode.getName(),includeNames,ignoreNulls);
  }
  if (includeFields) {
    List<FieldNode> fList=new ArrayList<FieldNode>();
    fList.addAll(getInstanceNonPropertyFields(cNode));
    for (    FieldNode fNode : fList) {
      if (shouldSkip(fNode.getName(),excludes,includes))       continue;
      appendValue(body,result,first,var(fNode),fNode.getName(),includeNames,ignoreNulls);
    }
  }
  if (includeSuper) {
    appendCommaIfNotFirst(body,result,first);
    appendPrefix(body,result,"super",includeNames);
    body.addStatement(appendS(result,callSuperX("toString")));
  }
  body.addStatement(appendS(result,constX(")")));
  MethodCallExpression toString=callX(result,"toString");
  toString.setImplicitThis(false);
  return toString;
}
