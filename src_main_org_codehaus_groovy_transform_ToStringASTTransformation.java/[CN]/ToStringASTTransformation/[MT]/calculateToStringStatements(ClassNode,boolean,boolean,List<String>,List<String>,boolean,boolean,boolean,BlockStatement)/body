{
  final Expression result=new VariableExpression("_result");
  final Expression init=new ConstructorCallExpression(STRINGBUILDER_TYPE,MethodCallExpression.NO_ARGUMENTS);
  body.addStatement(declStatement(result,init));
  final VariableExpression first=new VariableExpression("$toStringFirst");
  body.addStatement(declStatement(first,ConstantExpression.TRUE));
  String className=(includePackage) ? cNode.getName() : cNode.getNameWithoutPackage();
  body.addStatement(append(result,new ConstantExpression(className + "(")));
  List<PropertyNode> pList=getInstanceProperties(cNode);
  for (  PropertyNode pNode : pList) {
    if (shouldSkip(pNode.getName(),excludes,includes))     continue;
    String getterName="get" + Verifier.capitalize(pNode.getName());
    Expression getter=new MethodCallExpression(VariableExpression.THIS_EXPRESSION,getterName,MethodCallExpression.NO_ARGUMENTS);
    appendValue(body,result,first,getter,pNode.getName(),includeNames,ignoreNulls);
  }
  if (includeFields) {
    List<FieldNode> fList=new ArrayList<FieldNode>();
    fList.addAll(getInstanceNonPropertyFields(cNode));
    for (    FieldNode fNode : fList) {
      if (shouldSkip(fNode.getName(),excludes,includes))       continue;
      appendValue(body,result,first,new VariableExpression(fNode),fNode.getName(),includeNames,ignoreNulls);
    }
  }
  if (includeSuper) {
    appendCommaIfNotFirst(body,result,first);
    appendPrefix(body,result,"super",includeNames);
    body.addStatement(append(result,new MethodCallExpression(VariableExpression.SUPER_EXPRESSION,"toString",MethodCallExpression.NO_ARGUMENTS)));
  }
  body.addStatement(append(result,new ConstantExpression(")")));
  MethodCallExpression toString=new MethodCallExpression(result,"toString",MethodCallExpression.NO_ARGUMENTS);
  toString.setImplicitThis(false);
  return toString;
}
