{
  gotoPhase(Phases.INITIALIZATION);
  throughPhase=Math.min(throughPhase,Phases.ALL);
  while (throughPhase >= phase && phase <= Phases.ALL) {
    for (Iterator it=phaseOperations[phase].iterator(); it.hasNext(); ) {
      Object operation=it.next();
      if (operation instanceof LoopBodyForPrimaryClassNodeOperations) {
        applyToPrimaryClassNodes((LoopBodyForPrimaryClassNodeOperations)operation);
      }
 else       if (operation instanceof LoopBodyForSourceUnitOperations) {
        applyToSourceUnits((LoopBodyForSourceUnitOperations)operation);
      }
 else {
        applyToGeneratedGroovyClasses((LoopBodyForGeneratedGroovyClassOperations)operation);
      }
    }
    if (dequeued())     continue;
    if (phase == Phases.CLASS_GENERATION && ast.hasClassNodeToCompile()) {
      break;
    }
    if (progressCallback != null)     progressCallback.call(this,phase);
    completePhase();
    applyToSourceUnits(mark);
    gotoPhase(phase + 1);
    if (phase == Phases.CLASS_GENERATION) {
      sortClasses();
    }
  }
  for (Iterator iter=ast.iterateClassNodeToCompile(); iter.hasNext(); ) {
    String name=(String)iter.next();
    String location=ast.getScriptSourceLocation(name);
    getErrorCollector().addErrorAndContinue(new SimpleMessage("Compilation incomplete: expected to find the class " + name + " in "+ location,this));
  }
  errorCollector.failIfErrors();
}
