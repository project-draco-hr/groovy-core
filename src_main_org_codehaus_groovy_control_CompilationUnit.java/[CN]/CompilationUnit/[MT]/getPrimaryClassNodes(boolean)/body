{
  List unsorted=new ArrayList();
  Iterator modules=this.ast.getModules().iterator();
  while (modules.hasNext()) {
    ModuleNode module=(ModuleNode)modules.next();
    Iterator classNodes=module.getClasses().iterator();
    while (classNodes.hasNext()) {
      ClassNode classNode=(ClassNode)classNodes.next();
      unsorted.add(classNode);
    }
  }
  if (sort == false)   return unsorted;
  int[] indexClass=new int[unsorted.size()];
  int[] indexInterface=new int[unsorted.size()];
{
    int i=0;
    for (Iterator iter=unsorted.iterator(); iter.hasNext(); i++) {
      ClassNode node=(ClassNode)iter.next();
      int count=0;
      ClassNode element=node;
      while (element != null) {
        count++;
        element=element.getSuperClass();
      }
      if (node.isInterface()) {
        indexInterface[i]=count;
        indexClass[i]=-1;
      }
 else {
        indexClass[i]=count;
        indexInterface[i]=-1;
      }
    }
  }
  List sorted=getSorted(indexInterface,unsorted);
  sorted.addAll(getSorted(indexClass,unsorted));
  return sorted;
}
