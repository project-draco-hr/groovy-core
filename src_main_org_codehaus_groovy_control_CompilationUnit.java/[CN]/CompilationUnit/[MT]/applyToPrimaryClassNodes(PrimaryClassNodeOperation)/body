{
  Iterator classNodes=getPrimaryClassNodes(body.needSortedInput()).iterator();
  while (classNodes.hasNext()) {
    SourceUnit context=null;
    try {
      ClassNode classNode=(ClassNode)classNodes.next();
      context=classNode.getModule().getContext();
      if (context == null || context.phase < phase || (context.phase == phase && !context.phaseComplete)) {
        if (body instanceof CompilationUnitAware) {
          ((CompilationUnitAware)body).setCompilationUnit(this);
        }
        body.call(context,new GeneratorContext(this.ast),classNode);
      }
    }
 catch (    CompilationFailedException e) {
    }
catch (    NullPointerException npe) {
      throw npe;
    }
catch (    GroovyBugError e) {
      changeBugText(e,context);
      throw e;
    }
catch (    Exception e) {
      ErrorCollector nestedCollector=null;
      for (Throwable next=e.getCause(); next != e && next != null; next=next.getCause()) {
        if (!(next instanceof MultipleCompilationErrorsException))         continue;
        MultipleCompilationErrorsException mcee=(MultipleCompilationErrorsException)next;
        nestedCollector=mcee.collector;
        break;
      }
      if (nestedCollector != null) {
        getErrorCollector().addCollectorContents(nestedCollector);
      }
 else {
        getErrorCollector().addError(new ExceptionMessage(e,configuration.getDebug(),this));
      }
    }
  }
  getErrorCollector().failIfErrors();
}
