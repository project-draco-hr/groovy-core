{
  super(configuration,loader,null);
  this.names=new ArrayList();
  this.queuedSources=new LinkedList();
  this.sources=new HashMap();
  this.summariesBySourceName=new HashMap();
  this.summariesByPublicClassName=new HashMap();
  this.classSourcesByPublicClassName=new HashMap();
  this.ast=new CompileUnit(this.classLoader,security,this.configuration);
  this.generatedClasses=new ArrayList();
  this.verifier=new Verifier();
  this.resolveVisitor=new ResolveVisitor(this);
  phaseOperations=new LinkedList[Phases.ALL + 1];
  for (int i=0; i < phaseOperations.length; i++) {
    phaseOperations[i]=new LinkedList();
  }
  addPhaseOperation(new SourceUnitOperation(){
    public void call(    SourceUnit source) throws CompilationFailedException {
      source.parse();
    }
  }
,Phases.PARSING);
  addPhaseOperation(summarize,Phases.PARSING);
  addPhaseOperation(convert,Phases.CONVERSION);
  addPhaseOperation(resolve,Phases.SEMANTIC_ANALYSIS);
  addPhaseOperation(classgen,Phases.CLASS_GENERATION);
  addPhaseOperation(new SourceUnitOperation(){
    public void call(    SourceUnit source) throws CompilationFailedException {
      List classes=source.ast.getClasses();
      for (Iterator it=classes.iterator(); it.hasNext(); ) {
        ClassNode node=(ClassNode)it.next();
        CompileUnit cu=node.getCompileUnit();
        for (Iterator iter=cu.iterateClassNodeToCompile(); iter.hasNext(); ) {
          String name=(String)iter.next();
          String location=ast.getScriptSourceLocation(name);
          getErrorCollector().addErrorAndContinue(new SimpleMessage("Compilation incomplete: expected to find the class " + name + " in "+ location,CompilationUnit.this));
        }
      }
    }
  }
,Phases.CLASS_GENERATION);
  addPhaseOperation(output);
  this.classgenCallback=null;
}
