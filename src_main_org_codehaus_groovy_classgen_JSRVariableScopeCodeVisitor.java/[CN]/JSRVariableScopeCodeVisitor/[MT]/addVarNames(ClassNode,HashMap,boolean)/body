{
  if (cn == null)   return;
  List l=cn.getFields();
  for (Iterator iter=l.iterator(); iter.hasNext(); ) {
    FieldNode f=(FieldNode)iter.next();
    if (visitParent && Modifier.isPrivate(f.getModifiers()))     continue;
    refs.put(f.getName(),new Var(f));
  }
  l=cn.getMethods();
  for (Iterator iter=l.iterator(); iter.hasNext(); ) {
    MethodNode f=(MethodNode)iter.next();
    if (visitParent && Modifier.isPrivate(f.getModifiers()))     continue;
    String name=getPropertyName(f.getName());
    if (name == null)     continue;
    refs.put(name,new Var(name,f));
  }
  l=cn.getProperties();
  for (Iterator iter=l.iterator(); iter.hasNext(); ) {
    PropertyNode f=(PropertyNode)iter.next();
    if (visitParent && Modifier.isPrivate(f.getModifiers()))     continue;
    refs.put(f.getName(),new Var(f));
  }
  if (!visitParent)   return;
  addVarNames(cn.getSuperClass(),refs,visitParent);
  MethodNode enclosingMethod=cn.getEnclosingMethod();
  if (enclosingMethod == null)   return;
  Parameter[] params=enclosingMethod.getParameters();
  for (int i=0; i < params.length; i++) {
    refs.put(params[i].getName(),new Var(params[i],enclosingMethod.isStatic()));
  }
  if (visitParent)   addVarNames(enclosingMethod.getDeclaringClass(),refs,visitParent);
  addVarNames(cn.getOuterClass(),refs,visitParent);
}
