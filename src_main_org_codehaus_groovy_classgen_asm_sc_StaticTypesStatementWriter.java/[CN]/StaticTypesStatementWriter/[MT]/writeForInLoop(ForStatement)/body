{
  controller.getAcg().onLineNumber(loop,"visitForLoop");
  writeStatementLabel(loop);
  CompileStack compileStack=controller.getCompileStack();
  MethodVisitor mv=controller.getMethodVisitor();
  OperandStack operandStack=controller.getOperandStack();
  compileStack.pushLoop(loop.getVariableScope(),loop.getStatementLabels());
  TypeChooser typeChooser=controller.getTypeChooser();
  Expression collectionExpression=loop.getCollectionExpression();
  ClassNode collectionType=typeChooser.resolveType(collectionExpression,controller.getClassNode());
  Parameter loopVariable=loop.getVariable();
  int size=operandStack.getStackLength();
  if (collectionType.isArray() && loopVariable.getOriginType().equals(collectionType.getComponentType())) {
    writeOptimizedForEachLoop(compileStack,operandStack,mv,loop,collectionExpression,collectionType,loopVariable);
  }
 else   if (ENUMERATION_CLASSNODE.equals(collectionType)) {
    writeEnumerationBasedForEachLoop(compileStack,operandStack,mv,loop,collectionExpression,collectionType,loopVariable);
  }
 else {
    writeIteratorBasedForEachLoop(compileStack,operandStack,mv,loop,collectionExpression,collectionType,loopVariable);
  }
  operandStack.popDownTo(size);
  compileStack.pop();
}
