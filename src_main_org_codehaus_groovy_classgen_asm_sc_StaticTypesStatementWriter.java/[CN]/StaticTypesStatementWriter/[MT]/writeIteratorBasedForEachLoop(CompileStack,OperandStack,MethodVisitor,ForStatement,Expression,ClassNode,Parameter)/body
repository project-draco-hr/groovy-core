{
  BytecodeVariable variable=compileStack.defineVariable(loopVariable,false);
  if (StaticTypeCheckingSupport.implementsInterfaceOrIsSubclassOf(collectionType,ITERABLE_CLASSNODE)) {
    MethodCallExpression iterator=new MethodCallExpression(collectionExpression,"iterator",new ArgumentListExpression());
    iterator.setMethodTarget(collectionType.getMethod("iterator",Parameter.EMPTY_ARRAY));
    iterator.setImplicitThis(false);
    iterator.visit(controller.getAcg());
  }
 else {
    collectionExpression.visit(controller.getAcg());
    mv.visitMethodInsn(INVOKESTATIC,"org/codehaus/groovy/runtime/DefaultGroovyMethods","iterator","(Ljava/lang/Object;)Ljava/util/Iterator;",false);
    operandStack.replace(ClassHelper.Iterator_TYPE);
  }
  int iteratorIdx=compileStack.defineTemporaryVariable("iterator",ClassHelper.Iterator_TYPE,true);
  Label continueLabel=compileStack.getContinueLabel();
  Label breakLabel=compileStack.getBreakLabel();
  mv.visitLabel(continueLabel);
  mv.visitVarInsn(ALOAD,iteratorIdx);
  writeIteratorHasNext(mv);
  mv.visitJumpInsn(IFEQ,breakLabel);
  mv.visitVarInsn(ALOAD,iteratorIdx);
  writeIteratorNext(mv);
  operandStack.push(ClassHelper.OBJECT_TYPE);
  operandStack.storeVar(variable);
  loop.getLoopBlock().visit(controller.getAcg());
  mv.visitJumpInsn(GOTO,continueLabel);
  mv.visitLabel(breakLabel);
  compileStack.removeVar(iteratorIdx);
}
