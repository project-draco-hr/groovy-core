{
  CompileStack compileStack=controller.getCompileStack();
  MethodVisitor mv=controller.getMethodVisitor();
  ClassNode classNode=controller.getClassNode();
  AsmClassGenerator acg=controller.getAcg();
  ClassNode closureClass=getOrAddClosureClass(expression,0);
  String closureClassinternalName=BytecodeHelper.getClassInternalName(closureClass);
  List constructors=closureClass.getDeclaredConstructors();
  ConstructorNode node=(ConstructorNode)constructors.get(0);
  Parameter[] localVariableParams=node.getParameters();
  mv.visitTypeInsn(NEW,closureClassinternalName);
  mv.visitInsn(DUP);
  if (controller.isStaticMethod() || compileStack.isInSpecialConstructorCall()) {
    (new ClassExpression(classNode)).visit(acg);
    (new ClassExpression(controller.getOutermostClass())).visit(acg);
  }
 else {
    mv.visitVarInsn(ALOAD,0);
    controller.getOperandStack().push(ClassHelper.OBJECT_TYPE);
    loadThis();
  }
  for (int i=2; i < localVariableParams.length; i++) {
    Parameter param=localVariableParams[i];
    String name=param.getName();
    loadReference(name,controller);
    if (param.getNodeMetaData(ClosureWriter.UseExistingReference.class) == null) {
      param.setNodeMetaData(ClosureWriter.UseExistingReference.class,Boolean.TRUE);
    }
  }
  mv.visitMethodInsn(INVOKESPECIAL,closureClassinternalName,"<init>",BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE,localVariableParams));
  controller.getOperandStack().replace(ClassHelper.CLOSURE_TYPE,localVariableParams.length);
}
