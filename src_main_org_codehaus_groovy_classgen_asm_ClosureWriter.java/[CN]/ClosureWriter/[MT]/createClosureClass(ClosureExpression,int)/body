{
  ClassNode classNode=controller.getClassNode();
  ClassNode outerClass=controller.getOutermostClass();
  MethodNode methodNode=controller.getMethodNode();
  String name=outerClass.getName() + "$" + controller.getContext().getNextClosureInnerName(outerClass,classNode,methodNode);
  boolean staticMethodOrInStaticClass=controller.isStaticMethod() || classNode.isStaticClass();
  Parameter[] parameters=expression.getParameters();
  if (parameters == null) {
    parameters=Parameter.EMPTY_ARRAY;
  }
 else   if (parameters.length == 0) {
    Parameter it=new Parameter(ClassHelper.OBJECT_TYPE,"it",ConstantExpression.NULL);
    parameters=new Parameter[]{it};
    Variable ref=expression.getVariableScope().getDeclaredVariable("it");
    if (ref != null)     it.setClosureSharedVariable(ref.isClosureSharedVariable());
  }
  Parameter[] localVariableParams=getClosureSharedVariables(expression);
  removeInitialValues(localVariableParams);
  InnerClassNode answer=new InnerClassNode(classNode,name,mods,ClassHelper.CLOSURE_TYPE);
  answer.setEnclosingMethod(controller.getMethodNode());
  answer.setSynthetic(true);
  answer.setUsingGenerics(outerClass.isUsingGenerics());
  answer.setSourcePosition(expression);
  if (staticMethodOrInStaticClass) {
    answer.setStaticClass(true);
  }
  if (controller.isInScriptBody()) {
    answer.setScriptBody(true);
  }
  MethodNode method=answer.addMethod("doCall",ACC_PUBLIC,ClassHelper.OBJECT_TYPE,parameters,ClassNode.EMPTY_ARRAY,expression.getCode());
  method.setSourcePosition(expression);
  VariableScope varScope=expression.getVariableScope();
  if (varScope == null) {
    throw new RuntimeException("Must have a VariableScope by now! for expression: " + expression + " class: "+ name);
  }
 else {
    method.setVariableScope(varScope.copy());
  }
  if (parameters.length > 1 || (parameters.length == 1 && parameters[0].getType() != null && parameters[0].getType() != ClassHelper.OBJECT_TYPE)) {
    MethodNode call=answer.addMethod("call",ACC_PUBLIC,ClassHelper.OBJECT_TYPE,parameters,ClassNode.EMPTY_ARRAY,new ReturnStatement(new MethodCallExpression(VariableExpression.THIS_EXPRESSION,"doCall",new ArgumentListExpression(parameters))));
    call.setSourcePosition(expression);
  }
  BlockStatement block=new BlockStatement();
  VariableExpression outer=new VariableExpression("_outerInstance");
  outer.setSourcePosition(expression);
  block.getVariableScope().putReferencedLocalVariable(outer);
  VariableExpression thisObject=new VariableExpression("_thisObject");
  thisObject.setSourcePosition(expression);
  block.getVariableScope().putReferencedLocalVariable(thisObject);
  TupleExpression conArgs=new TupleExpression(outer,thisObject);
  block.addStatement(new ExpressionStatement(new ConstructorCallExpression(ClassNode.SUPER,conArgs)));
  for (  Parameter param : localVariableParams) {
    String paramName=param.getName();
    ClassNode type=param.getType();
    if (true) {
      VariableExpression initialValue=new VariableExpression(paramName);
      initialValue.setAccessedVariable(param);
      initialValue.setUseReferenceDirectly(true);
      ClassNode realType=type;
      type=ClassHelper.makeReference();
      param.setType(ClassHelper.makeReference());
      FieldNode paramField=answer.addField(paramName,ACC_PRIVATE | ACC_SYNTHETIC,type,initialValue);
      paramField.setOriginType(ClassHelper.getWrapper(param.getOriginType()));
      paramField.setHolder(true);
      String methodName=Verifier.capitalize(paramName);
      Expression fieldExp=new FieldExpression(paramField);
      answer.addMethod("get" + methodName,ACC_PUBLIC,realType,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,new ReturnStatement(fieldExp));
    }
  }
  Parameter[] params=new Parameter[2 + localVariableParams.length];
  params[0]=new Parameter(ClassHelper.OBJECT_TYPE,"_outerInstance");
  params[1]=new Parameter(ClassHelper.OBJECT_TYPE,"_thisObject");
  System.arraycopy(localVariableParams,0,params,2,localVariableParams.length);
  ASTNode sn=answer.addConstructor(ACC_PUBLIC,params,ClassNode.EMPTY_ARRAY,block);
  sn.setSourcePosition(expression);
  correctAccessedVariable(answer,expression);
  return answer;
}
