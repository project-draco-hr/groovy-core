{
  this();
  String text=null;
  int numeric=0;
  numeric=getWarningLevel();
  try {
    text=configuration.getProperty("groovy.warnings","likely errors");
    numeric=Integer.parseInt(text);
  }
 catch (  NumberFormatException e) {
    if (text.equals("none")) {
      numeric=WarningMessage.NONE;
    }
 else     if (text.startsWith("likely")) {
      numeric=WarningMessage.LIKELY_ERRORS;
    }
 else     if (text.startsWith("possible")) {
      numeric=WarningMessage.POSSIBLE_ERRORS;
    }
 else     if (text.startsWith("paranoia")) {
      numeric=WarningMessage.PARANOIA;
    }
 else {
      throw new ConfigurationException("unrecogized groovy.warnings: " + text);
    }
  }
  setWarningLevel(numeric);
  text=configuration.getProperty("groovy.source.encoding");
  if (text != null) {
    setSourceEncoding(text);
  }
  text=configuration.getProperty("groovy.target.directory");
  if (text != null) {
    setTargetDirectory(text);
  }
  text=configuration.getProperty("groovy.target.bytecode");
  if (text != null) {
    setTargetBytecode(text);
  }
  text=configuration.getProperty("groovy.classpath");
  if (text != null) {
    setClasspath(text);
  }
  text=configuration.getProperty("groovy.output.verbose");
  if (text != null && text.equals("true")) {
    setVerbose(true);
  }
  text=configuration.getProperty("groovy.output.debug");
  if (text != null && text.equals("true")) {
    setDebug(true);
  }
  numeric=10;
  try {
    text=configuration.getProperty("groovy.errors.tolerance","10");
    numeric=Integer.parseInt(text);
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(e);
  }
  setTolerance(numeric);
  text=configuration.getProperty("groovy.script.base");
  setScriptBaseClass(text);
  text=configuration.getProperty("groovy.jsr");
  if (text != null) {
    setUseNewGroovy(text.equalsIgnoreCase("true"));
  }
  text=configuration.getProperty("groovy.recompile");
  if (text != null) {
    setRecompileGroovySource(text.equalsIgnoreCase("true"));
  }
  numeric=100;
  try {
    text=configuration.getProperty("groovy.recompile.minimumIntervall","" + numeric);
    numeric=Integer.parseInt(text);
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(e);
  }
  setMinimumRecompilationInterval(numeric);
}
