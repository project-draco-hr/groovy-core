{
  List<MethodNode> methods=new ArrayList<MethodNode>(node.getMethods());
  Map<MethodNode,MethodNode> privateBridgeMethods=new HashMap<MethodNode,MethodNode>();
  int i=-1;
  for (  MethodNode method : methods) {
    int access=method.getModifiers();
    if (method.isPrivate() && (access & Opcodes.ACC_SYNTHETIC) == 0) {
      i++;
      access=(access - Opcodes.ACC_PRIVATE + Opcodes.ACC_SYNTHETIC) + Opcodes.ACC_FINAL;
      Expression arguments;
      if (method.getParameters() == null || method.getParameters().length == 0) {
        arguments=ArgumentListExpression.EMPTY_ARGUMENTS;
      }
 else {
        List<Expression> args=new LinkedList<Expression>();
        for (        Parameter parameter : method.getParameters()) {
          args.add(new VariableExpression(parameter));
        }
        arguments=new ArgumentListExpression(args);
      }
      Expression receiver=method.isStatic() ? new ClassExpression(node) : new VariableExpression("this",node);
      ExpressionStatement returnStatement=new ExpressionStatement(new MethodCallExpression(receiver,method.getName(),arguments));
      MethodNode bridge=node.addMethod("access$" + i,access,method.getReturnType(),method.getParameters(),method.getExceptions(),returnStatement);
      privateBridgeMethods.put(method,bridge);
    }
  }
  node.setNodeMetaData(StaticCompilationMetadataKeys.PRIVATE_BRIDGE_METHODS,privateBridgeMethods);
}
