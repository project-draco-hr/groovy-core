{
  final Class selfClass=self.getTheClass();
  if (self instanceof HandleMetaClass) {
    self=(MetaClass)((HandleMetaClass)self).replaceDelegate();
  }
  if (!(self instanceof ExpandoMetaClass)) {
    if (self instanceof DelegatingMetaClass && ((DelegatingMetaClass)self).getAdaptee() instanceof ExpandoMetaClass) {
      self=((DelegatingMetaClass)self).getAdaptee();
    }
 else {
      throw new GroovyRuntimeException("Can't mixin methods to meta class: " + self);
    }
  }
  ExpandoMetaClass mc=(ExpandoMetaClass)self;
  ArrayList<MetaMethod> arr=new ArrayList<MetaMethod>();
  for (  Class categoryClass : categoryClasses) {
    final CachedClass cachedCategoryClass=ReflectionCache.getCachedClass(categoryClass);
    final MixinInMetaClass mixin=new MixinInMetaClass(mc,cachedCategoryClass);
    final MetaClass metaClass=GroovySystem.getMetaClassRegistry().getMetaClass(categoryClass);
    final List<MetaProperty> propList=(List<MetaProperty>)metaClass.getProperties();
    for (    MetaProperty prop : propList)     if (self.getMetaProperty(prop.getName()) == null) {
      mc.registerBeanProperty(prop.getName(),new MixinInstanceMetaProperty(prop,mixin));
    }
    for (    MetaProperty prop : cachedCategoryClass.getFields())     if (self.getMetaProperty(prop.getName()) == null) {
      mc.registerBeanProperty(prop.getName(),new MixinInstanceMetaProperty(prop,mixin));
    }
    for (    MetaMethod method : (List<MetaMethod>)metaClass.getMethods()) {
      final int mod=method.getModifiers();
      if (!Modifier.isPublic(mod))       continue;
      if (method instanceof CachedMethod && ((CachedMethod)method).getCachedMethod().isSynthetic())       continue;
      if (Modifier.isStatic(mod)) {
        if (method instanceof CachedMethod)         staticMethod(self,arr,(CachedMethod)method);
      }
 else       if (method.getDeclaringClass().getTheClass() != Object.class || method.getName().equals("toString")) {
        final MixinInstanceMetaMethod metaMethod=new MixinInstanceMetaMethod(method,mixin);
        arr.add(metaMethod);
      }
    }
  }
  for (  Object res : arr) {
    final MetaMethod metaMethod=(MetaMethod)res;
    if (metaMethod.getDeclaringClass().isAssignableFrom(selfClass))     mc.registerInstanceMethod(metaMethod);
 else {
      mc.registerSubclassInstanceMethod(metaMethod);
    }
  }
}
