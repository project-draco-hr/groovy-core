{
  sourceUnit=source;
  if (nodes.length != 2 || !(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof AnnotatedNode)) {
    throw new GroovyBugError("Internal error: expecting [AnnotationNode, AnnotatedNode] but got: " + Arrays.asList(nodes));
  }
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  AnnotationNode node=(AnnotationNode)nodes[0];
  if (!MY_TYPE.equals(node.getClassNode()))   return;
  if (parent instanceof DeclarationExpression) {
    DeclarationExpression de=(DeclarationExpression)parent;
    ClassNode cNode=de.getDeclaringClass();
    if (!cNode.isDerivedFrom(SCRIPT_TYPE)) {
      addError("Error: annotation " + MY_TYPE_NAME + " can only be used within a Script.",parent);
    }
    VariableExpression ve=de.getVariableExpression();
    cNode.addField(ve.getName(),ve.getModifiers(),ve.getType(),de.getRightExpression());
    candidate=de;
    super.visitClass(cNode);
  }
}
