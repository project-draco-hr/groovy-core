{
  ClassNode current=getController().getClassNode();
  ClassNode arrayType=getController().getTypeChooser().resolveType(receiver,current);
  ClassNode arrayComponentType=arrayType.getComponentType();
  int operationType=getOperandType(arrayComponentType);
  BinaryExpressionWriter bew=binExpWriter[operationType];
  AsmClassGenerator acg=getController().getAcg();
  if (bew.arraySet(true) && arrayType.isArray()) {
    super.assignToArray(parent,receiver,index,rhsValueLoader);
  }
 else {
    WriterController controller=getController();
    StaticTypeCheckingVisitor visitor=new StaticCompilationVisitor(controller.getSourceUnit(),controller.getClassNode());
    ArgumentListExpression ae=new ArgumentListExpression(index,rhsValueLoader);
    if (rhsValueLoader instanceof VariableSlotLoader && parent instanceof BinaryExpression) {
      Expression right=((BinaryExpression)parent).getRightExpression();
      rhsValueLoader.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE,controller.getTypeChooser().resolveType(parent,controller.getClassNode()));
    }
    MethodCallExpression mce=new MethodCallExpression(receiver,"putAt",ae);
    mce.setSourcePosition(parent);
    visitor.visitMethodCallExpression(mce);
    OperandStack operandStack=controller.getOperandStack();
    int height=operandStack.getStackLength();
    mce.visit(controller.getAcg());
    operandStack.pop();
    operandStack.remove(operandStack.getStackLength() - height);
    rhsValueLoader.visit(controller.getAcg());
  }
}
