{
  if (c == m.getDeclaringClass())   return false;
  Method found;
  try {
    found=c.getMethod(m.getName(),m.getParameterTypes());
    int asp=found.getModifiers() & ABSTRACT_STATIC_PRIVATE;
    int visible=found.getModifiers() & VISIBILITY;
    if (visible != 0 && asp == 0)     return true;
  }
 catch (  NoSuchMethodException e) {
  }
  if (c == Object.class)   return false;
  return hasUsableImplementation(c.getSuperclass(),m);
}
