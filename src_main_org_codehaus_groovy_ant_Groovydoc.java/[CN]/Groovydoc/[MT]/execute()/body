{
  List<String> packagesToDoc=new ArrayList<String>();
  Path sourceDirs=new Path(getProject());
  Properties properties=new Properties();
  properties.setProperty("windowTitle",windowTitle);
  properties.setProperty("docTitle",docTitle);
  properties.setProperty("footer",footer);
  properties.setProperty("header",header);
  checkScopeProperties(properties);
  properties.setProperty("publicScope",publicScope.toString());
  properties.setProperty("protectedScope",protectedScope.toString());
  properties.setProperty("packageScope",packageScope.toString());
  properties.setProperty("privateScope",privateScope.toString());
  properties.setProperty("author",author.toString());
  properties.setProperty("processScripts",processScripts.toString());
  properties.setProperty("includeMainForScripts",includeMainForScripts.toString());
  properties.setProperty("overviewFile",overviewFile != null ? overviewFile.getAbsolutePath() : "");
  if (sourcePath != null) {
    sourceDirs.addExisting(sourcePath);
  }
  parsePackages(packagesToDoc,sourceDirs);
  GroovyDocTool htmlTool=new GroovyDocTool(new ClasspathResourceManager(),sourcePath.list(),GroovyDocTemplateInfo.DEFAULT_DOC_TEMPLATES,GroovyDocTemplateInfo.DEFAULT_PACKAGE_TEMPLATES,GroovyDocTemplateInfo.DEFAULT_CLASS_TEMPLATES,links,properties);
  try {
    htmlTool.add(sourceFilesToDoc);
    FileOutputTool output=new FileOutputTool();
    htmlTool.renderToOutput(output,destDir.getCanonicalPath());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (styleSheetFile != null) {
    try {
      String css=DefaultGroovyMethods.getText(styleSheetFile);
      File outfile=new File(destDir,"stylesheet.css");
      DefaultGroovyMethods.setText(outfile,css);
    }
 catch (    IOException e) {
      System.out.println("Warning: Unable to copy specified stylesheet '" + styleSheetFile.getAbsolutePath() + "'. Using default stylesheet instead. Due to: "+ e.getMessage());
    }
  }
}
