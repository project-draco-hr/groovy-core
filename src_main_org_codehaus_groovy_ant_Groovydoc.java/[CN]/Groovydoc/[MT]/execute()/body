{
  List packagesToDoc=new ArrayList();
  Path sourceDirs=new Path(getProject());
  if (sourcePath != null) {
    sourceDirs.addExisting(sourcePath);
  }
  parsePackages(packagesToDoc,sourceDirs);
  GroovyDocTool htmlTool=new GroovyDocTool(new ClasspathResourceManager(),sourcePath.toString(),new String[]{"org/codehaus/groovy/tools/groovydoc/gstring-templates/top-level/index.html","org/codehaus/groovy/tools/groovydoc/gstring-templates/top-level/overview-frame.html","org/codehaus/groovy/tools/groovydoc/gstring-templates/top-level/allclasses-frame.html","org/codehaus/groovy/tools/groovydoc/gstring-templates/top-level/overview-summary.html","org/codehaus/groovy/tools/groovydoc/gstring-templates/top-level/stylesheet.css"},new String[]{"org/codehaus/groovy/tools/groovydoc/gstring-templates/package-level/package-frame.html","org/codehaus/groovy/tools/groovydoc/gstring-templates/package-level/package-summary.html"},new String[]{"org/codehaus/groovy/tools/groovydoc/gstring-templates/class-level/classDocName.html"},links);
  try {
    Iterator itr=sourceFilesToDoc.iterator();
    while (itr.hasNext()) {
      htmlTool.add((String)itr.next());
    }
    FileOutputTool output=new FileOutputTool();
    htmlTool.renderToOutput(output,destDir.getCanonicalPath());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
