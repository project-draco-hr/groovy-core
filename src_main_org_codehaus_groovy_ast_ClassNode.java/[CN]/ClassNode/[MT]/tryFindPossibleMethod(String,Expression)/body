{
  int count=0;
  if (arguments instanceof TupleExpression) {
    TupleExpression tuple=(TupleExpression)arguments;
    count=tuple.getExpressions().size();
  }
 else   return null;
  MethodNode res=null;
  ClassNode node=this;
  TupleExpression args=(TupleExpression)arguments;
  do {
    for (    MethodNode method : node.getMethods(name)) {
      if (method.getParameters().length == count) {
        boolean match=true;
        for (int i=0; i != count; ++i)         if (!args.getType().isDerivedFrom(method.getParameters()[i].getType())) {
          match=false;
          break;
        }
        if (match) {
          if (res == null)           res=method;
 else {
            if (res.getParameters().length != count)             return null;
            if (node.equals(this))             return null;
            match=true;
            for (int i=0; i != count; ++i)             if (!res.getParameters()[i].getType().equals(method.getParameters()[i].getType())) {
              match=false;
              break;
            }
            if (!match)             return null;
          }
        }
      }
    }
    node=node.getSuperClass();
  }
 while (node != null);
  return res;
}
