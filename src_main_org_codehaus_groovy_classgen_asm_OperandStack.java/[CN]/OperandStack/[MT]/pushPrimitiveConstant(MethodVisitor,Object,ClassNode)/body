{
  boolean isInt=ClassHelper.int_TYPE.equals(type);
  boolean isShort=ClassHelper.short_TYPE.equals(type);
  boolean isByte=ClassHelper.byte_TYPE.equals(type);
  if (isInt || isShort || isByte) {
    int val=isInt ? (Integer)value : isShort ? (Short)value : (Byte)value;
switch (val) {
case 0:
      mv.visitInsn(ICONST_0);
    break;
case 1:
  mv.visitInsn(ICONST_1);
break;
case 2:
mv.visitInsn(ICONST_2);
break;
case 3:
mv.visitInsn(ICONST_3);
break;
case 4:
mv.visitInsn(ICONST_4);
break;
case 5:
mv.visitInsn(ICONST_5);
break;
default :
if (val >= Byte.MIN_VALUE && val <= Byte.MAX_VALUE) {
mv.visitIntInsn(BIPUSH,val);
}
 else if (val >= Short.MIN_VALUE && val <= Short.MAX_VALUE) {
mv.visitIntInsn(SIPUSH,val);
}
 else {
mv.visitLdcInsn(value);
}
}
}
 else if (ClassHelper.long_TYPE.equals(type)) {
if ((Long)value == 0L) {
mv.visitInsn(LCONST_0);
}
 else if ((Long)value == 1L) {
mv.visitInsn(LCONST_1);
}
 else {
mv.visitLdcInsn(value);
}
}
 else if (ClassHelper.float_TYPE.equals(type)) {
if ((Float)value == 0f) {
mv.visitInsn(FCONST_0);
}
 else if ((Float)value == 1f) {
mv.visitInsn(FCONST_1);
}
 else if ((Float)value == 2f) {
mv.visitInsn(FCONST_2);
}
 else {
mv.visitLdcInsn(value);
}
}
 else if (ClassHelper.double_TYPE.equals(type)) {
if ((Double)value == 0d) {
mv.visitInsn(DCONST_0);
}
 else if ((Double)value == 1d) {
mv.visitInsn(DCONST_1);
}
 else {
mv.visitLdcInsn(value);
}
}
 else {
mv.visitLdcInsn(value);
}
}
