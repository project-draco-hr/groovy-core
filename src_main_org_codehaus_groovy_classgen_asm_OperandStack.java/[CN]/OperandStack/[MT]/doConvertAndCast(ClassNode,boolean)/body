{
  int size=stack.size();
  throwExceptionForNoStackElement(size,targetType,coerce);
  ClassNode top=stack.get(size - 1);
  targetType=targetType.redirect();
  if (targetType == top)   return;
  if (coerce) {
    controller.getInvocationWriter().coerce(top,targetType);
    return;
  }
  boolean primTarget=ClassHelper.isPrimitiveType(targetType);
  boolean primTop=ClassHelper.isPrimitiveType(top);
  if (primTop && primTarget) {
    if (convertPrimitive(top,targetType)) {
      replace(targetType);
      return;
    }
    box();
  }
 else   if (primTop) {
    controller.getInvocationWriter().castToNonPrimitiveIfNecessary(top,targetType);
  }
 else   if (primTarget) {
  }
 else {
    controller.getInvocationWriter().castToNonPrimitiveIfNecessary(top,targetType);
  }
  MethodVisitor mv=controller.getMethodVisitor();
  if (primTarget && !primTop && ClassHelper.getWrapper(targetType).equals(top)) {
    BytecodeHelper.doCastToPrimitive(mv,top,targetType);
  }
 else {
    top=stack.get(size - 1);
    if (!WideningCategories.implementsInterfaceOrSubclassOf(top,targetType)) {
      BytecodeHelper.doCast(mv,targetType);
    }
  }
  replace(targetType);
}
