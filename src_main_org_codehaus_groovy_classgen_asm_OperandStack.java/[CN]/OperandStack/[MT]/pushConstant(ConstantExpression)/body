{
  MethodVisitor mv=controller.getMethodVisitor();
  Object value=expression.getValue();
  ClassNode type=expression.getType().redirect();
  boolean asPrimitive=ClassHelper.isPrimitiveType(type);
  if (value == null) {
    mv.visitInsn(ACONST_NULL);
  }
 else   if (asPrimitive) {
    mv.visitLdcInsn(value);
  }
 else   if (value instanceof Character) {
    mv.visitLdcInsn(value);
    BytecodeHelper.box(mv,type);
  }
 else   if (value instanceof Number) {
    if (value instanceof BigDecimal) {
      String className=BytecodeHelper.getClassInternalName(value.getClass().getName());
      mv.visitTypeInsn(NEW,className);
      mv.visitInsn(DUP);
      mv.visitLdcInsn(value.toString());
      mv.visitMethodInsn(INVOKESPECIAL,className,"<init>","(Ljava/lang/String;)V");
    }
 else     if (value instanceof BigInteger) {
      String className=BytecodeHelper.getClassInternalName(value.getClass().getName());
      mv.visitTypeInsn(NEW,className);
      mv.visitInsn(DUP);
      mv.visitLdcInsn(value.toString());
      mv.visitMethodInsn(INVOKESPECIAL,className,"<init>","(Ljava/lang/String;)V");
    }
 else     if (value instanceof Long) {
      long l=(Long)value;
      if (l == 0) {
        mv.visitInsn(LCONST_0);
      }
 else       if (l == 1) {
        mv.visitInsn(LCONST_1);
      }
 else {
        mv.visitLdcInsn(value);
      }
      BytecodeHelper.box(mv,ClassHelper.getUnwrapper(type));
      BytecodeHelper.doCast(mv,type);
    }
 else {
      mv.visitLdcInsn(value);
      BytecodeHelper.box(mv,ClassHelper.getUnwrapper(type));
      BytecodeHelper.doCast(mv,type);
    }
  }
 else   if (value instanceof Boolean) {
    Boolean bool=(Boolean)value;
    String text=(bool.booleanValue()) ? "TRUE" : "FALSE";
    mv.visitFieldInsn(GETSTATIC,"java/lang/Boolean",text,"Ljava/lang/Boolean;");
  }
 else   if (value instanceof String) {
    mv.visitLdcInsn(value);
  }
 else {
    throw new ClassGeneratorException("Cannot generate bytecode for constant: " + value + " of type: "+ type.getName());
  }
  push(type);
}
