{
  if (bindable && needsPropertyChangeSupport(declaringClass,source)) {
    addPropertyChangeSupport(declaringClass);
  }
  if (needsVetoableChangeSupport(declaringClass,source)) {
    addVetoableChangeSupport(declaringClass);
  }
  String setterName="set" + MetaClassHelper.capitalize(propertyNode.getName());
  if (declaringClass.getMethods(setterName).isEmpty()) {
    Expression fieldExpression=new FieldExpression(propertyNode.getField());
    BlockStatement setterBlock=new BlockStatement();
    setterBlock.addStatement(createConstrainedStatement(propertyNode,fieldExpression));
    if (bindable) {
      setterBlock.addStatement(createBindableStatement(propertyNode,fieldExpression));
    }
 else {
      setterBlock.addStatement(createSetStatement(fieldExpression));
    }
    createSetterMethod(declaringClass,propertyNode,setterName,setterBlock);
  }
 else {
    wrapSetterMethod(declaringClass,bindable,propertyNode.getName());
  }
}
