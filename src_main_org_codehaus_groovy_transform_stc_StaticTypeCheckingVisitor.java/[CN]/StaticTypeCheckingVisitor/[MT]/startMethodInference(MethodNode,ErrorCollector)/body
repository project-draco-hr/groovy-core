{
  if (isSkipMode(node))   return;
  if (!typeCheckingContext.methodsToBeVisited.isEmpty() && !typeCheckingContext.methodsToBeVisited.contains(node))   return;
  if (typeCheckingContext.alreadyVisitedMethods.contains(node))   return;
  typeCheckingContext.alreadyVisitedMethods.add(node);
  typeCheckingContext.pushErrorCollector(collector);
  final boolean osc=typeCheckingContext.isInStaticContext;
  try {
    typeCheckingContext.isInStaticContext=node.isStatic();
    super.visitMethod(node);
    for (    Parameter parameter : node.getParameters()) {
      if (parameter.getInitialExpression() != null) {
        parameter.getInitialExpression().visit(this);
      }
    }
    ClassNode rtype=getInferredReturnType(node);
    if (rtype == null) {
      storeInferredReturnType(node,node.getReturnType());
    }
    addTypeCheckingInfoAnnotation(node);
  }
  finally {
    typeCheckingContext.isInStaticContext=osc;
  }
  typeCheckingContext.popErrorCollector();
  node.putNodeMetaData(ERROR_COLLECTOR,collector);
}
