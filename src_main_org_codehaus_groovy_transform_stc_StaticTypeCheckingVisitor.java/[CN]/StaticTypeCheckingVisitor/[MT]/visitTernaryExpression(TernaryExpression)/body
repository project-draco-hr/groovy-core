{
  Map<VariableExpression,List<ClassNode>> oldTracker=pushAssignmentTracking();
  pushTemporaryTypeInfo();
  expression.getBooleanExpression().visit(this);
  Expression trueExpression=expression.getTrueExpression();
  Expression falseExpression=expression.getFalseExpression();
  trueExpression.visit(this);
  temporaryIfBranchTypeInformation.pop();
  falseExpression.visit(this);
  ClassNode resultType;
  if (isNullConstant(trueExpression) || isNullConstant(falseExpression)) {
    if (currentBinaryExpression != null && currentBinaryExpression.getRightExpression() == expression) {
      resultType=getType(currentBinaryExpression.getLeftExpression());
    }
 else     if (isNullConstant(trueExpression) && isNullConstant(falseExpression)) {
      resultType=OBJECT_TYPE;
    }
 else     if (isNullConstant(trueExpression)) {
      resultType=wrapTypeIfNecessary(getType(falseExpression));
    }
 else {
      resultType=wrapTypeIfNecessary(getType(trueExpression));
    }
  }
 else {
    final ClassNode typeOfTrue=getType(trueExpression);
    final ClassNode typeOfFalse=getType(falseExpression);
    resultType=lowestUpperBound(typeOfTrue,typeOfFalse);
  }
  storeType(expression,resultType);
  popAssignmentTracking(oldTracker);
}
