{
  if (!pexp.isSpreadSafe())   return null;
  MethodCallExpression mce=new MethodCallExpression(new VariableExpression("_",testClass),"iterator",ArgumentListExpression.EMPTY_ARGUMENTS);
  mce.visit(this);
  ClassNode callType=getType(mce);
  if (!implementsInterfaceOrIsSubclassOf(callType,Iterator_TYPE))   return null;
  GenericsType[] types=callType.getGenericsTypes();
  ClassNode contentType=OBJECT_TYPE;
  if (types != null && types.length == 1)   contentType=types[0].getType();
  PropertyExpression subExp=new PropertyExpression(new VariableExpression("{}",contentType),pexp.getPropertyAsString());
  AtomicReference<ClassNode> result=new AtomicReference<ClassNode>();
  if (existsProperty(subExp,true,new PropertyLookupVisitor(result))) {
    ClassNode intf=LIST_TYPE.getPlainNodeReference();
    intf.setGenericsTypes(new GenericsType[]{new GenericsType(getWrapper(result.get()))});
    return intf;
  }
  return null;
}
