{
  final String name=call.getMethodAsString();
  if (name == null) {
    addStaticTypeError("cannot resolve dynamic method name at compile time.",call.getMethod());
    return;
  }
  final Expression objectExpression=call.getObjectExpression();
  objectExpression.visit(this);
  call.getMethod().visit(this);
  if (call.isSpreadSafe()) {
    ClassNode expressionType=getType(objectExpression);
    if (!(expressionType.equals(Collection_TYPE) || expressionType.implementsInterface(Collection_TYPE))) {
      addStaticTypeError("Spread operator can only be used on collection types",expressionType);
      return;
    }
 else {
      ClassNode componentType=inferComponentType(expressionType);
      MethodCallExpression subcall=new MethodCallExpression(new CastExpression(componentType,EmptyExpression.INSTANCE),name,call.getArguments());
      subcall.setLineNumber(call.getLineNumber());
      subcall.setColumnNumber(call.getColumnNumber());
      visitMethodCallExpression(subcall);
      ClassNode subcallReturnType=getType(subcall);
      ClassNode listNode=LIST_TYPE.getPlainNodeReference();
      listNode.setGenericsTypes(new GenericsType[]{new GenericsType(wrapTypeIfNecessary(subcallReturnType))});
      storeType(call,listNode);
      storeTargetMethod(call,(MethodNode)subcall.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET));
      return;
    }
  }
  final ClassNode rememberLastItType=lastImplicitItType;
  Expression callArguments=call.getArguments();
  boolean isWithCall=isWithCall(name,callArguments);
  if (!isWithCall) {
    callArguments.visit(this);
  }
  ClassNode[] args=getArgumentTypes(InvocationWriter.makeArgumentList(callArguments));
  final boolean isCallOnClosure=isClosureCall(name,objectExpression,callArguments);
  final ClassNode receiver=getType(objectExpression);
  if (isWithCall) {
    withReceiverList.add(0,receiver);
    lastImplicitItType=receiver;
    if (callArguments instanceof ArgumentListExpression) {
      ArgumentListExpression argList=(ArgumentListExpression)callArguments;
      ClosureExpression closure=(ClosureExpression)argList.getExpression(0);
      Parameter[] parameters=closure.getParameters();
      if (parameters.length > 1) {
        addStaticTypeError("Unexpected number of parameters for a with call",argList);
      }
 else       if (parameters.length == 1) {
        Parameter param=parameters[0];
        if (!param.isDynamicTyped() && !isAssignableTo(receiver,param.getType().redirect())) {
          addStaticTypeError("Expected parameter type: " + receiver.toString(false) + " but was: "+ param.getType().redirect().toString(false),param);
        }
      }
    }
  }
  try {
    if (isWithCall) {
      callArguments.visit(this);
    }
    if (isCallOnClosure) {
      if (objectExpression == VariableExpression.THIS_EXPRESSION) {
        FieldNode field=classNode.getDeclaredField(name);
        ClassNode closureReturnType=field.getType().getGenericsTypes()[0].getType();
        Object data=field.getNodeMetaData(StaticTypesMarker.CLOSURE_ARGUMENTS);
        if (data != null) {
          Parameter[] parameters=(Parameter[])data;
          typeCheckClosureCall(callArguments,args,parameters);
        }
        storeType(call,closureReturnType);
      }
 else       if (objectExpression instanceof VariableExpression) {
        Variable variable=findTargetVariable((VariableExpression)objectExpression);
        if (variable instanceof Expression) {
          Object data=((Expression)variable).getNodeMetaData(StaticTypesMarker.CLOSURE_ARGUMENTS);
          if (data != null) {
            Parameter[] parameters=(Parameter[])data;
            typeCheckClosureCall(callArguments,args,parameters);
          }
          Object type=((Expression)variable).getNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE);
          if (type == null) {
            if (variable.getType().equals(CLOSURE_TYPE)) {
              GenericsType[] genericsTypes=variable.getType().getGenericsTypes();
              if (genericsTypes != null && !genericsTypes[0].isPlaceholder()) {
                type=genericsTypes[0].getType();
              }
 else {
                type=OBJECT_TYPE;
              }
            }
          }
          if (type != null) {
            storeType(call,(ClassNode)type);
          }
        }
      }
 else       if (objectExpression instanceof ClosureExpression) {
        Parameter[] parameters=((ClosureExpression)objectExpression).getParameters();
        typeCheckClosureCall(callArguments,args,parameters);
        Object data=objectExpression.getNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE);
        if (data != null) {
          storeType(call,(ClassNode)data);
        }
      }
    }
 else {
      List<ClassNode> receivers=new LinkedList<ClassNode>();
      if (!withReceiverList.isEmpty())       receivers.addAll(withReceiverList);
      receivers.add(receiver);
      if (receiver.equals(CLASS_Type) && receiver.getGenericsTypes() != null) {
        GenericsType clazzGT=receiver.getGenericsTypes()[0];
        receivers.add(clazzGT.getType());
      }
      if (!temporaryIfBranchTypeInformation.empty()) {
        List<ClassNode> potentialReceiverType=getTemporaryTypesForExpression(objectExpression);
        if (potentialReceiverType != null)         receivers.addAll(potentialReceiverType);
      }
      List<MethodNode> mn=null;
      ClassNode chosenReceiver=null;
      for (      ClassNode currentReceiver : receivers) {
        mn=findMethod(currentReceiver,name,args);
        if (!mn.isEmpty()) {
          if (mn.size() == 1)           typeCheckMethodsWithGenerics(currentReceiver,args,mn.get(0),call);
          chosenReceiver=currentReceiver;
          break;
        }
      }
      if (mn.isEmpty()) {
        addStaticTypeError("Cannot find matching method " + receiver.getName() + "#"+ toMethodParametersString(name,args),call);
      }
 else {
        if (mn.size() == 1) {
          MethodNode directMethodCallCandidate=mn.get(0);
          ClassNode currentClassNode=classNode;
          classNode=directMethodCallCandidate.getDeclaringClass();
          for (          ClassNode node : source.getAST().getClasses()) {
            if (isClassInnerClassOrEqualTo(classNode,node)) {
              silentlyVisitMethodNode(directMethodCallCandidate);
              break;
            }
          }
          classNode=currentClassNode;
          ClassNode returnType=getType(directMethodCallCandidate);
          if (isUsingGenericsOrIsArrayUsingGenerics(returnType)) {
            returnType=inferReturnTypeGenerics(chosenReceiver,directMethodCallCandidate,callArguments);
          }
          storeType(call,returnType);
          storeTargetMethod(call,directMethodCallCandidate);
          if (objectExpression instanceof VariableExpression) {
            VariableExpression var=(VariableExpression)objectExpression;
            if (var.isClosureSharedVariable())             secondPassExpressions.add(call);
          }
        }
 else {
          addStaticTypeError("Reference to method is ambiguous. Cannot choose between " + mn,call);
        }
      }
    }
  }
  finally {
    if (isWithCall) {
      lastImplicitItType=rememberLastItType;
      withReceiverList.removeFirst();
    }
  }
}
