{
  ClassNode cn=(ClassNode)exp.getNodeMetaData(StaticTypesTransformation.StaticTypesMarker.INFERRED_TYPE);
  if (cn != null)   return cn;
  if (exp instanceof VariableExpression) {
    VariableExpression vexp=(VariableExpression)exp;
    if (vexp == VariableExpression.THIS_EXPRESSION)     return classNode;
    if (vexp == VariableExpression.SUPER_EXPRESSION)     return classNode.getSuperClass();
    final Variable variable=vexp.getAccessedVariable();
    if (variable != null && variable != vexp && variable instanceof VariableExpression) {
      return getType((Expression)variable);
    }
  }
 else   if (exp instanceof PropertyExpression) {
    PropertyExpression pexp=(PropertyExpression)exp;
    ClassNode objectExpType=getType(pexp.getObjectExpression());
    if ((LIST_TYPE.equals(objectExpType) || objectExpType.implementsInterface(LIST_TYPE)) && pexp.isSpreadSafe()) {
      return LIST_TYPE;
    }
 else     if ((objectExpType.equals(MAP_TYPE) || objectExpType.implementsInterface(MAP_TYPE)) && pexp.isSpreadSafe()) {
      String propertyName=pexp.getPropertyAsString();
      GenericsType[] types=objectExpType.getGenericsTypes();
      if ("key".equals(propertyName)) {
        if (types.length == 2) {
          ClassNode listKey=new ClassNode(List.class);
          listKey.setGenericsTypes(new GenericsType[]{types[0]});
          return listKey;
        }
      }
 else       if ("value".equals(propertyName)) {
        if (types.length == 2) {
          ClassNode listValue=new ClassNode(List.class);
          listValue.setGenericsTypes(new GenericsType[]{types[1]});
          return listValue;
        }
      }
 else {
        addStaticTypeError("Spread operator on map only allows one of [key,value]",pexp);
      }
      return LIST_TYPE;
    }
 else     if (objectExpType.isEnum()) {
      return objectExpType;
    }
 else {
      ClassNode clazz=objectExpType.redirect();
      List<ClassNode> candidates=new LinkedList<ClassNode>();
      candidates.add(clazz);
      if (!temporaryIfBranchTypeInformation.empty()) {
        List<ClassNode> classNodes=temporaryIfBranchTypeInformation.peek().get(extractTemporaryTypeInfoKey(pexp.getObjectExpression()));
        if (classNodes != null && !classNodes.isEmpty())         candidates.addAll(classNodes);
      }
      String propertyName=pexp.getPropertyAsString();
      boolean isAttributeExpression=pexp instanceof AttributeExpression;
      for (      ClassNode candidate : candidates) {
        ClassNode parent=candidate;
        while (parent != null) {
          parent=parent.redirect();
          PropertyNode propertyNode=parent.getProperty(propertyName);
          if (propertyNode != null)           return propertyNode.getType();
          if (!isAttributeExpression) {
            FieldNode field=parent.getDeclaredField(propertyName);
            if (field != null)             return field.getType();
          }
          parent=isAttributeExpression ? null : parent.getSuperClass();
        }
      }
      return ClassHelper.OBJECT_TYPE;
    }
  }
  if (exp instanceof ListExpression) {
    return inferListExpressionType((ListExpression)exp);
  }
 else   if (exp instanceof MapExpression) {
    return inferMapExpressionType((MapExpression)exp);
  }
  return exp.getType();
}
