{
  super.visitBinaryExpression(expression);
  final Expression leftExpression=expression.getLeftExpression();
  if (leftExpression instanceof PropertyExpression) {
    PropertyExpression pexp=(PropertyExpression)leftExpression;
    if (!existsProperty(pexp)) {
      Expression objectExpression=pexp.getObjectExpression();
      addStaticTypeError("No such property: " + pexp.getPropertyAsString() + " for class: "+ findCurrentInstanceOfClass(objectExpression,objectExpression.getType()),leftExpression);
      return;
    }
  }
  ClassNode lType=getType(leftExpression);
  final Expression rightExpression=expression.getRightExpression();
  ClassNode rType=getType(rightExpression);
  int op=expression.getOperation().getType();
  ClassNode resultType=getResultType(lType,op,rType,expression);
  if (resultType == null) {
    resultType=lType;
  }
  boolean isEmptyDeclaration=expression instanceof DeclarationExpression && rightExpression instanceof EmptyExpression;
  if (!isEmptyDeclaration)   storeType(expression,resultType);
  if (!isEmptyDeclaration && isAssignment(op)) {
    if (rightExpression instanceof ConstructorCallExpression) {
      inferDiamondType((ConstructorCallExpression)rightExpression,lType);
    }
    typeCheckAssignment(expression,leftExpression,lType,rightExpression,resultType);
    storeType(leftExpression,resultType);
    if (leftExpression instanceof VariableExpression && rightExpression instanceof ClosureExpression) {
      Parameter[] parameters=((ClosureExpression)rightExpression).getParameters();
      leftExpression.putNodeMetaData(StaticTypesTransformation.StaticTypesMarker.CLOSURE_ARGUMENTS,parameters);
    }
  }
 else   if (op == KEYWORD_INSTANCEOF) {
    pushInstanceOfTypeInfo(leftExpression,rightExpression);
  }
}
