{
  ClassNode dummyResultNode=new ClassNode("ClForInference$" + UNIQUE_LONG.incrementAndGet(),0,OBJECT_TYPE).getPlainNodeReference();
  final GenericsType[] genericTypes=new GenericsType[signature.length];
  for (int i=0; i < signature.length; i++) {
    genericTypes[i]=new GenericsType(signature[i]);
  }
  dummyResultNode.setGenericsTypes(genericTypes);
  MethodNode dummyMN=selectedMethod instanceof ExtensionMethodNode ? ((ExtensionMethodNode)selectedMethod).getExtensionMethodNode() : selectedMethod;
  dummyMN=new MethodNode(dummyMN.getName(),dummyMN.getModifiers(),dummyResultNode,dummyMN.getParameters(),dummyMN.getExceptions(),EmptyStatement.INSTANCE);
  dummyMN.setDeclaringClass(selectedMethod.getDeclaringClass());
  dummyMN.setGenericsTypes(selectedMethod.getGenericsTypes());
  if (selectedMethod instanceof ExtensionMethodNode) {
    ExtensionMethodNode orig=(ExtensionMethodNode)selectedMethod;
    dummyMN=new ExtensionMethodNode(dummyMN,dummyMN.getName(),dummyMN.getModifiers(),dummyResultNode,orig.getParameters(),orig.getExceptions(),EmptyStatement.INSTANCE,orig.isStaticExtension());
    dummyMN.setDeclaringClass(orig.getDeclaringClass());
    dummyMN.setGenericsTypes(orig.getGenericsTypes());
  }
  ClassNode classNode=inferReturnTypeGenerics(receiver,dummyMN,arguments);
  ClassNode[] inferred=new ClassNode[classNode.getGenericsTypes().length];
  for (int i=0; i < classNode.getGenericsTypes().length; i++) {
    GenericsType genericsType=classNode.getGenericsTypes()[i];
    ClassNode value=createUsableClassNodeFromGenericsType(genericsType);
    inferred[i]=value;
  }
  return inferred;
}
