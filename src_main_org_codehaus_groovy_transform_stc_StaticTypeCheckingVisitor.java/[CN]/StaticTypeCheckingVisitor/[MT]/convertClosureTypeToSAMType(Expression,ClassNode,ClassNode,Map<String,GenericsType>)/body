{
  if (!samType.isUsingGenerics())   return samType;
  MethodNode sam=findSAM(samType);
  if (closureType.isUsingGenerics() && sam != null) {
    ClassNode samReturnType=sam.getReturnType();
    ClassNode closureReturnType=expression.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
    if (closureReturnType != null && closureReturnType.isUsingGenerics()) {
      ClassNode unwrapped=closureReturnType.getGenericsTypes()[0].getType();
      extractGenericsConnections(placeholders,unwrapped,samReturnType);
    }
 else     if (samReturnType.isGenericsPlaceHolder()) {
      placeholders.put(samReturnType.getGenericsTypes()[0].getName(),closureType.getGenericsTypes()[0]);
    }
    if (expression instanceof ClosureExpression) {
      List<ClassNode[]> genericsToConnect=new LinkedList<ClassNode[]>();
      Parameter[] closureParams=((ClosureExpression)expression).getParameters();
      ClassNode[] closureParamTypes=extractTypesFromParameters(closureParams);
      if (expression.getNodeMetaData(StaticTypesMarker.CLOSURE_ARGUMENTS) != null) {
        closureParamTypes=expression.getNodeMetaData(StaticTypesMarker.CLOSURE_ARGUMENTS);
      }
      final Parameter[] parameters=sam.getParameters();
      for (int i=0; i < parameters.length; i++) {
        final Parameter parameter=parameters[i];
        if (parameter.getOriginType().isUsingGenerics() && closureParamTypes.length > i) {
          genericsToConnect.add(new ClassNode[]{closureParamTypes[i],parameter.getOriginType()});
        }
      }
      for (      ClassNode[] classNodes : genericsToConnect) {
        ClassNode found=classNodes[0];
        ClassNode expected=classNodes[1];
        if (!isAssignableTo(found,expected)) {
          continue;
        }
        ClassNode generifiedType=GenericsUtils.parameterizeType(found,expected);
        while (expected.isArray()) {
          expected=expected.getComponentType();
          generifiedType=generifiedType.getComponentType();
        }
        if (expected.isGenericsPlaceHolder()) {
          placeholders.put(expected.getGenericsTypes()[0].getName(),new GenericsType(generifiedType));
        }
 else {
          GenericsType[] expectedGenericsTypes=expected.getGenericsTypes();
          GenericsType[] foundGenericsTypes=generifiedType.getGenericsTypes();
          for (int i=0; i < expectedGenericsTypes.length; i++) {
            final GenericsType type=expectedGenericsTypes[i];
            if (type.isPlaceholder()) {
              String name=type.getName();
              placeholders.put(name,foundGenericsTypes[i]);
            }
          }
        }
      }
    }
  }
  ClassNode result=applyGenericsContext(placeholders,samType.redirect());
  return result;
}
