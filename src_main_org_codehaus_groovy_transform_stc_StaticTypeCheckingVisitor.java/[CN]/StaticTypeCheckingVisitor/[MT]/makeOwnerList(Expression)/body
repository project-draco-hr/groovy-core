{
  final ClassNode receiver=getType(objectExpression);
  List<Receiver<String>> owners=new LinkedList<Receiver<String>>();
  owners.add(Receiver.<String>make(receiver));
  if (receiver.equals(CLASS_Type) && receiver.getGenericsTypes() != null) {
    GenericsType clazzGT=receiver.getGenericsTypes()[0];
    owners.add(0,Receiver.<String>make(clazzGT.getType()));
  }
  if (receiver.isInterface()) {
    owners.add(Receiver.<String>make(OBJECT_TYPE));
  }
  if (!typeCheckingContext.temporaryIfBranchTypeInformation.empty()) {
    List<ClassNode> potentialReceiverType=getTemporaryTypesForExpression(objectExpression);
    if (potentialReceiverType != null) {
      for (      ClassNode node : potentialReceiverType) {
        owners.add(Receiver.<String>make(node));
      }
    }
  }
  return owners;
}
