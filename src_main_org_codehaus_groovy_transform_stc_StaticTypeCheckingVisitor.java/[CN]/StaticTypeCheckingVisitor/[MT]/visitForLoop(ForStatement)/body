{
  final Map<VariableExpression,ClassNode> varOrigType=new HashMap<VariableExpression,ClassNode>();
  forLoop.getLoopBlock().visit(new VariableExpressionTypeMemoizer(varOrigType));
  Map<VariableExpression,List<ClassNode>> oldTracker=pushAssignmentTracking();
  Expression collectionExpression=forLoop.getCollectionExpression();
  if (collectionExpression instanceof ClosureListExpression) {
    super.visitForLoop(forLoop);
  }
 else {
    collectionExpression.visit(this);
    final ClassNode collectionType=getType(collectionExpression);
    ClassNode componentType=inferLoopElementType(collectionType);
    ClassNode forLoopVariableType=forLoop.getVariableType();
    if (ClassHelper.getUnwrapper(componentType) == forLoopVariableType) {
      componentType=forLoopVariableType;
    }
    if (!checkCompatibleAssignmentTypes(forLoopVariableType,componentType)) {
      addStaticTypeError("Cannot loop with element of type " + forLoopVariableType.toString(false) + " with collection of type "+ collectionType.toString(false),forLoop);
    }
    if (forLoopVariableType != DYNAMIC_TYPE) {
      componentType=forLoopVariableType;
    }
    typeCheckingContext.controlStructureVariables.put(forLoop.getVariable(),componentType);
    try {
      super.visitForLoop(forLoop);
    }
  finally {
      typeCheckingContext.controlStructureVariables.remove(forLoop.getVariable());
    }
  }
  boolean typeChanged=isSecondPassNeededForControlStructure(varOrigType,oldTracker);
  if (typeChanged)   visitForLoop(forLoop);
}
