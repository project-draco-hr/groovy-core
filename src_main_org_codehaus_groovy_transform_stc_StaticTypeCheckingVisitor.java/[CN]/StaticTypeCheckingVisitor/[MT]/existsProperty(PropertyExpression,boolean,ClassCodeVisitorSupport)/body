{
  String propertyName=pexp.getPropertyAsString();
  if (propertyName == null)   return false;
  Expression objectExpression=pexp.getObjectExpression();
  final ClassNode objectExpressionType=getType(objectExpression);
  boolean staticOnlyAccess=objectExpressionType.equals(CLASS_Type);
  if (objectExpressionType.isArray() && "length".equals(pexp.getPropertyAsString())) {
    if (visitor != null) {
      PropertyNode node=new PropertyNode("length",Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,int_TYPE,objectExpressionType,null,null,null);
      storeType(pexp,int_TYPE);
      visitor.visitProperty(node);
    }
    return true;
  }
  boolean foundGetterOrSetter=false;
  List<Receiver<String>> receivers=new LinkedList<Receiver<String>>();
  List<Receiver<String>> owners=makeOwnerList(objectExpression);
  addReceivers(receivers,owners,pexp.isImplicitThis());
  String capName=MetaClassHelper.capitalize(propertyName);
  boolean isAttributeExpression=pexp instanceof AttributeExpression;
  HashSet<ClassNode> handledNodes=new HashSet<ClassNode>();
  for (  Receiver<String> receiver : receivers) {
    ClassNode testClass=receiver.getType();
    LinkedList<ClassNode> queue=new LinkedList<ClassNode>();
    queue.add(testClass);
    while (!queue.isEmpty()) {
      ClassNode current=queue.removeFirst();
      if (handledNodes.contains(current))       continue;
      handledNodes.add(current);
      Set<ClassNode> allInterfaces=current.getAllInterfaces();
      for (      ClassNode intf : allInterfaces) {
        queue.add(GenericsUtils.parameterizeType(current,intf));
      }
      boolean staticOnly;
      if (current.equals(CLASS_Type)) {
        staticOnly=false;
      }
 else {
        staticOnly=staticOnlyAccess;
      }
      FieldNode field=current.getDeclaredField(propertyName);
      field=allowStaticAccessToMember(field,staticOnly);
      if (storeField(field,isAttributeExpression,pexp,objectExpressionType,visitor))       return true;
      PropertyNode propertyNode=current.getProperty(propertyName);
      propertyNode=allowStaticAccessToMember(propertyNode,staticOnly);
      if (storeProperty(propertyNode,pexp,objectExpressionType,visitor))       return true;
      boolean isThisExpression=objectExpression instanceof VariableExpression && ((VariableExpression)objectExpression).isThisExpression();
      if (storeField(field,isThisExpression,pexp,objectExpressionType,visitor))       return true;
      MethodNode getter=current.getGetterMethod("get" + capName);
      getter=allowStaticAccessToMember(getter,staticOnly);
      if (getter == null)       getter=current.getGetterMethod("is" + capName);
      getter=allowStaticAccessToMember(getter,staticOnly);
      MethodNode setter=current.getSetterMethod("set" + capName,false);
      setter=allowStaticAccessToMember(setter,staticOnly);
      if (visitor != null && getter != null)       visitor.visitMethod(getter);
      if (readMode) {
        if (getter != null) {
          ClassNode cn=inferReturnTypeGenerics(current,getter,ArgumentListExpression.EMPTY_ARGUMENTS);
          storeInferredTypeForPropertyExpression(pexp,cn);
          pexp.removeNodeMetaData(StaticTypesMarker.READONLY_PROPERTY);
          return true;
        }
      }
 else {
        if (setter != null) {
          if (visitor != null && field != null)           visitor.visitField(field);
          storeType(pexp,setter.getParameters()[0].getType());
          SetterInfo info=new SetterInfo(current,setter);
          BinaryExpression enclosingBinaryExpression=typeCheckingContext.getEnclosingBinaryExpression();
          putSetterInfo(enclosingBinaryExpression.getLeftExpression(),info);
          return true;
        }
 else         if (getter != null) {
          pexp.putNodeMetaData(StaticTypesMarker.READONLY_PROPERTY,true);
        }
      }
      foundGetterOrSetter=foundGetterOrSetter || setter != null || getter != null;
      if (storeField(field,true,pexp,objectExpressionType,visitor))       return true;
      if (current.getSuperClass() != null) {
        queue.add(current.getSuperClass());
      }
    }
    List<MethodNode> methods=findDGMMethodsByNameAndArguments(getSourceUnit().getClassLoader(),testClass,"get" + capName,ClassNode.EMPTY_ARRAY);
    if (!methods.isEmpty()) {
      List<MethodNode> methodNodes=chooseBestMethod(testClass,methods,ClassNode.EMPTY_ARRAY);
      if (methodNodes.size() == 1) {
        MethodNode getter=methodNodes.get(0);
        if (visitor != null) {
          visitor.visitMethod(getter);
        }
        ClassNode cn=inferReturnTypeGenerics(testClass,getter,ArgumentListExpression.EMPTY_ARGUMENTS);
        storeInferredTypeForPropertyExpression(pexp,cn);
        return true;
      }
    }
  }
  for (  Receiver<String> receiver : receivers) {
    ClassNode testClass=receiver.getType();
    if (implementsInterfaceOrIsSubclassOf(testClass,MAP_TYPE) || implementsInterfaceOrIsSubclassOf(testClass,LIST_TYPE)) {
      if (visitor != null) {
        ClassNode propertyType=OBJECT_TYPE;
        if (implementsInterfaceOrIsSubclassOf(objectExpressionType,MAP_TYPE)) {
          ClassNode intf=GenericsUtils.parameterizeType(objectExpressionType,MAP_TYPE.getPlainNodeReference());
          if (intf.isUsingGenerics() && intf.getGenericsTypes() != null && intf.getGenericsTypes().length == 2) {
            propertyType=intf.getGenericsTypes()[1].getType();
          }
        }
 else {
          ClassNode intf=GenericsUtils.parameterizeType(objectExpressionType,LIST_TYPE.getPlainNodeReference());
          if (intf.isUsingGenerics() && intf.getGenericsTypes() != null && intf.getGenericsTypes().length == 1) {
            PropertyExpression subExp=new PropertyExpression(new VariableExpression("{}",intf.getGenericsTypes()[0].getType()),pexp.getPropertyAsString());
            AtomicReference<ClassNode> result=new AtomicReference<ClassNode>();
            if (existsProperty(subExp,readMode,new PropertyLookupVisitor(result))) {
              intf=LIST_TYPE.getPlainNodeReference();
              intf.setGenericsTypes(new GenericsType[]{new GenericsType(getWrapper(result.get()))});
              propertyType=intf;
            }
          }
        }
        PropertyNode node=new PropertyNode(propertyName,Opcodes.ACC_PUBLIC,propertyType,objectExpressionType,null,null,null);
        visitor.visitProperty(node);
      }
      return true;
    }
  }
  return foundGetterOrSetter;
}
