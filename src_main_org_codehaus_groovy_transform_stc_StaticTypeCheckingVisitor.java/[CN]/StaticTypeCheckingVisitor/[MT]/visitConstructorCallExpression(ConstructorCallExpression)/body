{
  super.visitConstructorCallExpression(call);
  ClassNode receiver=call.isThisCall() ? classNode : call.isSuperCall() ? classNode.getSuperClass() : call.getType();
  Expression arguments=call.getArguments();
  ClassNode[] args=getArgumentTypes(InvocationWriter.makeArgumentList(arguments));
  MethodNode node=findMethodOrFail(call,receiver,"<init>",args);
  if (node != null) {
    if (node.getParameters().length == 0 && args.length == 1 && implementsInterfaceOrIsSubclassOf(args[0],MAP_TYPE)) {
      if (arguments instanceof TupleExpression) {
        TupleExpression texp=(TupleExpression)arguments;
        List<Expression> expressions=texp.getExpressions();
        if (expressions.size() == 1) {
          Expression expression=expressions.get(0);
          if (expression instanceof MapExpression) {
            MapExpression argList=(MapExpression)expression;
            checkGroovyConstructorMap(call,receiver,argList);
            node=new ConstructorNode(Opcodes.ACC_PUBLIC,new Parameter[]{new Parameter(MAP_TYPE,"map")},ClassNode.EMPTY_ARRAY,EmptyStatement.INSTANCE);
            node.setDeclaringClass(receiver);
          }
        }
      }
    }
    storeTargetMethod(call,node);
  }
}
