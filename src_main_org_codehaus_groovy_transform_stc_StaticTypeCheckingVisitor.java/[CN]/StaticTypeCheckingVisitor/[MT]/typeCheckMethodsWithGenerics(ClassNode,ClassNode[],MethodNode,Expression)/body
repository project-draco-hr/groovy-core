{
  if (CLASS_Type.equals(receiver) && receiver.isUsingGenerics() && candidateMethod.getDeclaringClass() != receiver && !(candidateMethod instanceof ExtensionMethodNode)) {
    typeCheckMethodsWithGenerics(receiver.getGenericsTypes()[0].getType(),arguments,candidateMethod,location);
    return;
  }
  boolean failure=false;
  Parameter[] parameters=candidateMethod.getParameters();
  GenericsType[] genericsTypes=candidateMethod.getGenericsTypes();
  boolean methodUsesGenerics=(genericsTypes != null && genericsTypes.length > 0);
  boolean isExtensionMethod=candidateMethod instanceof ExtensionMethodNode;
  if (isExtensionMethod && methodUsesGenerics) {
    ClassNode[] dgmArgs=new ClassNode[arguments.length + 1];
    dgmArgs[0]=receiver;
    System.arraycopy(arguments,0,dgmArgs,1,arguments.length);
    MethodNode extensionMethodNode=((ExtensionMethodNode)candidateMethod).getExtensionMethodNode();
    Parameter[] dgmMethodArgs=extensionMethodNode.getParameters();
    ClassNode dgmMethodFirstArgType=dgmMethodArgs[0].getType();
    if (dgmMethodFirstArgType.isUsingGenerics() && dgmMethodFirstArgType.isInterface()) {
      ClassNode firstArgType=GenericsUtils.parameterizeInterfaceGenerics(receiver,dgmMethodFirstArgType);
      Map<String,GenericsType> placeholders=new HashMap<String,GenericsType>();
      GenericsType[] gts=dgmMethodFirstArgType.getGenericsTypes();
      for (int i=0; gts != null && i < gts.length; i++) {
        GenericsType gt=gts[i];
        if (gt.isPlaceholder()) {
          placeholders.put(gt.getName(),firstArgType.getGenericsTypes()[i]);
        }
      }
      Parameter[] dgmMethodArgsWithPlaceholdersReplaced=new Parameter[dgmMethodArgs.length];
      dgmMethodArgsWithPlaceholdersReplaced[0]=new Parameter(firstArgType,"self");
      for (int i=1; i < dgmMethodArgsWithPlaceholdersReplaced.length; i++) {
        ClassNode substitute=dgmMethodArgs[i].getType();
        substitute=fullyResolveType(substitute,placeholders);
        dgmMethodArgsWithPlaceholdersReplaced[i]=new Parameter(substitute,"arg" + i);
      }
      MethodNode vdgm=new MethodNode(extensionMethodNode.getName(),extensionMethodNode.getModifiers(),extensionMethodNode.getReturnType(),dgmMethodArgsWithPlaceholdersReplaced,extensionMethodNode.getExceptions(),EmptyStatement.INSTANCE);
      typeCheckMethodsWithGenerics(extensionMethodNode.getDeclaringClass(),dgmArgs,vdgm,location);
      return;
    }
  }
  Map<String,GenericsType> classGTs=GenericsUtils.extractPlaceholders(receiver);
  if (parameters.length > arguments.length) {
    return;
  }
  ClassNode[] ptypes=new ClassNode[candidateMethod.getParameters().length];
  for (int i=0; i < arguments.length; i++) {
    int pindex=Math.min(i,parameters.length - 1);
    ClassNode type=parameters[pindex].getType();
    type=fullyResolveType(type,classGTs);
    ptypes[pindex]=type;
    failure|=!typeCheckMethodArgumentWithGenerics(type,arguments[i],i >= parameters.length - 1);
  }
  if (failure) {
    addStaticTypeError("Cannot call " + receiver.getName() + "#"+ toMethodParametersString(candidateMethod.getName(),ptypes)+ " with arguments "+ formatArgumentList(arguments),location);
  }
}
