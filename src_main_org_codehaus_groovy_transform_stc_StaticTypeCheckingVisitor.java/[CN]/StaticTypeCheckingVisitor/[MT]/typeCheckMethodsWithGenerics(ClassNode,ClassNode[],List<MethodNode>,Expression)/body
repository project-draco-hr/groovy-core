{
  if (!receiver.isUsingGenerics())   return;
  int failure=0;
  GenericsType[] methodGenericTypes=null;
  for (  MethodNode method : candidateMethods) {
    ClassNode methodNodeReceiver=method.getDeclaringClass();
    if (!implementsInterfaceOrIsSubclassOf(receiver,methodNodeReceiver) || !methodNodeReceiver.isUsingGenerics())     continue;
    Parameter[] parameters=method.getParameters();
    int argNum=0;
    for (    Parameter parameter : parameters) {
      ClassNode type=parameter.getType();
      if (type.isUsingGenerics()) {
        methodGenericTypes=GenericsUtils.alignGenericTypes(receiver.redirect().getGenericsTypes(),receiver.getGenericsTypes(),type.getGenericsTypes());
        if (methodGenericTypes.length == 1) {
          ClassNode nodeType=getWrapper(methodGenericTypes[0].getType());
          ClassNode actualType=getWrapper(arguments[argNum]);
          if (!actualType.isDerivedFrom(nodeType)) {
            failure++;
          }
        }
 else {
        }
      }
 else       if (type.isArray() && type.getComponentType().isUsingGenerics()) {
        ClassNode componentType=type.getComponentType();
        methodGenericTypes=GenericsUtils.alignGenericTypes(receiver.redirect().getGenericsTypes(),receiver.getGenericsTypes(),componentType.getGenericsTypes());
        if (methodGenericTypes.length == 1) {
          ClassNode nodeType=getWrapper(methodGenericTypes[0].getType());
          ClassNode actualType=getWrapper(arguments[argNum].getComponentType());
          if (!actualType.equals(nodeType)) {
            failure++;
            methodGenericTypes[0].setType(methodGenericTypes[0].getType().makeArray());
          }
        }
 else {
        }
      }
      argNum++;
    }
  }
  if (failure == candidateMethods.size()) {
    if (failure == 1) {
      MethodNode method=candidateMethods.get(0);
      ClassNode[] parameterTypes=new ClassNode[methodGenericTypes.length];
      for (int i=0; i < methodGenericTypes.length; i++) {
        parameterTypes[i]=methodGenericTypes[i].getType();
      }
      addStaticTypeError("Cannot call " + receiver.getName() + "#"+ toMethodParametersString(method.getName(),parameterTypes)+ " with arguments "+ Arrays.asList(arguments),location);
    }
 else {
      addStaticTypeError("No matching method found for arguments " + Arrays.asList(arguments),location);
    }
  }
}
