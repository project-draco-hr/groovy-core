{
  List<MethodNode> bestChoices=new LinkedList<MethodNode>();
  int bestDist=Integer.MAX_VALUE;
  for (  MethodNode m : methods) {
    Parameter[] params=m.getParameters();
    if (params.length == args.length) {
      int dist=Math.max(allParametersAndArgumentsMatch(params,args),lastArgMatchesVarg(params,args));
      if (dist >= 0 && !receiver.equals(m.getDeclaringClass()))       dist++;
      if (dist >= 0 && dist < bestDist) {
        bestChoices.clear();
        bestChoices.add(m);
        bestDist=dist;
      }
 else       if (dist >= 0 && dist == bestDist) {
        bestChoices.add(m);
      }
    }
 else     if (isVargs(params)) {
      if (params.length == args.length + 1) {
        bestChoices.add(m);
        if (bestDist > 0) {
          bestChoices.clear();
          bestChoices.add(m);
          bestDist=0;
        }
      }
      int dist=excessArgumentsMatchesVargsParameter(params,args);
      if (dist >= 0 && !receiver.equals(m.getDeclaringClass()))       dist++;
      if (params.length < args.length && dist >= 0) {
        if (dist >= 0 && dist < bestDist) {
          bestChoices.clear();
          bestChoices.add(m);
          bestDist=dist;
        }
 else         if (dist >= 0 && dist == bestDist) {
          bestChoices.add(m);
        }
      }
    }
  }
  return bestChoices;
}
