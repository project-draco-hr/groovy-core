{
  final Map<VariableExpression,ClassNode> varOrigType=new HashMap<VariableExpression,ClassNode>();
  Statement code=expression.getCode();
  code.visit(new VariableExpressionTypeMemoizer(varOrigType));
  Map<VariableExpression,List<ClassNode>> oldTracker=pushAssignmentTracking();
  SharedVariableCollector collector=new SharedVariableCollector(getSourceUnit());
  collector.visitClosureExpression(expression);
  Set<VariableExpression> closureSharedExpressions=collector.getClosureSharedExpressions();
  Map<VariableExpression,ListHashMap> typesBeforeVisit=null;
  if (!closureSharedExpressions.isEmpty()) {
    typesBeforeVisit=new HashMap<VariableExpression,ListHashMap>();
    saveVariableExpressionMetadata(closureSharedExpressions,typesBeforeVisit);
  }
  typeCheckingContext.pushEnclosingClosureExpression(expression);
  DelegationMetadata dmd=getDelegationMetadata(expression);
  if (dmd == null) {
    typeCheckingContext.delegationMetadata=new DelegationMetadata(typeCheckingContext.getEnclosingClassNode(),Closure.OWNER_FIRST,typeCheckingContext.delegationMetadata);
  }
 else {
    typeCheckingContext.delegationMetadata=new DelegationMetadata(dmd.getType(),dmd.getStrategy(),typeCheckingContext.delegationMetadata);
  }
  super.visitClosureExpression(expression);
  typeCheckingContext.delegationMetadata=typeCheckingContext.delegationMetadata.getParent();
  MethodNode node=new MethodNode("dummy",0,ClassHelper.OBJECT_TYPE,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,code);
  returnAdder.visitMethod(node);
  TypeCheckingContext.EnclosingClosure enclosingClosure=typeCheckingContext.getEnclosingClosure();
  if (!enclosingClosure.getReturnTypes().isEmpty()) {
    expression.putNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE,lowestUpperBound(enclosingClosure.getReturnTypes()));
  }
  typeCheckingContext.popEnclosingClosure();
  boolean typeChanged=isSecondPassNeededForControlStructure(varOrigType,oldTracker);
  if (typeChanged)   visitClosureExpression(expression);
  restoreVariableExpressionMetadata(typesBeforeVisit);
}
