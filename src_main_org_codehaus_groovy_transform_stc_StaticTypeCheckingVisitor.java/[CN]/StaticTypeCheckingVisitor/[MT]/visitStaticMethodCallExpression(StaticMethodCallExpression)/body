{
  final String name=call.getMethod();
  if (name == null) {
    addStaticTypeError("cannot resolve dynamic method name at compile time.",call);
    return;
  }
  if (extension.beforeMethodCall(call)) {
    extension.afterMethodCall(call);
    return;
  }
  final ClassNode rememberLastItType=typeCheckingContext.lastImplicitItType;
  Expression callArguments=call.getArguments();
  ArgumentListExpression argumentList=InvocationWriter.makeArgumentList(callArguments);
  checkForbiddenSpreadArgument(argumentList);
  final ClassNode receiver=call.getOwnerType();
  visitMethodCallArguments(receiver,argumentList,false,null);
  ClassNode[] args=getArgumentTypes(argumentList);
  try {
    List<Receiver<String>> receivers=new LinkedList<Receiver<String>>();
    addReceivers(receivers,makeOwnerList(new ClassExpression(receiver)),false);
    List<MethodNode> mn=null;
    Receiver<String> chosenReceiver=null;
    for (    Receiver<String> currentReceiver : receivers) {
      mn=findMethod(currentReceiver.getType(),name,args);
      if (!mn.isEmpty()) {
        if (mn.size() == 1)         typeCheckMethodsWithGenericsOrFail(currentReceiver.getType(),args,mn.get(0),call);
        chosenReceiver=currentReceiver;
        break;
      }
    }
    if (mn.isEmpty()) {
      mn=extension.handleMissingMethod(receiver,name,argumentList,args,call);
    }
    boolean callArgsVisited=false;
    if (mn.isEmpty()) {
      addNoMatchingMethodError(receiver,name,args,call);
    }
 else {
      mn=disambiguateMethods(mn,receiver,args,call);
      if (mn.size() == 1) {
        MethodNode directMethodCallCandidate=mn.get(0);
        ClassNode returnType=getType(directMethodCallCandidate);
        if (returnType.isUsingGenerics() && !returnType.isEnum()) {
          visitMethodCallArguments(receiver,argumentList,true,directMethodCallCandidate);
          ClassNode irtg=inferReturnTypeGenerics(chosenReceiver.getType(),directMethodCallCandidate,callArguments);
          returnType=irtg != null && implementsInterfaceOrIsSubclassOf(irtg,returnType) ? irtg : returnType;
          callArgsVisited=true;
        }
        storeType(call,returnType);
        storeTargetMethod(call,directMethodCallCandidate);
      }
 else {
        addAmbiguousErrorMessage(mn,name,args,call);
      }
      if (!callArgsVisited) {
        visitMethodCallArguments(receiver,argumentList,true,(MethodNode)call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET));
      }
    }
  }
  finally {
    extension.afterMethodCall(call);
  }
}
