{
  Expression objectExpression=pexp.getObjectExpression();
  ClassNode clazz=getType(objectExpression);
  List<ClassNode> tests=new LinkedList<ClassNode>();
  tests.add(clazz);
  if (clazz.equals(CLASS_Type) && clazz.getGenericsTypes() != null) {
    tests.add(0,clazz.getGenericsTypes()[0].getType());
  }
  if (!typeCheckingContext.temporaryIfBranchTypeInformation.empty()) {
    List<ClassNode> classNodes=getTemporaryTypesForExpression(objectExpression);
    if (classNodes != null)     tests.addAll(classNodes);
  }
  if (typeCheckingContext.lastImplicitItType != null && pexp.getObjectExpression() instanceof VariableExpression && ((VariableExpression)pexp.getObjectExpression()).getName().equals("it")) {
    tests.add(typeCheckingContext.lastImplicitItType);
  }
  String propertyName=pexp.getPropertyAsString();
  if (propertyName == null)   return null;
  String capName=MetaClassHelper.capitalize(propertyName);
  boolean isAttributeExpression=pexp instanceof AttributeExpression;
  if (clazz.isInterface())   tests.add(OBJECT_TYPE);
  for (  ClassNode testClass : tests) {
    LinkedList<ClassNode> queue=new LinkedList<ClassNode>();
    queue.add(testClass);
    if (testClass.isInterface()) {
      queue.addAll(testClass.getAllInterfaces());
    }
    while (!queue.isEmpty()) {
      ClassNode current=queue.removeFirst();
      current=current.redirect();
      MethodNode setterMethod=current.getSetterMethod("set" + capName,false);
      if (setterMethod != null) {
        storeType(pexp,setterMethod.getParameters()[0].getType());
        return new SetterInfo(current,setterMethod);
      }
      if (!isAttributeExpression && current.getSuperClass() != null) {
        queue.add(current.getSuperClass());
      }
    }
  }
  return null;
}
