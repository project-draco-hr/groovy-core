{
  if (!typeCheckMultipleAssignmentAndContinue(leftExpression,rightExpression))   return;
  ClassNode leftRedirect=leftExpressionType.redirect();
  ClassNode wrappedRHS=adjustTypeForSpreading(inferredRightExpressionType,leftExpression);
  boolean compatible=checkCompatibleAssignmentTypes(leftRedirect,wrappedRHS,rightExpression);
  addReadOnlyPropertyError(leftExpression);
  if (!compatible) {
    if (!extension.handleIncompatibleAssignment(leftExpressionType,inferredRightExpressionType,assignmentExpression)) {
      addAssignmentError(leftExpressionType,inferredRightExpressionType,assignmentExpression.getRightExpression());
    }
  }
 else {
    if (rightExpression instanceof ClosureExpression) {
      ClassNode type=getInferredReturnType(rightExpression);
      if (type != null) {
        storeInferredReturnType(leftExpression,type);
      }
    }
    addPrecisionErrors(leftRedirect,leftExpressionType,inferredRightExpressionType,rightExpression);
    addListAssignmentConstructorErrors(leftRedirect,leftExpressionType,inferredRightExpressionType,rightExpression,assignmentExpression);
    addMapAssignmentConstructorErrors(leftRedirect,leftExpression,rightExpression);
    if (hasGStringStringError(leftExpressionType,wrappedRHS,rightExpression))     return;
    checkTypeGenerics(leftExpressionType,wrappedRHS,rightExpression);
  }
}
