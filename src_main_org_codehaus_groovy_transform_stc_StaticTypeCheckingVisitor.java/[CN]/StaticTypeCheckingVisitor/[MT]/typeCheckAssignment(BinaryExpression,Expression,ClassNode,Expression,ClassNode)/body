{
  ClassNode leftRedirect;
  if (isArrayAccessExpression(leftExpression) || leftExpression instanceof PropertyExpression || (leftExpression instanceof VariableExpression && ((VariableExpression)leftExpression).getAccessedVariable() instanceof DynamicVariable)) {
    leftRedirect=leftExpressionType;
  }
 else {
    if (leftExpression instanceof VariableExpression && isPrimitiveType(((VariableExpression)leftExpression).getOriginType())) {
      leftRedirect=leftExpressionType;
    }
 else {
      leftRedirect=leftExpression.getType().redirect();
    }
  }
  if (leftExpression instanceof TupleExpression) {
    if (!(rightExpression instanceof ListExpression)) {
      addStaticTypeError("Multiple assignments without list expressions on the right hand side are unsupported in static type checking mode",rightExpression);
      return;
    }
    TupleExpression tuple=(TupleExpression)leftExpression;
    ListExpression list=(ListExpression)rightExpression;
    List<Expression> listExpressions=list.getExpressions();
    List<Expression> tupleExpressions=tuple.getExpressions();
    if (listExpressions.size() < tupleExpressions.size()) {
      addStaticTypeError("Incorrect number of values. Expected:" + tupleExpressions.size() + " Was:"+ listExpressions.size(),list);
      return;
    }
    for (int i=0, tupleExpressionsSize=tupleExpressions.size(); i < tupleExpressionsSize; i++) {
      Expression tupleExpression=tupleExpressions.get(i);
      Expression listExpression=listExpressions.get(i);
      ClassNode elemType=getType(listExpression);
      ClassNode tupleType=getType(tupleExpression);
      if (!isAssignableTo(elemType,tupleType)) {
        addStaticTypeError("Cannot assign value of type " + elemType.getText() + " to variable of type "+ tupleType.getText(),rightExpression);
        break;
      }
    }
    return;
  }
  boolean compatible=checkCompatibleAssignmentTypes(leftRedirect,inferredRightExpressionType,rightExpression);
  if (leftExpression.getNodeMetaData(StaticTypesMarker.READONLY_PROPERTY) != null && (leftExpression instanceof PropertyExpression)) {
    addStaticTypeError("Cannot set read-only property: " + ((PropertyExpression)leftExpression).getPropertyAsString(),leftExpression);
  }
  if (!compatible) {
    addAssignmentError(leftExpressionType,inferredRightExpressionType,assignmentExpression);
  }
 else {
    if (rightExpression instanceof ClosureExpression) {
      Object type=rightExpression.getNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE);
      if (type != null) {
        leftExpression.putNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE,type);
      }
    }
    boolean possibleLooseOfPrecision=false;
    if (isNumberType(leftRedirect) && isNumberType(inferredRightExpressionType)) {
      possibleLooseOfPrecision=checkPossibleLooseOfPrecision(leftRedirect,inferredRightExpressionType,rightExpression);
      if (possibleLooseOfPrecision) {
        addStaticTypeError("Possible loose of precision from " + inferredRightExpressionType + " to "+ leftRedirect,rightExpression);
      }
    }
    if (!possibleLooseOfPrecision && leftExpressionType.isArray()) {
      ClassNode leftComponentType=leftExpressionType.getComponentType();
      ClassNode rightRedirect=rightExpression.getType().redirect();
      if (rightRedirect.isArray()) {
        ClassNode rightComponentType=rightRedirect.getComponentType();
        if (!checkCompatibleAssignmentTypes(leftComponentType,rightComponentType)) {
          addStaticTypeError("Cannot assign value of type " + rightComponentType.getText() + " into array of type "+ leftExpressionType.getText(),assignmentExpression);
        }
      }
 else       if (rightExpression instanceof ListExpression) {
        for (        Expression element : ((ListExpression)rightExpression).getExpressions()) {
          ClassNode rightComponentType=element.getType().redirect();
          if (!checkCompatibleAssignmentTypes(leftComponentType,rightComponentType)) {
            addStaticTypeError("Cannot assign value of type " + rightComponentType.getText() + " into array of type "+ leftExpressionType.getText(),assignmentExpression);
          }
        }
      }
    }
    if (!implementsInterfaceOrIsSubclassOf(leftRedirect,LIST_TYPE) && rightExpression instanceof ListExpression) {
      ArgumentListExpression argList=new ArgumentListExpression(((ListExpression)rightExpression).getExpressions());
      ClassNode[] args=getArgumentTypes(argList);
      checkGroovyStyleConstructor(leftRedirect,args);
    }
 else     if (!implementsInterfaceOrIsSubclassOf(inferredRightExpressionType,leftRedirect) && implementsInterfaceOrIsSubclassOf(inferredRightExpressionType,LIST_TYPE)) {
      addAssignmentError(leftExpressionType,inferredRightExpressionType,assignmentExpression);
    }
    if (!implementsInterfaceOrIsSubclassOf(leftRedirect,MAP_TYPE) && rightExpression instanceof MapExpression) {
      if (!(leftExpression instanceof VariableExpression) || !((VariableExpression)leftExpression).isDynamicTyped()) {
        ArgumentListExpression argList=new ArgumentListExpression(rightExpression);
        ClassNode[] args=getArgumentTypes(argList);
        checkGroovyStyleConstructor(leftRedirect,args);
        MapExpression mapExpression=(MapExpression)rightExpression;
        checkGroovyConstructorMap(leftExpression,leftRedirect,mapExpression);
      }
    }
    if (leftExpressionType.isUsingGenerics() && !leftExpressionType.isEnum()) {
      boolean incomplete=hasRHSIncompleteGenericTypeInfo(inferredRightExpressionType);
      if (!incomplete) {
        GenericsType gt=GenericsUtils.buildWildcardType(leftExpressionType);
        if (!gt.isCompatibleWith(inferredRightExpressionType)) {
          addStaticTypeError("Incompatible generic argument types. Cannot assign " + inferredRightExpressionType.toString(false) + " to: "+ leftExpressionType.toString(false),assignmentExpression);
        }
      }
    }
  }
}
