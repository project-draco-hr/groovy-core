{
  if (isPrimitiveType(receiver))   receiver=getWrapper(receiver);
  List<MethodNode> methods;
  if ("<init>".equals(name)) {
    methods=new ArrayList<MethodNode>(receiver.getDeclaredConstructors());
    if (methods.isEmpty()) {
      MethodNode node=new MethodNode("<init>",Opcodes.ACC_PUBLIC,receiver,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,EmptyStatement.INSTANCE);
      node.setDeclaringClass(receiver);
      return Collections.singletonList(node);
    }
  }
 else {
    methods=receiver.getMethods(name);
    if (methods.isEmpty() && args == null || args.length == 0) {
      String pname=null;
      if (name.startsWith("get")) {
        pname=java.beans.Introspector.decapitalize(name.substring(3));
      }
 else       if (name.startsWith("is")) {
        pname=java.beans.Introspector.decapitalize(name.substring(2));
      }
      if (pname != null) {
        PropertyNode property=receiver.getProperty(pname);
        if (property != null) {
          return Collections.singletonList(new MethodNode(name,Opcodes.ACC_PUBLIC,property.getType(),Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,EmptyStatement.INSTANCE));
        }
      }
    }
  }
  List<MethodNode> chosen=chooseBestMethod(receiver,methods,args);
  if (!chosen.isEmpty())   return chosen;
  methods.clear();
  chosen=findDGMMethodsByNameAndArguments(receiver,name,args,methods);
  if (!chosen.isEmpty()) {
    return chosen;
  }
  if (receiver == ClassHelper.GSTRING_TYPE)   return findMethod(ClassHelper.STRING_TYPE,name,args);
  if (pluginFactory != null) {
    TypeCheckerPlugin plugin=pluginFactory.getTypeCheckerPlugin(classNode);
    if (plugin != null) {
      List<MethodNode> methodNodes=plugin.findMethod(receiver,name,args);
      if (methodNodes != null && !methodNodes.isEmpty())       return methodNodes;
    }
  }
  return EMPTY_METHODNODE_LIST;
}
