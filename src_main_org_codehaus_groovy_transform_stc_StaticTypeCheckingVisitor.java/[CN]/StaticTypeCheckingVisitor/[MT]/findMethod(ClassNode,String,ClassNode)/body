{
  if (isPrimitiveType(receiver))   receiver=getWrapper(receiver);
  List<MethodNode> methods;
  if ("<init>".equals(name)) {
    methods=addGeneratedMethods(receiver,new ArrayList<MethodNode>(receiver.getDeclaredConstructors()));
    if (methods.isEmpty()) {
      MethodNode node=new ConstructorNode(Opcodes.ACC_PUBLIC,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,GENERATED_EMPTY_STATEMENT);
      node.setDeclaringClass(receiver);
      return Collections.singletonList(node);
    }
  }
 else {
    methods=findMethodsWithGenerated(receiver,name);
    if (receiver.isInterface()) {
      collectAllInterfaceMethodsByName(receiver,name,methods);
      methods.addAll(OBJECT_TYPE.getMethods(name));
    }
    if (typeCheckingContext.getEnclosingClosure() == null) {
      ClassNode parent=receiver;
      while (parent instanceof InnerClassNode && !parent.isStaticClass()) {
        parent=parent.getOuterClass();
        methods.addAll(findMethodsWithGenerated(parent,name));
      }
    }
    if (methods.isEmpty() && (args == null || args.length == 0)) {
      String pname=extractPropertyNameFromMethodName("get",name);
      if (pname == null) {
        pname=extractPropertyNameFromMethodName("is",name);
      }
      if (pname != null) {
        PropertyNode property=null;
        ClassNode curNode=receiver;
        while (property == null && curNode != null) {
          property=curNode.getProperty(pname);
          curNode=curNode.getSuperClass();
        }
        if (property != null) {
          MethodNode node=new MethodNode(name,Opcodes.ACC_PUBLIC,property.getType(),Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,GENERATED_EMPTY_STATEMENT);
          if (property.isStatic()) {
            node.setModifiers(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC);
          }
          node.setDeclaringClass(receiver);
          return Collections.singletonList(node);
        }
      }
    }
 else     if (methods.isEmpty() && args != null && args.length == 1) {
      String pname=extractPropertyNameFromMethodName("set",name);
      if (name != null) {
        ClassNode curNode=receiver;
        PropertyNode property=null;
        while (property == null && curNode != null) {
          property=curNode.getProperty(pname);
          curNode=curNode.getSuperClass();
        }
        if (property != null) {
          ClassNode type=property.getOriginType();
          if (implementsInterfaceOrIsSubclassOf(args[0],type)) {
            MethodNode node=new MethodNode(name,Opcodes.ACC_PUBLIC,VOID_TYPE,new Parameter[]{new Parameter(type,"arg")},ClassNode.EMPTY_ARRAY,GENERATED_EMPTY_STATEMENT);
            if (property.isStatic()) {
              node.setModifiers(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC);
            }
            node.setDeclaringClass(receiver);
            return Collections.singletonList(node);
          }
        }
      }
    }
  }
  if (methods.isEmpty()) {
    collectAllInterfaceMethodsByName(receiver,name,methods);
  }
  List<MethodNode> chosen=chooseBestMethod(receiver,methods,args);
  if (!chosen.isEmpty())   return chosen;
  if (receiver instanceof InnerClassNode && ((InnerClassNode)receiver).isAnonymous() && methods.size() == 1 && args != null && "<init>".equals(name)) {
    MethodNode constructor=methods.get(0);
    if (constructor.getParameters().length == args.length) {
      return methods;
    }
  }
  if (receiver.equals(CLASS_Type) && receiver.getGenericsTypes() != null) {
    List<MethodNode> result=findMethod(receiver.getGenericsTypes()[0].getType(),name,args);
    if (!result.isEmpty())     return result;
  }
  methods.clear();
  chosen=findDGMMethodsByNameAndArguments(getSourceUnit().getClassLoader(),receiver,name,args,methods);
  if (!chosen.isEmpty()) {
    return chosen;
  }
  if (ClassHelper.GSTRING_TYPE.equals(receiver))   return findMethod(ClassHelper.STRING_TYPE,name,args);
  if (isBeingCompiled(receiver)) {
    chosen=findMethod(GROOVY_OBJECT_TYPE,name,args);
    if (!chosen.isEmpty())     return chosen;
  }
  return EMPTY_METHODNODE_LIST;
}
