{
  ClassNode leftRedirect=left.redirect();
  ClassNode rightRedirect=right.redirect();
  Expression leftExpression=expr.getLeftExpression();
  if (op == ASSIGN) {
    if (leftRedirect.isArray() && !rightRedirect.isArray())     return leftRedirect;
    if (leftRedirect.implementsInterface(Collection_TYPE) && rightRedirect.implementsInterface(Collection_TYPE)) {
      return right;
    }
    if (rightRedirect.implementsInterface(Collection_TYPE) && rightRedirect.isDerivedFrom(leftRedirect)) {
      return right;
    }
    if (leftExpression instanceof VariableExpression) {
      VariableExpression target=(VariableExpression)leftExpression;
      if (target.getAccessedVariable() instanceof VariableExpression && target.getAccessedVariable() != leftExpression) {
        target=(VariableExpression)target.getAccessedVariable();
      }
      ClassNode initialType=target.getType().redirect();
      if (STRING_TYPE.equals(initialType) || CLASS_Type.equals(initialType) || Boolean_TYPE.equals(initialType)|| isPrimitiveType(initialType)) {
        return initialType;
      }
    }
    return rightRedirect;
  }
 else   if (isBoolIntrinsicOp(op)) {
    return boolean_TYPE;
  }
 else   if (isArrayOp(op)) {
    ClassNode arrayType=getType(leftExpression);
    if (ClassHelper.STRING_TYPE.equals(arrayType)) {
      return ClassHelper.STRING_TYPE;
    }
    return inferComponentType(arrayType);
  }
 else   if (op == FIND_REGEX) {
    return Matcher_TYPE;
  }
 else   if (isNumberType(leftRedirect) && isNumberType(rightRedirect)) {
    if (isOperationInGroup(op)) {
      if (isIntCategory(leftRedirect) && isIntCategory(rightRedirect))       return int_TYPE;
      if (isLongCategory(leftRedirect) && isLongCategory(rightRedirect))       return Long_TYPE;
      if (isBigIntCategory(leftRedirect) && isBigIntCategory(rightRedirect))       return BigInteger_TYPE;
      if (isBigDecCategory(leftRedirect) && isBigDecCategory(rightRedirect))       return BigDecimal_TYPE;
      if (isDoubleCategory(leftRedirect) && isDoubleCategory(rightRedirect))       return double_TYPE;
    }
 else     if (isPowerOperator(op)) {
      return Number_TYPE;
    }
 else     if (isBitOperator(op)) {
      if (isIntCategory(leftRedirect) && isIntCategory(rightRedirect))       return int_TYPE;
      if (isLongCategory(leftRedirect) && isLongCategory(rightRedirect))       return Long_TYPE;
      if (isBigIntCategory(leftRedirect) && isBigIntCategory(rightRedirect))       return BigInteger_TYPE;
    }
 else     if (isCompareToBoolean(op) || op == COMPARE_EQUAL) {
      return boolean_TYPE;
    }
  }
  String operationName=getOperationName(op);
  if (isShiftOperation(operationName) && isNumberCategory(leftRedirect) && (isIntCategory(rightRedirect) || isLongCategory(rightRedirect))) {
    return leftRedirect;
  }
  MethodNode method=findMethodOrFail(expr,leftRedirect,operationName,rightRedirect);
  if (method != null) {
    if (isCompareToBoolean(op))     return boolean_TYPE;
    if (op == COMPARE_TO)     return int_TYPE;
    return method.getReturnType();
  }
  return null;
}
