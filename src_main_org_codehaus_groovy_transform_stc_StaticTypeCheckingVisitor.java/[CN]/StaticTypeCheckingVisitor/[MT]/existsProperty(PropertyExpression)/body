{
  Expression objectExpression=pexp.getObjectExpression();
  ClassNode clazz=objectExpression.getType().redirect();
  List<ClassNode> tests=new LinkedList<ClassNode>();
  tests.add(clazz);
  if (!temporaryIfBranchTypeInformation.empty()) {
    Map<Object,List<ClassNode>> info=temporaryIfBranchTypeInformation.peek();
    Object key=extractTemporaryTypeInfoKey(objectExpression);
    List<ClassNode> classNodes=info.get(key);
    if (classNodes != null)     tests.addAll(classNodes);
  }
  if (lastImplicitItType != null && pexp.getObjectExpression() instanceof VariableExpression && ((VariableExpression)pexp.getObjectExpression()).getName().equals("it")) {
    tests.add(lastImplicitItType);
  }
  boolean hasProperty=false;
  String propertyName=pexp.getPropertyAsString();
  boolean isAttributeExpression=pexp instanceof AttributeExpression;
  for (  ClassNode testClass : tests) {
    if (!testClass.implementsInterface(ClassHelper.MAP_TYPE)) {
      ClassNode current=testClass;
      while (current != null && !hasProperty) {
        current=current.redirect();
        PropertyNode propertyNode=current.getProperty(propertyName);
        if (propertyNode != null) {
          hasProperty=true;
          break;
        }
        if (!isAttributeExpression) {
          FieldNode field=current.getDeclaredField(propertyName);
          if (field != null) {
            hasProperty=true;
            break;
          }
        }
        current=isAttributeExpression ? null : current.getSuperClass();
      }
    }
 else {
      hasProperty=true;
    }
  }
  return hasProperty;
}
