{
  Expression objectExpression=pexp.getObjectExpression();
  ClassNode clazz=getType(objectExpression);
  if (clazz.isArray() && "length".equals(pexp.getPropertyAsString())) {
    return true;
  }
  List<ClassNode> tests=new LinkedList<ClassNode>();
  tests.add(clazz);
  if (objectExpression instanceof ClassExpression)   tests.add(CLASS_Type);
  if (!temporaryIfBranchTypeInformation.empty()) {
    Map<Object,List<ClassNode>> info=temporaryIfBranchTypeInformation.peek();
    Object key=extractTemporaryTypeInfoKey(objectExpression);
    List<ClassNode> classNodes=info.get(key);
    if (classNodes != null)     tests.addAll(classNodes);
  }
  if (lastImplicitItType != null && pexp.getObjectExpression() instanceof VariableExpression && ((VariableExpression)pexp.getObjectExpression()).getName().equals("it")) {
    tests.add(lastImplicitItType);
  }
  boolean hasProperty=false;
  String propertyName=pexp.getPropertyAsString();
  if (propertyName == null)   return false;
  boolean isAttributeExpression=pexp instanceof AttributeExpression;
  for (  ClassNode testClass : tests) {
    if (!implementsInterfaceOrIsSubclassOf(testClass,MAP_TYPE) && !implementsInterfaceOrIsSubclassOf(testClass,LIST_TYPE)) {
      ClassNode current=testClass;
      while (current != null && !hasProperty) {
        current=current.redirect();
        PropertyNode propertyNode=current.getProperty(propertyName);
        if (propertyNode != null) {
          hasProperty=true;
          break;
        }
        if (!isAttributeExpression) {
          FieldNode field=current.getDeclaredField(propertyName);
          if (field != null) {
            hasProperty=true;
            break;
          }
        }
{
          String pname=MetaClassHelper.capitalize(propertyName);
          List<MethodNode> nodes=current.getMethods("get" + pname);
          if (nodes.isEmpty())           nodes=current.getMethods("is" + pname);
          if (!nodes.isEmpty()) {
            for (            MethodNode node : nodes) {
              Parameter[] parameters=node.getParameters();
              if (node.getReturnType() != VOID_TYPE && (parameters == null || parameters.length == 0)) {
                return true;
              }
            }
          }
        }
        current=isAttributeExpression ? null : current.getSuperClass();
      }
    }
 else {
      hasProperty=true;
    }
  }
  if (!hasProperty && pexp.getObjectExpression() instanceof ClassExpression) {
    return CLASS_Type.getProperty(propertyName) != null || CLASS_Type.getDeclaredField(propertyName) != null;
  }
  return hasProperty;
}
