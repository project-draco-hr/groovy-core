{
  ClassNode cn=exp.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
  if (cn != null)   return cn;
  if (exp instanceof ClassExpression) {
    ClassNode node=CLASS_Type.getPlainNodeReference();
    node.setGenericsTypes(new GenericsType[]{new GenericsType(((ClassExpression)exp).getType())});
    return node;
  }
 else   if (exp instanceof VariableExpression) {
    VariableExpression vexp=(VariableExpression)exp;
    if (vexp == VariableExpression.THIS_EXPRESSION)     return makeThis();
    if (vexp == VariableExpression.SUPER_EXPRESSION)     return makeSuper();
    final Variable variable=vexp.getAccessedVariable();
    if (variable instanceof FieldNode) {
      checkOrMarkPrivateAccess((FieldNode)variable);
    }
    if (variable != null && variable != vexp && variable instanceof VariableExpression) {
      return getType((Expression)variable);
    }
    if (variable instanceof Parameter) {
      Parameter parameter=(Parameter)variable;
      ClassNode type=typeCheckingContext.controlStructureVariables.get(parameter);
      TypeCheckingContext.EnclosingClosure enclosingClosure=typeCheckingContext.getEnclosingClosure();
      ClassNode[] closureParamTypes=(ClassNode[])(enclosingClosure != null ? enclosingClosure.getClosureExpression().getNodeMetaData(StaticTypesMarker.CLOSURE_ARGUMENTS) : null);
      if (type == null && enclosingClosure != null && "it".equals(variable.getName()) && closureParamTypes != null) {
        final Parameter[] parameters=enclosingClosure.getClosureExpression().getParameters();
        if (parameters.length == 0 && getTemporaryTypesForExpression(vexp) == null) {
          type=closureParamTypes[0];
        }
      }
      if (type != null) {
        storeType((VariableExpression)exp,type);
        return type;
      }
    }
  }
  if (exp instanceof ListExpression) {
    return inferListExpressionType((ListExpression)exp);
  }
 else   if (exp instanceof MapExpression) {
    return inferMapExpressionType((MapExpression)exp);
  }
  if (exp instanceof ConstructorCallExpression) {
    return ((ConstructorCallExpression)exp).getType();
  }
  if (exp instanceof MethodNode) {
    if ((exp == GET_DELEGATE || exp == GET_OWNER || exp == GET_THISOBJECT) && typeCheckingContext.getEnclosingClosure() != null) {
      return typeCheckingContext.getEnclosingClassNode();
    }
    ClassNode ret=getInferredReturnType(exp);
    return ret != null ? ret : ((MethodNode)exp).getReturnType();
  }
  if (exp instanceof ClosureExpression) {
    ClassNode irt=getInferredReturnType(exp);
    if (irt != null) {
      irt=wrapTypeIfNecessary(irt);
      ClassNode result=CLOSURE_TYPE.getPlainNodeReference();
      result.setGenericsTypes(new GenericsType[]{new GenericsType(irt)});
      return result;
    }
  }
  if (exp instanceof RangeExpression) {
    ClassNode plain=ClassHelper.RANGE_TYPE.getPlainNodeReference();
    RangeExpression re=(RangeExpression)exp;
    ClassNode fromType=getType(re.getFrom());
    ClassNode toType=getType(re.getTo());
    if (fromType.equals(toType)) {
      plain.setGenericsTypes(new GenericsType[]{new GenericsType(wrapTypeIfNecessary(fromType))});
    }
 else {
      plain.setGenericsTypes(new GenericsType[]{new GenericsType(wrapTypeIfNecessary(lowestUpperBound(fromType,toType)))});
    }
    return plain;
  }
  if (exp instanceof UnaryPlusExpression) {
    return getType(((UnaryPlusExpression)exp).getExpression());
  }
  if (exp instanceof UnaryMinusExpression) {
    return getType(((UnaryMinusExpression)exp).getExpression());
  }
  if (exp instanceof BitwiseNegationExpression) {
    return getType(((BitwiseNegationExpression)exp).getExpression());
  }
  if (exp instanceof MethodCall) {
    MethodNode target=(MethodNode)exp.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);
    if (target != null) {
      return getType(target);
    }
  }
  if (exp instanceof Parameter) {
    return ((Parameter)exp).getOriginType();
  }
  if (exp instanceof FieldNode) {
    return ((FieldNode)exp).getOriginType();
  }
  if (exp instanceof PropertyNode) {
    return ((PropertyNode)exp).getOriginType();
  }
  return exp instanceof VariableExpression ? ((VariableExpression)exp).getOriginType() : ((Expression)exp).getType();
}
