{
  super.visitVariableExpression(vexp);
  if (vexp != VariableExpression.THIS_EXPRESSION && vexp != VariableExpression.SUPER_EXPRESSION) {
    if (vexp.getName().equals("this"))     storeType(vexp,classNode);
    if (vexp.getName().equals("super"))     storeType(vexp,classNode.getSuperClass());
  }
  if (vexp.getAccessedVariable() instanceof DynamicVariable) {
    DynamicVariable dyn=(DynamicVariable)vexp.getAccessedVariable();
    String dynName=dyn.getName();
    List<ClassNode> checkList=new LinkedList<ClassNode>(withReceiverList);
    checkList.add(classNode);
    for (    ClassNode node : checkList) {
      if (node.getProperty(dynName) != null) {
        storeType(vexp,node.getProperty(dynName).getType());
        return;
      }
      if (node.getField(dynName) != null) {
        storeType(vexp,node.getField(dynName).getType());
        return;
      }
    }
    if (pluginFactory != null) {
      TypeCheckerPlugin plugin=pluginFactory.getTypeCheckerPlugin(classNode);
      if (plugin != null) {
        ClassNode type=plugin.resolveDynamicVariableType(dyn);
        if (type != null) {
          storeType(vexp,type);
          return;
        }
      }
    }
    addStaticTypeError("The variable [" + vexp.getName() + "] is undeclared.",vexp);
  }
}
