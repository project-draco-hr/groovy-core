{
  super.visitVariableExpression(vexp);
  if (vexp != VariableExpression.THIS_EXPRESSION && vexp != VariableExpression.SUPER_EXPRESSION) {
    if (vexp.getName().equals("this"))     storeType(vexp,typeCheckingContext.getEnclosingClassNode());
    if (vexp.getName().equals("super"))     storeType(vexp,typeCheckingContext.getEnclosingClassNode().getSuperClass());
    if (typeCheckingContext.getEnclosingClosure() != null) {
      if (vexp.getName().equals("owner") || vexp.getName().equals("delegate") || vexp.getName().equals("thisObject")) {
        storeType(vexp,typeCheckingContext.getEnclosingClassNode());
        return;
      }
    }
  }
  if (vexp.getAccessedVariable() instanceof DynamicVariable) {
    DynamicVariable dyn=(DynamicVariable)vexp.getAccessedVariable();
    String dynName=dyn.getName();
    List<Receiver<String>> checkList=new LinkedList<Receiver<String>>();
    addReceivers(checkList,Collections.singletonList(Receiver.<String>make(typeCheckingContext.getEnclosingClassNode())),true);
    for (    Receiver<String> receiver : checkList) {
      ClassNode node=receiver.getType();
      if (node.getProperty(dynName) != null) {
        storeType(vexp,node.getProperty(dynName).getType());
        return;
      }
      if (node.getField(dynName) != null) {
        storeType(vexp,node.getField(dynName).getType());
        return;
      }
    }
    if (!errorHandler.handleUnresolvedVariableExpression(vexp)) {
      addStaticTypeError("The variable [" + vexp.getName() + "] is undeclared.",vexp);
    }
  }
}
