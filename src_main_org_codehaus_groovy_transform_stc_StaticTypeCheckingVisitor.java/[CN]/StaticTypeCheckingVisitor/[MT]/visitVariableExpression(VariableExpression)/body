{
  super.visitVariableExpression(vexp);
  if (storeTypeForThis(vexp))   return;
  if (storeTypeForSuper(vexp))   return;
  TypeCheckingContext.EnclosingClosure enclosingClosure=typeCheckingContext.getEnclosingClosure();
  if (enclosingClosure != null) {
    String name=vexp.getName();
    if (name.equals("owner") || name.equals("thisObject")) {
      storeType(vexp,typeCheckingContext.getEnclosingClassNode());
      return;
    }
 else     if ("delegate".equals(name)) {
      DelegationMetadata md=getDelegationMetadata(enclosingClosure.getClosureExpression());
      ClassNode type=typeCheckingContext.getEnclosingClassNode();
      if (md != null)       type=md.getType();
      storeType(vexp,type);
      return;
    }
  }
  if (!(vexp.getAccessedVariable() instanceof DynamicVariable))   return;
  DynamicVariable dyn=(DynamicVariable)vexp.getAccessedVariable();
  String dynName=dyn.getName();
  VariableExpression implicitThis=new VariableExpression("this");
  PropertyExpression pe=new PropertyExpression(implicitThis,dynName);
  pe.setImplicitThis(true);
  if (visitPropertyExpressionSilent(pe,vexp)) {
    ClassNode previousIt=vexp.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
    vexp.copyNodeMetaData(implicitThis);
    vexp.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE,previousIt);
    storeType(vexp,getType(pe));
    Object val=pe.getNodeMetaData(StaticTypesMarker.READONLY_PROPERTY);
    if (val != null)     vexp.putNodeMetaData(StaticTypesMarker.READONLY_PROPERTY,val);
    val=pe.getNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER);
    if (val != null)     vexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER,val);
    return;
  }
  if (!extension.handleUnresolvedVariableExpression(vexp)) {
    addStaticTypeError("The variable [" + vexp.getName() + "] is undeclared.",vexp);
  }
}
