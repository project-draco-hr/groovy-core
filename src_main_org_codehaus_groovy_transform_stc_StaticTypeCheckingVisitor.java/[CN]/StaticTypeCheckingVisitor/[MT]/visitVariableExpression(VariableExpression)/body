{
  super.visitVariableExpression(vexp);
  if (storeTypeForThis(vexp))   return;
  if (storeTypeForSuper(vexp))   return;
  if (typeCheckingContext.getEnclosingClosure() != null) {
    String name=vexp.getName();
    if (name.equals("owner") || name.equals("thisObject")) {
      storeType(vexp,typeCheckingContext.getEnclosingClassNode());
      return;
    }
 else     if ("delegate".equals(name)) {
      DelegationMetadata md=getDelegationMetadata(typeCheckingContext.getEnclosingClosure().getClosureExpression());
      ClassNode type=typeCheckingContext.getEnclosingClassNode();
      if (md != null)       type=md.getType();
      storeType(vexp,type);
      return;
    }
  }
  if (!(vexp.getAccessedVariable() instanceof DynamicVariable))   return;
  DynamicVariable dyn=(DynamicVariable)vexp.getAccessedVariable();
  String dynName=dyn.getName();
  PropertyExpression pe=new PropertyExpression(new VariableExpression("this"),dynName);
  pe.setImplicitThis(true);
  if (visitPropertyExpressionSilent(pe,vexp)) {
    storeType(vexp,getType(pe));
    vexp.putNodeMetaData(StaticTypesMarker.READONLY_PROPERTY,pe.getNodeMetaData(StaticTypesMarker.READONLY_PROPERTY));
    return;
  }
  if (!extension.handleUnresolvedVariableExpression(vexp)) {
    addStaticTypeError("The variable [" + vexp.getName() + "] is undeclared.",vexp);
  }
}
