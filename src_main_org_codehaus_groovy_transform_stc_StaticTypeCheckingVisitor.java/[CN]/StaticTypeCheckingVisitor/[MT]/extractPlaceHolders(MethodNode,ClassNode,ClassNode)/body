{
  if (declaringClass.equals(OBJECT_TYPE)) {
    Map<String,GenericsType> resolvedPlaceholders=new HashMap<String,GenericsType>();
    if (method != null)     addMethodLevelDeclaredGenerics(method,resolvedPlaceholders);
    return resolvedPlaceholders;
  }
  Map<String,GenericsType> resolvedPlaceholders=null;
  if (isPrimitiveType(receiver) && !isPrimitiveType(declaringClass)) {
    receiver=getWrapper(receiver);
  }
  final List<ClassNode> queue;
  if (receiver instanceof UnionTypeClassNode) {
    queue=Arrays.asList(((UnionTypeClassNode)receiver).getDelegates());
  }
 else {
    queue=Collections.singletonList(receiver);
  }
  for (  ClassNode item : queue) {
    ClassNode current=item;
    while (current != null) {
      boolean continueLoop=true;
      Map<String,GenericsType> currentPlaceHolders=new HashMap<String,GenericsType>();
      if (isGenericsPlaceHolderOrArrayOf(declaringClass) || declaringClass.equals(current)) {
        extractGenericsConnections(currentPlaceHolders,current,declaringClass);
        if (method != null)         addMethodLevelDeclaredGenerics(method,currentPlaceHolders);
        continueLoop=false;
      }
 else {
        GenericsUtils.extractPlaceholders(current,currentPlaceHolders);
      }
      if (resolvedPlaceholders != null) {
        Set<Map.Entry<String,GenericsType>> entries=currentPlaceHolders.entrySet();
        for (        Map.Entry<String,GenericsType> entry : entries) {
          GenericsType gt=entry.getValue();
          if (!gt.isPlaceholder())           continue;
          GenericsType referenced=resolvedPlaceholders.get(gt.getName());
          if (referenced == null)           continue;
          entry.setValue(referenced);
        }
      }
      resolvedPlaceholders=currentPlaceHolders;
      if (!continueLoop)       break;
      current=getNextSuperClass(current,declaringClass);
      if (current == null && CLASS_Type.equals(declaringClass)) {
        current=declaringClass;
      }
    }
  }
  if (resolvedPlaceholders == null) {
    String descriptor="<>";
    if (method != null)     descriptor=method.getTypeDescriptor();
    throw new GroovyBugError("Declaring class for method call to '" + descriptor + "' declared in "+ declaringClass.getName()+ " was not matched with found receiver "+ receiver.getName()+ "."+ " This should not have happened!");
  }
  return resolvedPlaceholders;
}
