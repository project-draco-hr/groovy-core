{
  if (declaringClass.equals(OBJECT_TYPE)) {
    Map<String,GenericsType> resolvedPlaceholders=new HashMap<String,GenericsType>();
    if (method != null)     addMethodLevelDeclaredGenerics(method,resolvedPlaceholders);
    return resolvedPlaceholders;
  }
  Map<String,GenericsType> resolvedPlaceholders=null;
  ClassNode current=receiver;
  while (true) {
    Map<String,GenericsType> currentPlaceHolders=new HashMap<String,GenericsType>();
    GenericsUtils.extractPlaceholders(current,currentPlaceHolders);
    if (method != null && declaringClass.equals(current)) {
      addMethodLevelDeclaredGenerics(method,currentPlaceHolders);
    }
    if (resolvedPlaceholders != null) {
      Set<Map.Entry<String,GenericsType>> entries=currentPlaceHolders.entrySet();
      for (      Map.Entry<String,GenericsType> entry : entries) {
        GenericsType gt=entry.getValue();
        if (!gt.isPlaceholder())         continue;
        GenericsType referenced=resolvedPlaceholders.get(gt.getName());
        entry.setValue(referenced);
      }
    }
    resolvedPlaceholders=currentPlaceHolders;
    if (current.equals(declaringClass))     break;
    ClassNode nextNode=null;
    if (declaringClass.isInterface()) {
      ClassNode[] interfaces=current.getUnresolvedInterfaces();
      for (int i=0; i < interfaces.length; i++) {
        if (implementsInterfaceOrIsSubclassOf(interfaces[i],declaringClass)) {
          nextNode=interfaces[i];
          break;
        }
      }
    }
    if (nextNode == null) {
      nextNode=current.getUnresolvedSuperClass();
      if (current.isArray()) {
        nextNode=current.getComponentType();
        nextNode=nextNode.getUnresolvedSuperClass();
        if (nextNode != null) {
          nextNode=nextNode.makeArray();
        }
 else {
          nextNode=OBJECT_TYPE;
        }
      }
    }
    current=nextNode;
    if (current == null) {
      String descriptor="<>";
      if (method != null)       descriptor=method.getTypeDescriptor();
      throw new GroovyBugError("Declaring class for method call to '" + descriptor + "' declared in "+ declaringClass.getName()+ " was not matched with found receiver "+ receiver.getName()+ "."+ " This should not have happened!");
    }
  }
  return resolvedPlaceholders;
}
