{
  Expression expression=statement.getExpression();
  ClassNode type=getType(expression);
  if (methodNode != null && closureExpression == null) {
    if (!methodNode.isVoidMethod() && !type.equals(void_WRAPPER_TYPE) && !type.equals(VOID_TYPE)&& !checkCompatibleAssignmentTypes(methodNode.getReturnType(),type)&& !(isNullConstant(expression))) {
      addStaticTypeError("Cannot return value of type " + type.toString(false) + " on method returning type "+ methodNode.getReturnType().toString(false),expression);
    }
 else     if (!methodNode.isVoidMethod()) {
      ClassNode previousType=(ClassNode)methodNode.getNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE);
      ClassNode inferred=previousType == null ? type : lowestUpperBound(type,previousType);
      if (implementsInterfaceOrIsSubclassOf(inferred,methodNode.getReturnType())) {
        if (missesGenericsTypes(inferred)) {
          DeclarationExpression virtualDecl=new DeclarationExpression(new VariableExpression("{target}",methodNode.getReturnType()),Token.newSymbol(EQUAL,-1,-1),new VariableExpression("{source}",inferred));
          virtualDecl.setSourcePosition(statement);
          virtualDecl.visit(this);
          ClassNode newlyInferred=(ClassNode)virtualDecl.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);
          if (!missesGenericsTypes(newlyInferred))           inferred=newlyInferred;
        }
        methodNode.putNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE,inferred);
        return inferred;
      }
 else {
        methodNode.putNodeMetaData(StaticTypesMarker.INFERRED_RETURN_TYPE,methodNode.getReturnType());
        return methodNode.getReturnType();
      }
    }
  }
  return type;
}
