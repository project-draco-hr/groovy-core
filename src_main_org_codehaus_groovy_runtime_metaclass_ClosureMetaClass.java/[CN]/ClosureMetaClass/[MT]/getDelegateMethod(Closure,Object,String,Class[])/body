{
  if (delegate == closure || delegate == null)   return null;
  if (delegate instanceof Class) {
    for (Class superClass=(Class)delegate; superClass != Object.class && superClass != null; superClass=superClass.getSuperclass()) {
      MetaClass mc=registry.getMetaClass(superClass);
      MetaMethod method=mc.getStaticMetaMethod(methodName,argClasses);
      if (method != null)       return method;
    }
    return null;
  }
 else {
    MetaClass delegateMetaClass=lookupObjectMetaClass(delegate);
    MetaMethod method=delegateMetaClass.pickMethod(methodName,argClasses);
    if (method != null) {
      return method;
    }
    if (delegateMetaClass instanceof ExpandoMetaClass) {
      method=((ExpandoMetaClass)delegateMetaClass).findMixinMethod(methodName,argClasses);
      if (method != null) {
        onMixinMethodFound(method);
        return method;
      }
    }
    if (delegateMetaClass instanceof MetaClassImpl) {
      method=MetaClassImpl.findMethodInClassHierarchy(getTheClass(),methodName,argClasses,this);
      if (method != null) {
        onSuperMethodFoundInHierarchy(method);
        return method;
      }
    }
    return method;
  }
}
