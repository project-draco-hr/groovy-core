{
  checkInitalised();
  if (object == null) {
    throw new NullPointerException("Cannot invoke method: " + methodName + " on null object");
  }
  final Object[] arguments=makeArguments(originalArguments,methodName);
  final Class[] argClasses=MetaClassHelper.convertToTypeArray(arguments);
  unwrap(arguments);
  MetaMethod method;
  final Closure closure=(Closure)object;
  if (CLOSURE_DO_CALL_METHOD.equals(methodName) || CLOSURE_CALL_METHOD.equals(methodName)) {
    method=pickClosureMethod(argClasses);
    if (method == null && arguments.length == 1 && arguments[0] instanceof List) {
      Object[] newArguments=((List)arguments[0]).toArray();
      Class[] newArgClasses=MetaClassHelper.convertToTypeArray(newArguments);
      method=pickClosureMethod(newArgClasses);
      if (method != null) {
        method=new TransformMetaMethod(method){
          public Object invoke(          Object object,          Object[] arguments){
            Object firstArgument=arguments[0];
            List list=(List)firstArgument;
            arguments=list.toArray();
            return super.invoke(object,arguments);
          }
        }
;
      }
    }
    if (method == null)     throw new MissingMethodException(methodName,theClass,arguments,false);
  }
 else   if (CLOSURE_CURRY_METHOD.equals(methodName)) {
    return closure.curry(arguments);
  }
 else {
    method=CLOSURE_METACLASS.pickMethod(methodName,argClasses);
  }
  if (method != null)   return method.doMethodInvoke(object,arguments);
  MissingMethodException last=null;
  Object callObject=object;
  if (method == null) {
    final Object owner=closure.getOwner();
    final Object delegate=closure.getDelegate();
    final Object thisObject=closure.getThisObject();
    final int resolveStrategy=closure.getResolveStrategy();
    boolean invokeOnDelegate=false;
    boolean invokeOnOwner=false;
    boolean ownerFirst=true;
switch (resolveStrategy) {
case Closure.TO_SELF:
      break;
case Closure.DELEGATE_ONLY:
    method=getDelegateMethod(closure,delegate,methodName,argClasses);
  callObject=delegate;
if (method == null) {
  invokeOnDelegate=delegate != closure && (delegate instanceof GroovyObject);
}
break;
case Closure.OWNER_ONLY:
method=getDelegateMethod(closure,owner,methodName,argClasses);
callObject=owner;
if (method == null) {
invokeOnOwner=owner != closure && (owner instanceof GroovyObject);
}
break;
case Closure.DELEGATE_FIRST:
method=getDelegateMethod(closure,delegate,methodName,argClasses);
callObject=delegate;
if (method == null) {
method=getDelegateMethod(closure,owner,methodName,argClasses);
callObject=owner;
}
if (method == null) {
invokeOnDelegate=delegate != closure && (delegate instanceof GroovyObject);
invokeOnOwner=owner != closure && (owner instanceof GroovyObject);
ownerFirst=false;
}
break;
default :
method=getDelegateMethod(closure,thisObject,methodName,argClasses);
callObject=thisObject;
if (method == null) {
LinkedList list=new LinkedList();
for (Object current=closure; current != thisObject; ) {
Closure currentClosure=(Closure)current;
if (currentClosure.getDelegate() != null) list.add(current);
current=currentClosure.getOwner();
}
while (!list.isEmpty() && method == null) {
Closure closureWithDelegate=(Closure)list.removeLast();
Object currentDelegate=closureWithDelegate.getDelegate();
method=getDelegateMethod(closureWithDelegate,currentDelegate,methodName,argClasses);
callObject=currentDelegate;
}
}
if (method == null) {
invokeOnDelegate=delegate != closure && (delegate instanceof GroovyObject);
invokeOnOwner=owner != closure && (owner instanceof GroovyObject);
}
}
if (method == null && (invokeOnOwner || invokeOnDelegate)) {
try {
if (ownerFirst) {
return invokeOnDelegationObjects(invokeOnOwner,owner,invokeOnDelegate,delegate,methodName,arguments);
}
 else {
return invokeOnDelegationObjects(invokeOnDelegate,delegate,invokeOnOwner,owner,methodName,arguments);
}
}
 catch (MissingMethodException mme) {
last=mme;
}
}
}
if (method != null) {
MetaClass metaClass=registry.getMetaClass(callObject.getClass());
if (metaClass instanceof ProxyMetaClass) {
return metaClass.invokeMethod(callObject,methodName,arguments);
}
 else {
return method.doMethodInvoke(callObject,arguments);
}
}
 else {
Object value=null;
try {
value=this.getProperty(object,methodName);
}
 catch (MissingPropertyException mpe) {
}
if (value instanceof Closure) {
Closure cl=(Closure)value;
MetaClass delegateMetaClass=cl.getMetaClass();
return delegateMetaClass.invokeMethod(cl.getClass(),closure,CLOSURE_DO_CALL_METHOD,originalArguments,false,fromInsideClass);
}
}
if (last != null) throw last;
throw new MissingMethodException(methodName,theClass,arguments,false);
}
