{
  final Method[] methods=claz.getDeclaredMethods();
  final List defaultMethods=(List)defaultGroovyMethodsMap.get(claz);
  final List defaultStaticMethods=(List)defaultGroovyStaticMethodsMap.get(claz);
  if (defaultMethods != null) {
    this.generators.addAll(defaultMethods);
  }
  if (defaultStaticMethods != null) {
    this.generators.addAll(defaultStaticMethods);
  }
  for (int i=0; i != methods.length; i++) {
    final Method method=methods[i];
    final int methodModifiers=method.getModifiers();
    if ((methodModifiers & Modifier.PUBLIC) != 0) {
      if ((methodModifiers & Modifier.STATIC) != 0) {
        this.generators.add(new StaticMethodGenerator(method));
      }
 else {
        this.generators.add(new InstanceMethodGenerator(method));
      }
    }
 else     if ((methodModifiers & Modifier.PROTECTED) != 0) {
      this.generators.add(new ReflectionMethodGenerator(method));
    }
  }
  if (claz != Object.class) {
    final Class superClass=claz.getSuperclass();
    if (superClass != null) {
      this.generators.addAll(MetaClassActionsGenerator.getActionsInfo(superClass).generators);
    }
    final Class[] interfaces=claz.getInterfaces();
    for (int i=0; i != interfaces.length; i++) {
      this.generators.addAll(MetaClassActionsGenerator.getActionsInfo(interfaces[i]).generators);
    }
  }
  Collections.sort(this.generators,new Comparator(){
    public int compare(    final Object lhs,    final Object rhs){
      final int lhsNumberOfParameters=((MethodGenerator)lhs).getNumberOfParameters();
      final int rhsNumberOfParameters=((MethodGenerator)rhs).getNumberOfParameters();
      if (lhsNumberOfParameters == rhsNumberOfParameters) {
        final String lhsName=((MethodGenerator)lhs).getName();
        final String rhsName=((MethodGenerator)rhs).getName();
        return lhsName.compareTo(rhsName);
      }
 else       if (lhsNumberOfParameters < rhsNumberOfParameters) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
);
  if (this.generators.size() > 1) {
    MethodGenerator g1=(MethodGenerator)this.generators.get(this.generators.size() - 1);
    for (int i=this.generators.size() - 2; i > -1; i--) {
      final MethodGenerator g2=(MethodGenerator)this.generators.get(i);
      if (g1.isOverloaded(g2)) {
        this.generators.remove(i + 1);
        g1=g1.processOverloaded(claz,g2);
        this.generators.set(i,g1);
      }
 else {
        g1=g2;
      }
    }
  }
}
