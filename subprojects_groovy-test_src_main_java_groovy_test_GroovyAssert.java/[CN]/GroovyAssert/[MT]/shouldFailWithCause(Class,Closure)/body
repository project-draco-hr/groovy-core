{
  if (expectedCause == null) {
    fail("The expectedCause class cannot be null");
  }
  Throwable cause=null;
  Throwable orig=null;
  int level=0;
  try {
    code.call();
  }
 catch (  GroovyRuntimeException gre) {
    orig=ScriptBytecodeAdapter.unwrap(gre);
    cause=orig.getCause();
  }
catch (  Throwable e) {
    orig=e;
    cause=orig.getCause();
  }
  if (orig != null && cause == null) {
    fail("Closure " + code + " was expected to fail due to a nested cause of type "+ expectedCause.getName()+ " but instead got a direct exception of type "+ orig.getClass().getName()+ " with no nested cause(s). Code under test has a bug or perhaps you meant shouldFail?");
  }
  while (cause != null && !expectedCause.isInstance(cause) && cause != cause.getCause() && level < MAX_NESTED_EXCEPTIONS) {
    cause=cause.getCause();
    level++;
  }
  if (orig == null) {
    fail("Closure " + code + " should have failed with an exception having a nested cause of type "+ expectedCause.getName());
  }
 else   if (cause == null || !expectedCause.isInstance(cause)) {
    fail("Closure " + code + " should have failed with an exception having a nested cause of type "+ expectedCause.getName()+ ", instead found these Exceptions:\n"+ buildExceptionList(orig));
  }
  return cause;
}
