{
  super.visitAnnotations(node);
  for (  AnnotationNode annotation : (Collection<AnnotationNode>)node.getAnnotations()) {
    ClassNode annotationClassNode=annotation.getClassNode();
    if (!annotationClassNode.isResolved())     continue;
    GroovyASTTransformationClass transformClassAnnotation=(GroovyASTTransformationClass)annotation.getClassNode().getTypeClass().getAnnotation(GroovyASTTransformationClass.class);
    if (transformClassAnnotation == null) {
      continue;
    }
    for (    String transformClass : transformClassAnnotation.value()) {
      try {
        Object o=source.getClassLoader().loadClass(transformClass,false,true,false).newInstance();
        if (o instanceof ASTTransformation) {
          classNode.addTransform((ASTTransformation)o,annotation);
        }
 else {
          source.getErrorCollector().addError(new SimpleMessage("Not an ASTTransformatnion: " + transformClass + " declared by "+ annotation.getClassNode().getName(),source));
        }
      }
 catch (      InstantiationException e) {
        source.getErrorCollector().addError(new SimpleMessage("Could not instantiate Transformation Processor " + transformClass + " declared by "+ annotation.getClassNode().getName(),source));
      }
catch (      IllegalAccessException e) {
        source.getErrorCollector().addError(new SimpleMessage("Could not instantiate Transformation Processor " + transformClass + " declared by "+ annotation.getClassNode().getName(),source));
      }
catch (      ClassNotFoundException e) {
        source.getErrorCollector().addError(new SimpleMessage("Could find class for Transformation Processor " + transformClass + " declared by "+ annotation.getClassNode().getName(),source));
      }
    }
  }
}
