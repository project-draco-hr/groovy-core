{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST blockBody_AST=null;
  boolean synPredMatched876=false;
  if (((_tokenSet_29.member(LA(1))) && (_tokenSet_2.member(LA(2))) && (_tokenSet_7.member(LA(3))))) {
    int _m876=mark();
    synPredMatched876=true;
    inputState.guessing++;
    try {
{
        nls();
        assignmentExpression();
        nls();
{
switch (LA(1)) {
case RCURLY:
{
              match(RCURLY);
              break;
            }
case EOF:
{
            match(Token.EOF_TYPE);
            break;
          }
default :
{
          throw new NoViableAltException(LT(1),getFilename());
        }
    }
  }
}
}
 catch (RecognitionException pe) {
synPredMatched876=false;
}
rewind(_m876);
inputState.guessing--;
}
if (synPredMatched876) {
nls();
expressionNotBOR();
astFactory.addASTChild(currentAST,returnAST);
nls();
blockBody_AST=(AST)currentAST.root;
}
 else if ((_tokenSet_30.member(LA(1))) && (_tokenSet_7.member(LA(2))) && (_tokenSet_8.member(LA(3)))) {
nls();
{
switch (LA(1)) {
case FINAL:
case ABSTRACT:
case STRICTFP:
case DEF:
case LITERAL_import:
case LITERAL_static:
case AT:
case LBRACK:
case IDENT:
case LPAREN:
case LITERAL_class:
case LITERAL_super:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case STAR:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case LITERAL_if:
case LITERAL_while:
case LITERAL_with:
case LITERAL_switch:
case LITERAL_for:
case LITERAL_return:
case LITERAL_break:
case LITERAL_continue:
case LITERAL_throw:
case LITERAL_assert:
case INC:
case DEC:
case LITERAL_try:
case PLUS:
case MINUS:
case BNOT:
case LNOT:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case STRING_CTOR_START:
case LITERAL_new:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
    statement();
    astFactory.addASTChild(currentAST,returnAST);
    break;
  }
case EOF:
case RCURLY:
case SEMI:
case NLS:
{
  break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
{
_loop880: do {
if ((LA(1) == SEMI || LA(1) == NLS)) {
sep();
{
switch (LA(1)) {
case FINAL:
case ABSTRACT:
case STRICTFP:
case DEF:
case LITERAL_import:
case LITERAL_static:
case AT:
case LBRACK:
case IDENT:
case LPAREN:
case LITERAL_class:
case LITERAL_super:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case STAR:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case LITERAL_if:
case LITERAL_while:
case LITERAL_with:
case LITERAL_switch:
case LITERAL_for:
case LITERAL_return:
case LITERAL_break:
case LITERAL_continue:
case LITERAL_throw:
case LITERAL_assert:
case INC:
case DEC:
case LITERAL_try:
case PLUS:
case MINUS:
case BNOT:
case LNOT:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case STRING_CTOR_START:
case LITERAL_new:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
    statement();
    astFactory.addASTChild(currentAST,returnAST);
    break;
  }
case EOF:
case RCURLY:
case SEMI:
case NLS:
{
  break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
}
 else {
break _loop880;
}
}
 while (true);
}
blockBody_AST=(AST)currentAST.root;
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
returnAST=blockBody_AST;
}
