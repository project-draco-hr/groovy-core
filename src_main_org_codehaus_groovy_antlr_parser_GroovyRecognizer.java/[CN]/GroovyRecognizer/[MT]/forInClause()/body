{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST forInClause_AST=null;
  Token i=null;
  AST i_AST=null;
{
    boolean synPredMatched273=false;
    if (((_tokenSet_11.member(LA(1))) && (_tokenSet_104.member(LA(2))))) {
      int _m273=mark();
      synPredMatched273=true;
      inputState.guessing++;
      try {
{
          declarationStart();
        }
      }
 catch (      RecognitionException pe) {
        synPredMatched273=false;
      }
      rewind(_m273);
      inputState.guessing--;
    }
    if (synPredMatched273) {
      singleDeclarationNoInit();
      if (inputState.guessing == 0) {
        astFactory.addASTChild(currentAST,returnAST);
      }
    }
 else     if ((LA(1) == IDENT) && (LA(2) == LITERAL_in)) {
      AST tmp189_AST=null;
      if (inputState.guessing == 0) {
        tmp189_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp189_AST);
      }
      match(IDENT);
    }
 else {
      throw new NoViableAltException(LT(1),getFilename());
    }
  }
  i=LT(1);
  if (inputState.guessing == 0) {
    i_AST=astFactory.create(i);
    astFactory.makeASTRoot(currentAST,i_AST);
  }
  match(LITERAL_in);
  if (inputState.guessing == 0) {
    i_AST.setType(FOR_IN_ITERABLE);
  }
  shiftExpression();
  if (inputState.guessing == 0) {
    astFactory.addASTChild(currentAST,returnAST);
  }
  if (inputState.guessing == 0) {
    forInClause_AST=(AST)currentAST.root;
  }
  returnAST=forInClause_AST;
}
