{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST assignmentExpression_AST=null;
  conditionalExpression();
  astFactory.addASTChild(currentAST,returnAST);
{
switch (LA(1)) {
case ASSIGN:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case STAR_ASSIGN:
case DIV_ASSIGN:
case MOD_ASSIGN:
case SR_ASSIGN:
case BSR_ASSIGN:
case SL_ASSIGN:
case BAND_ASSIGN:
case BXOR_ASSIGN:
case BOR_ASSIGN:
case STAR_STAR_ASSIGN:
{
{
switch (LA(1)) {
case ASSIGN:
{
              AST tmp186_AST=null;
              tmp186_AST=astFactory.create(LT(1));
              astFactory.makeASTRoot(currentAST,tmp186_AST);
              match(ASSIGN);
              break;
            }
case PLUS_ASSIGN:
{
            AST tmp187_AST=null;
            tmp187_AST=astFactory.create(LT(1));
            astFactory.makeASTRoot(currentAST,tmp187_AST);
            match(PLUS_ASSIGN);
            break;
          }
case MINUS_ASSIGN:
{
          AST tmp188_AST=null;
          tmp188_AST=astFactory.create(LT(1));
          astFactory.makeASTRoot(currentAST,tmp188_AST);
          match(MINUS_ASSIGN);
          break;
        }
case STAR_ASSIGN:
{
        AST tmp189_AST=null;
        tmp189_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp189_AST);
        match(STAR_ASSIGN);
        break;
      }
case DIV_ASSIGN:
{
      AST tmp190_AST=null;
      tmp190_AST=astFactory.create(LT(1));
      astFactory.makeASTRoot(currentAST,tmp190_AST);
      match(DIV_ASSIGN);
      break;
    }
case MOD_ASSIGN:
{
    AST tmp191_AST=null;
    tmp191_AST=astFactory.create(LT(1));
    astFactory.makeASTRoot(currentAST,tmp191_AST);
    match(MOD_ASSIGN);
    break;
  }
case SR_ASSIGN:
{
  AST tmp192_AST=null;
  tmp192_AST=astFactory.create(LT(1));
  astFactory.makeASTRoot(currentAST,tmp192_AST);
  match(SR_ASSIGN);
  break;
}
case BSR_ASSIGN:
{
AST tmp193_AST=null;
tmp193_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp193_AST);
match(BSR_ASSIGN);
break;
}
case SL_ASSIGN:
{
AST tmp194_AST=null;
tmp194_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp194_AST);
match(SL_ASSIGN);
break;
}
case BAND_ASSIGN:
{
AST tmp195_AST=null;
tmp195_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp195_AST);
match(BAND_ASSIGN);
break;
}
case BXOR_ASSIGN:
{
AST tmp196_AST=null;
tmp196_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp196_AST);
match(BXOR_ASSIGN);
break;
}
case BOR_ASSIGN:
{
AST tmp197_AST=null;
tmp197_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp197_AST);
match(BOR_ASSIGN);
break;
}
case STAR_STAR_ASSIGN:
{
AST tmp198_AST=null;
tmp198_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp198_AST);
match(STAR_STAR_ASSIGN);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
nls();
assignmentExpression();
astFactory.addASTChild(currentAST,returnAST);
break;
}
case EOF:
case FINAL:
case ABSTRACT:
case STRICTFP:
case DEF:
case LITERAL_static:
case AT:
case RBRACK:
case IDENT:
case RPAREN:
case LITERAL_class:
case LITERAL_interface:
case LITERAL_enum:
case COMMA:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case LCURLY:
case RCURLY:
case SEMI:
case LITERAL_default:
case BOR:
case COLON:
case LITERAL_else:
case LITERAL_case:
case NLS:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
assignmentExpression_AST=(AST)currentAST.root;
returnAST=assignmentExpression_AST;
}
