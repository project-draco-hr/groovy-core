{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST assignmentExpression_AST=null;
  conditionalExpression();
  if (inputState.guessing == 0) {
    astFactory.addASTChild(currentAST,returnAST);
  }
{
switch (LA(1)) {
case ASSIGN:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case STAR_ASSIGN:
case DIV_ASSIGN:
case MOD_ASSIGN:
case SR_ASSIGN:
case BSR_ASSIGN:
case SL_ASSIGN:
case BAND_ASSIGN:
case BXOR_ASSIGN:
case BOR_ASSIGN:
case STAR_STAR_ASSIGN:
{
{
switch (LA(1)) {
case ASSIGN:
{
              AST tmp223_AST=null;
              if (inputState.guessing == 0) {
                tmp223_AST=astFactory.create(LT(1));
                astFactory.makeASTRoot(currentAST,tmp223_AST);
              }
              match(ASSIGN);
              break;
            }
case PLUS_ASSIGN:
{
            AST tmp224_AST=null;
            if (inputState.guessing == 0) {
              tmp224_AST=astFactory.create(LT(1));
              astFactory.makeASTRoot(currentAST,tmp224_AST);
            }
            match(PLUS_ASSIGN);
            break;
          }
case MINUS_ASSIGN:
{
          AST tmp225_AST=null;
          if (inputState.guessing == 0) {
            tmp225_AST=astFactory.create(LT(1));
            astFactory.makeASTRoot(currentAST,tmp225_AST);
          }
          match(MINUS_ASSIGN);
          break;
        }
case STAR_ASSIGN:
{
        AST tmp226_AST=null;
        if (inputState.guessing == 0) {
          tmp226_AST=astFactory.create(LT(1));
          astFactory.makeASTRoot(currentAST,tmp226_AST);
        }
        match(STAR_ASSIGN);
        break;
      }
case DIV_ASSIGN:
{
      AST tmp227_AST=null;
      if (inputState.guessing == 0) {
        tmp227_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp227_AST);
      }
      match(DIV_ASSIGN);
      break;
    }
case MOD_ASSIGN:
{
    AST tmp228_AST=null;
    if (inputState.guessing == 0) {
      tmp228_AST=astFactory.create(LT(1));
      astFactory.makeASTRoot(currentAST,tmp228_AST);
    }
    match(MOD_ASSIGN);
    break;
  }
case SR_ASSIGN:
{
  AST tmp229_AST=null;
  if (inputState.guessing == 0) {
    tmp229_AST=astFactory.create(LT(1));
    astFactory.makeASTRoot(currentAST,tmp229_AST);
  }
  match(SR_ASSIGN);
  break;
}
case BSR_ASSIGN:
{
AST tmp230_AST=null;
if (inputState.guessing == 0) {
  tmp230_AST=astFactory.create(LT(1));
  astFactory.makeASTRoot(currentAST,tmp230_AST);
}
match(BSR_ASSIGN);
break;
}
case SL_ASSIGN:
{
AST tmp231_AST=null;
if (inputState.guessing == 0) {
tmp231_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp231_AST);
}
match(SL_ASSIGN);
break;
}
case BAND_ASSIGN:
{
AST tmp232_AST=null;
if (inputState.guessing == 0) {
tmp232_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp232_AST);
}
match(BAND_ASSIGN);
break;
}
case BXOR_ASSIGN:
{
AST tmp233_AST=null;
if (inputState.guessing == 0) {
tmp233_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp233_AST);
}
match(BXOR_ASSIGN);
break;
}
case BOR_ASSIGN:
{
AST tmp234_AST=null;
if (inputState.guessing == 0) {
tmp234_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp234_AST);
}
match(BOR_ASSIGN);
break;
}
case STAR_STAR_ASSIGN:
{
AST tmp235_AST=null;
if (inputState.guessing == 0) {
tmp235_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp235_AST);
}
match(STAR_STAR_ASSIGN);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
nls();
assignmentExpression();
if (inputState.guessing == 0) {
astFactory.addASTChild(currentAST,returnAST);
}
break;
}
case EOF:
case RBRACK:
case COMMA:
case RPAREN:
case RCURLY:
case SEMI:
case NLS:
case LITERAL_default:
case CLOSURE_OP:
case COLON:
case LITERAL_else:
case LITERAL_case:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
if (inputState.guessing == 0) {
assignmentExpression_AST=(AST)currentAST.root;
}
returnAST=assignmentExpression_AST;
}
