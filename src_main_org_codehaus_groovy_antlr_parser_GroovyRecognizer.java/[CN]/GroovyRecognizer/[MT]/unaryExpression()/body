{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST unaryExpression_AST=null;
switch (LA(1)) {
case INC:
{
      AST tmp323_AST=null;
      if (inputState.guessing == 0) {
        tmp323_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp323_AST);
      }
      match(INC);
      nls();
      unaryExpression();
      if (inputState.guessing == 0) {
        astFactory.addASTChild(currentAST,returnAST);
      }
      if (inputState.guessing == 0) {
        unaryExpression_AST=(AST)currentAST.root;
      }
      break;
    }
case DEC:
{
    AST tmp324_AST=null;
    if (inputState.guessing == 0) {
      tmp324_AST=astFactory.create(LT(1));
      astFactory.makeASTRoot(currentAST,tmp324_AST);
    }
    match(DEC);
    nls();
    unaryExpression();
    if (inputState.guessing == 0) {
      astFactory.addASTChild(currentAST,returnAST);
    }
    if (inputState.guessing == 0) {
      unaryExpression_AST=(AST)currentAST.root;
    }
    break;
  }
case MINUS:
{
  AST tmp325_AST=null;
  if (inputState.guessing == 0) {
    tmp325_AST=astFactory.create(LT(1));
    astFactory.makeASTRoot(currentAST,tmp325_AST);
  }
  match(MINUS);
  if (inputState.guessing == 0) {
    tmp325_AST.setType(UNARY_MINUS);
  }
  nls();
  unaryExpression();
  if (inputState.guessing == 0) {
    astFactory.addASTChild(currentAST,returnAST);
  }
  if (inputState.guessing == 0) {
    unaryExpression_AST=(AST)currentAST.root;
  }
  break;
}
case PLUS:
{
AST tmp326_AST=null;
if (inputState.guessing == 0) {
  tmp326_AST=astFactory.create(LT(1));
  astFactory.makeASTRoot(currentAST,tmp326_AST);
}
match(PLUS);
if (inputState.guessing == 0) {
  tmp326_AST.setType(UNARY_PLUS);
}
nls();
unaryExpression();
if (inputState.guessing == 0) {
  astFactory.addASTChild(currentAST,returnAST);
}
if (inputState.guessing == 0) {
  unaryExpression_AST=(AST)currentAST.root;
}
break;
}
case IDENT:
case LBRACK:
case LPAREN:
case LITERAL_super:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case BNOT:
case LNOT:
case DOLLAR:
case STRING_CTOR_START:
case LITERAL_new:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
unaryExpressionNotPlusMinus();
if (inputState.guessing == 0) {
astFactory.addASTChild(currentAST,returnAST);
}
if (inputState.guessing == 0) {
unaryExpression_AST=(AST)currentAST.root;
}
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=unaryExpression_AST;
}
