{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST multiplicativeExpression_AST=null;
switch (LA(1)) {
case INC:
{
{
        AST tmp298_AST=null;
        tmp298_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp298_AST);
        match(INC);
        nls();
        powerExpression();
        astFactory.addASTChild(currentAST,returnAST);
{
          _loop403:           do {
            if ((_tokenSet_111.member(LA(1)))) {
{
switch (LA(1)) {
case STAR:
{
                    AST tmp299_AST=null;
                    tmp299_AST=astFactory.create(LT(1));
                    astFactory.makeASTRoot(currentAST,tmp299_AST);
                    match(STAR);
                    break;
                  }
case DIV:
{
                  AST tmp300_AST=null;
                  tmp300_AST=astFactory.create(LT(1));
                  astFactory.makeASTRoot(currentAST,tmp300_AST);
                  match(DIV);
                  break;
                }
case MOD:
{
                AST tmp301_AST=null;
                tmp301_AST=astFactory.create(LT(1));
                astFactory.makeASTRoot(currentAST,tmp301_AST);
                match(MOD);
                break;
              }
default :
{
              throw new NoViableAltException(LT(1),getFilename());
            }
        }
      }
      nls();
      powerExpression();
      astFactory.addASTChild(currentAST,returnAST);
    }
 else {
      break _loop403;
    }
  }
 while (true);
}
}
multiplicativeExpression_AST=(AST)currentAST.root;
break;
}
case DEC:
{
{
AST tmp302_AST=null;
tmp302_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp302_AST);
match(DEC);
nls();
powerExpression();
astFactory.addASTChild(currentAST,returnAST);
{
_loop407: do {
  if ((_tokenSet_111.member(LA(1)))) {
{
switch (LA(1)) {
case STAR:
{
          AST tmp303_AST=null;
          tmp303_AST=astFactory.create(LT(1));
          astFactory.makeASTRoot(currentAST,tmp303_AST);
          match(STAR);
          break;
        }
case DIV:
{
        AST tmp304_AST=null;
        tmp304_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp304_AST);
        match(DIV);
        break;
      }
case MOD:
{
      AST tmp305_AST=null;
      tmp305_AST=astFactory.create(LT(1));
      astFactory.makeASTRoot(currentAST,tmp305_AST);
      match(MOD);
      break;
    }
default :
{
    throw new NoViableAltException(LT(1),getFilename());
  }
}
}
nls();
powerExpression();
astFactory.addASTChild(currentAST,returnAST);
}
 else {
break _loop407;
}
}
 while (true);
}
}
multiplicativeExpression_AST=(AST)currentAST.root;
break;
}
case MINUS:
{
{
AST tmp306_AST=null;
tmp306_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp306_AST);
match(MINUS);
if (inputState.guessing == 0) {
tmp306_AST.setType(UNARY_MINUS);
}
nls();
powerExpression();
astFactory.addASTChild(currentAST,returnAST);
{
_loop411: do {
if ((_tokenSet_111.member(LA(1)))) {
{
switch (LA(1)) {
case STAR:
{
AST tmp307_AST=null;
tmp307_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp307_AST);
match(STAR);
break;
}
case DIV:
{
AST tmp308_AST=null;
tmp308_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp308_AST);
match(DIV);
break;
}
case MOD:
{
AST tmp309_AST=null;
tmp309_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp309_AST);
match(MOD);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
nls();
powerExpression();
astFactory.addASTChild(currentAST,returnAST);
}
 else {
break _loop411;
}
}
 while (true);
}
}
multiplicativeExpression_AST=(AST)currentAST.root;
break;
}
case PLUS:
{
{
AST tmp310_AST=null;
tmp310_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp310_AST);
match(PLUS);
if (inputState.guessing == 0) {
tmp310_AST.setType(UNARY_PLUS);
}
nls();
powerExpression();
astFactory.addASTChild(currentAST,returnAST);
{
_loop415: do {
if ((_tokenSet_111.member(LA(1)))) {
{
switch (LA(1)) {
case STAR:
{
AST tmp311_AST=null;
tmp311_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp311_AST);
match(STAR);
break;
}
case DIV:
{
AST tmp312_AST=null;
tmp312_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp312_AST);
match(DIV);
break;
}
case MOD:
{
AST tmp313_AST=null;
tmp313_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp313_AST);
match(MOD);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
nls();
powerExpression();
astFactory.addASTChild(currentAST,returnAST);
}
 else {
break _loop415;
}
}
 while (true);
}
}
multiplicativeExpression_AST=(AST)currentAST.root;
break;
}
case IDENT:
case LBRACK:
case LPAREN:
case LITERAL_super:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case BNOT:
case LNOT:
case STRING_CTOR_START:
case LITERAL_new:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
{
powerExpression();
astFactory.addASTChild(currentAST,returnAST);
{
_loop419: do {
if ((_tokenSet_111.member(LA(1)))) {
{
switch (LA(1)) {
case STAR:
{
AST tmp314_AST=null;
tmp314_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp314_AST);
match(STAR);
break;
}
case DIV:
{
AST tmp315_AST=null;
tmp315_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp315_AST);
match(DIV);
break;
}
case MOD:
{
AST tmp316_AST=null;
tmp316_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp316_AST);
match(MOD);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
nls();
powerExpression();
astFactory.addASTChild(currentAST,returnAST);
}
 else {
break _loop419;
}
}
 while (true);
}
}
multiplicativeExpression_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=multiplicativeExpression_AST;
}
