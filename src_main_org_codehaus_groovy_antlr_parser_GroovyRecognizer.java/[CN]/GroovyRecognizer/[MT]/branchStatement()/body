{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST branchStatement_AST=null;
switch (LA(1)) {
case LITERAL_return:
{
      AST tmp181_AST=null;
      if (inputState.guessing == 0) {
        tmp181_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp181_AST);
      }
      match(LITERAL_return);
{
switch (LA(1)) {
case IDENT:
case LBRACK:
case LPAREN:
case LITERAL_super:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case PLUS:
case MINUS:
case INC:
case DEC:
case BNOT:
case LNOT:
case DOLLAR:
case STRING_CTOR_START:
case LITERAL_new:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
            expression();
            if (inputState.guessing == 0) {
              astFactory.addASTChild(currentAST,returnAST);
            }
            break;
          }
case EOF:
case RBRACK:
case COMMA:
case RPAREN:
case RCURLY:
case SEMI:
case NLS:
case LITERAL_default:
case LITERAL_else:
case LITERAL_case:
{
          break;
        }
default :
{
        throw new NoViableAltException(LT(1),getFilename());
      }
  }
}
if (inputState.guessing == 0) {
  branchStatement_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_break:
case LITERAL_continue:
{
{
switch (LA(1)) {
case LITERAL_break:
{
    AST tmp182_AST=null;
    if (inputState.guessing == 0) {
      tmp182_AST=astFactory.create(LT(1));
      astFactory.makeASTRoot(currentAST,tmp182_AST);
    }
    match(LITERAL_break);
    break;
  }
case LITERAL_continue:
{
  AST tmp183_AST=null;
  if (inputState.guessing == 0) {
    tmp183_AST=astFactory.create(LT(1));
    astFactory.makeASTRoot(currentAST,tmp183_AST);
  }
  match(LITERAL_continue);
  break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
{
if ((LA(1) == IDENT) && (LA(2) == COLON) && (_tokenSet_102.member(LA(3)))) {
statementLabelPrefix();
if (inputState.guessing == 0) {
astFactory.addASTChild(currentAST,returnAST);
}
}
 else if ((_tokenSet_102.member(LA(1))) && (_tokenSet_17.member(LA(2))) && (_tokenSet_5.member(LA(3)))) {
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
{
switch (LA(1)) {
case IDENT:
case LBRACK:
case LPAREN:
case LITERAL_super:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case PLUS:
case MINUS:
case INC:
case DEC:
case BNOT:
case LNOT:
case DOLLAR:
case STRING_CTOR_START:
case LITERAL_new:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
expression();
if (inputState.guessing == 0) {
astFactory.addASTChild(currentAST,returnAST);
}
break;
}
case EOF:
case RBRACK:
case COMMA:
case RPAREN:
case RCURLY:
case SEMI:
case NLS:
case LITERAL_default:
case LITERAL_else:
case LITERAL_case:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
if (inputState.guessing == 0) {
branchStatement_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_throw:
{
AST tmp184_AST=null;
if (inputState.guessing == 0) {
tmp184_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp184_AST);
}
match(LITERAL_throw);
expression();
if (inputState.guessing == 0) {
astFactory.addASTChild(currentAST,returnAST);
}
if (inputState.guessing == 0) {
branchStatement_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_assert:
{
AST tmp185_AST=null;
if (inputState.guessing == 0) {
tmp185_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp185_AST);
}
match(LITERAL_assert);
expression();
if (inputState.guessing == 0) {
astFactory.addASTChild(currentAST,returnAST);
}
{
if ((LA(1) == COMMA) && (_tokenSet_18.member(LA(2))) && (_tokenSet_16.member(LA(3)))) {
match(COMMA);
expression();
if (inputState.guessing == 0) {
astFactory.addASTChild(currentAST,returnAST);
}
}
 else if ((_tokenSet_103.member(LA(1))) && (_tokenSet_17.member(LA(2))) && (_tokenSet_5.member(LA(3)))) {
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
if (inputState.guessing == 0) {
branchStatement_AST=(AST)currentAST.root;
}
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=branchStatement_AST;
}
