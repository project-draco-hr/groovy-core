{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST varInitializer_AST=null;
{
switch (LA(1)) {
case ASSIGN:
{
        AST tmp52_AST=null;
        tmp52_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp52_AST);
        match(ASSIGN);
        nls();
        initializer();
        astFactory.addASTChild(currentAST,returnAST);
        break;
      }
case EOF:
case FINAL:
case ABSTRACT:
case STRICTFP:
case DEF:
case LITERAL_static:
case AT:
case RBRACK:
case IDENT:
case RPAREN:
case LITERAL_class:
case LITERAL_interface:
case LITERAL_enum:
case COMMA:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case LCURLY:
case RCURLY:
case SEMI:
case LITERAL_default:
case BOR:
case COLON:
case LITERAL_else:
case LITERAL_case:
case NLS:
{
      break;
    }
default :
{
    throw new NoViableAltException(LT(1),getFilename());
  }
}
}
varInitializer_AST=(AST)currentAST.root;
returnAST=varInitializer_AST;
}
