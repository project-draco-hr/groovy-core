{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST listOrMapConstructorExpression_AST=null;
  Token lcon=null;
  AST lcon_AST=null;
  boolean hasLabels=false, hal;
  lcon=LT(1);
  lcon_AST=astFactory.create(lcon);
  astFactory.makeASTRoot(currentAST,lcon_AST);
  match(LBRACK);
{
switch (LA(1)) {
case COLON:
{
        match(COLON);
        if (inputState.guessing == 0) {
          hasLabels|=true;
        }
        break;
      }
case FINAL:
case ABSTRACT:
case STRICTFP:
case DEF:
case LITERAL_static:
case AT:
case LBRACK:
case RBRACK:
case IDENT:
case LPAREN:
case LITERAL_class:
case QUESTION:
case LITERAL_super:
case COMMA:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case STAR:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case LITERAL_in:
case LITERAL_return:
case LITERAL_break:
case LITERAL_continue:
case LITERAL_throw:
case LITERAL_assert:
case INC:
case DEC:
case PLUS:
case MINUS:
case BNOT:
case LNOT:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case STRING_CTOR_START:
case LITERAL_new:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
      break;
    }
default :
{
    throw new NoViableAltException(LT(1),getFilename());
  }
}
}
hal=argList();
astFactory.addASTChild(currentAST,returnAST);
if (inputState.guessing == 0) {
hasLabels|=hal;
}
match(RBRACK);
if (inputState.guessing == 0) {
lcon_AST.setType(hasLabels ? MAP_CONSTRUCTOR : LIST_CONSTRUCTOR);
}
listOrMapConstructorExpression_AST=(AST)currentAST.root;
returnAST=listOrMapConstructorExpression_AST;
}
