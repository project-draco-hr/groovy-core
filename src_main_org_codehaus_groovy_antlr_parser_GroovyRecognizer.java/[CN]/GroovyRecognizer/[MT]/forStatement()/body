{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST forStatement_AST=null;
  Token f=null;
  AST f_AST=null;
  f=LT(1);
  f_AST=astFactory.create(f);
  astFactory.makeASTRoot(currentAST,f_AST);
  match(LITERAL_for);
  match(LPAREN);
{
    boolean synPredMatched269=false;
    if (((_tokenSet_95.member(LA(1))) && (_tokenSet_96.member(LA(2))) && (_tokenSet_97.member(LA(3))))) {
      int _m269=mark();
      synPredMatched269=true;
      inputState.guessing++;
      try {
{
          forInit();
          match(SEMI);
        }
      }
 catch (      RecognitionException pe) {
        synPredMatched269=false;
      }
      rewind(_m269);
      inputState.guessing--;
    }
    if (synPredMatched269) {
      traditionalForClause();
      astFactory.addASTChild(currentAST,returnAST);
    }
 else     if ((_tokenSet_11.member(LA(1))) && (_tokenSet_98.member(LA(2))) && (_tokenSet_99.member(LA(3)))) {
      forInClause();
      astFactory.addASTChild(currentAST,returnAST);
    }
 else {
      throw new NoViableAltException(LT(1),getFilename());
    }
  }
  match(RPAREN);
  nlsWarn();
  compatibleBodyStatement();
  astFactory.addASTChild(currentAST,returnAST);
  forStatement_AST=(AST)currentAST.root;
  returnAST=forStatement_AST;
}
