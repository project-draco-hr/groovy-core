{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST typeArgumentBounds_AST=null;
  boolean isUpperBounds=false;
{
switch (LA(1)) {
case LITERAL_extends:
{
        match(LITERAL_extends);
        if (inputState.guessing == 0) {
          isUpperBounds=true;
        }
        break;
      }
case LITERAL_super:
{
      match(LITERAL_super);
      break;
    }
default :
{
    throw new NoViableAltException(LT(1),getFilename());
  }
}
}
nls();
classOrInterfaceType(false);
if (inputState.guessing == 0) {
astFactory.addASTChild(currentAST,returnAST);
}
nls();
if (inputState.guessing == 0) {
typeArgumentBounds_AST=(AST)currentAST.root;
if (isUpperBounds) {
typeArgumentBounds_AST=(AST)astFactory.make((new ASTArray(2)).add(astFactory.create(TYPE_UPPER_BOUNDS,"TYPE_UPPER_BOUNDS")).add(typeArgumentBounds_AST));
}
 else {
typeArgumentBounds_AST=(AST)astFactory.make((new ASTArray(2)).add(astFactory.create(TYPE_LOWER_BOUNDS,"TYPE_LOWER_BOUNDS")).add(typeArgumentBounds_AST));
}
currentAST.root=typeArgumentBounds_AST;
currentAST.child=typeArgumentBounds_AST != null && typeArgumentBounds_AST.getFirstChild() != null ? typeArgumentBounds_AST.getFirstChild() : typeArgumentBounds_AST;
currentAST.advanceChildToEnd();
}
if (inputState.guessing == 0) {
typeArgumentBounds_AST=(AST)currentAST.root;
}
returnAST=typeArgumentBounds_AST;
}
