{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST classField_AST=null;
  AST mc_AST=null;
  AST ctor_AST=null;
  AST d_AST=null;
  AST mods_AST=null;
  AST td_AST=null;
  AST s3_AST=null;
  AST s4_AST=null;
  boolean synPredMatched164=false;
  if (((_tokenSet_56.member(LA(1))) && (_tokenSet_57.member(LA(2))) && (_tokenSet_58.member(LA(3))))) {
    int _m164=mark();
    synPredMatched164=true;
    inputState.guessing++;
    try {
{
        constructorStart();
      }
    }
 catch (    RecognitionException pe) {
      synPredMatched164=false;
    }
    rewind(_m164);
    inputState.guessing--;
  }
  if (synPredMatched164) {
    modifiersOpt();
    if (inputState.guessing == 0) {
      mc_AST=(AST)returnAST;
    }
    constructorDefinition(mc_AST);
    if (inputState.guessing == 0) {
      ctor_AST=(AST)returnAST;
    }
    if (inputState.guessing == 0) {
      classField_AST=(AST)currentAST.root;
      classField_AST=ctor_AST;
      currentAST.root=classField_AST;
      currentAST.child=classField_AST != null && classField_AST.getFirstChild() != null ? classField_AST.getFirstChild() : classField_AST;
      currentAST.advanceChildToEnd();
    }
  }
 else {
    boolean synPredMatched166=false;
    if (((_tokenSet_11.member(LA(1))) && (_tokenSet_12.member(LA(2))) && (_tokenSet_59.member(LA(3))))) {
      int _m166=mark();
      synPredMatched166=true;
      inputState.guessing++;
      try {
{
          declarationStart();
        }
      }
 catch (      RecognitionException pe) {
        synPredMatched166=false;
      }
      rewind(_m166);
      inputState.guessing--;
    }
    if (synPredMatched166) {
      declaration();
      if (inputState.guessing == 0) {
        d_AST=(AST)returnAST;
      }
      if (inputState.guessing == 0) {
        classField_AST=(AST)currentAST.root;
        classField_AST=d_AST;
        currentAST.root=classField_AST;
        currentAST.child=classField_AST != null && classField_AST.getFirstChild() != null ? classField_AST.getFirstChild() : classField_AST;
        currentAST.advanceChildToEnd();
      }
    }
 else {
      boolean synPredMatched168=false;
      if (((_tokenSet_20.member(LA(1))) && (_tokenSet_21.member(LA(2))) && (_tokenSet_22.member(LA(3))))) {
        int _m168=mark();
        synPredMatched168=true;
        inputState.guessing++;
        try {
{
            typeDeclarationStart();
          }
        }
 catch (        RecognitionException pe) {
          synPredMatched168=false;
        }
        rewind(_m168);
        inputState.guessing--;
      }
      if (synPredMatched168) {
        modifiersOpt();
        if (inputState.guessing == 0) {
          mods_AST=(AST)returnAST;
        }
{
          typeDefinitionInternal(mods_AST);
          if (inputState.guessing == 0) {
            td_AST=(AST)returnAST;
          }
          if (inputState.guessing == 0) {
            classField_AST=(AST)currentAST.root;
            classField_AST=td_AST;
            currentAST.root=classField_AST;
            currentAST.child=classField_AST != null && classField_AST.getFirstChild() != null ? classField_AST.getFirstChild() : classField_AST;
            currentAST.advanceChildToEnd();
          }
        }
      }
 else       if ((LA(1) == LITERAL_static) && (LA(2) == LCURLY)) {
        match(LITERAL_static);
        compoundStatement();
        if (inputState.guessing == 0) {
          s3_AST=(AST)returnAST;
        }
        if (inputState.guessing == 0) {
          classField_AST=(AST)currentAST.root;
          classField_AST=(AST)astFactory.make((new ASTArray(2)).add(astFactory.create(STATIC_INIT,"STATIC_INIT")).add(s3_AST));
          currentAST.root=classField_AST;
          currentAST.child=classField_AST != null && classField_AST.getFirstChild() != null ? classField_AST.getFirstChild() : classField_AST;
          currentAST.advanceChildToEnd();
        }
      }
 else       if ((LA(1) == LCURLY)) {
        compoundStatement();
        if (inputState.guessing == 0) {
          s4_AST=(AST)returnAST;
        }
        if (inputState.guessing == 0) {
          classField_AST=(AST)currentAST.root;
          classField_AST=(AST)astFactory.make((new ASTArray(2)).add(astFactory.create(INSTANCE_INIT,"INSTANCE_INIT")).add(s4_AST));
          currentAST.root=classField_AST;
          currentAST.child=classField_AST != null && classField_AST.getFirstChild() != null ? classField_AST.getFirstChild() : classField_AST;
          currentAST.advanceChildToEnd();
        }
      }
 else {
        throw new NoViableAltException(LT(1),getFilename());
      }
    }
  }
  returnAST=classField_AST;
}
