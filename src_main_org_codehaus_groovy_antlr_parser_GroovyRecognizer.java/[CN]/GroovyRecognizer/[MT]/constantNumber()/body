{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST constantNumber_AST=null;
switch (LA(1)) {
case NUM_INT:
{
      AST tmp340_AST=null;
      tmp340_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp340_AST);
      match(NUM_INT);
      constantNumber_AST=(AST)currentAST.root;
      break;
    }
case NUM_FLOAT:
{
    AST tmp341_AST=null;
    tmp341_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp341_AST);
    match(NUM_FLOAT);
    constantNumber_AST=(AST)currentAST.root;
    break;
  }
case NUM_LONG:
{
  AST tmp342_AST=null;
  tmp342_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp342_AST);
  match(NUM_LONG);
  constantNumber_AST=(AST)currentAST.root;
  break;
}
case NUM_DOUBLE:
{
AST tmp343_AST=null;
tmp343_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp343_AST);
match(NUM_DOUBLE);
constantNumber_AST=(AST)currentAST.root;
break;
}
case NUM_BIG_INT:
{
AST tmp344_AST=null;
tmp344_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp344_AST);
match(NUM_BIG_INT);
constantNumber_AST=(AST)currentAST.root;
break;
}
case NUM_BIG_DECIMAL:
{
AST tmp345_AST=null;
tmp345_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp345_AST);
match(NUM_BIG_DECIMAL);
constantNumber_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=constantNumber_AST;
}
