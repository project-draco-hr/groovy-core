{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST newExpression_AST=null;
  boolean zz;
  AST tmp330_AST=null;
  tmp330_AST=astFactory.create(LT(1));
  astFactory.makeASTRoot(currentAST,tmp330_AST);
  match(LITERAL_new);
{
switch (LA(1)) {
case LT:
{
        typeArguments();
        astFactory.addASTChild(currentAST,returnAST);
        break;
      }
case IDENT:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
{
      break;
    }
default :
{
    throw new NoViableAltException(LT(1),getFilename());
  }
}
}
type();
astFactory.addASTChild(currentAST,returnAST);
{
switch (LA(1)) {
case LPAREN:
{
  match(LPAREN);
  zz=argList();
  astFactory.addASTChild(currentAST,returnAST);
  match(RPAREN);
  break;
}
case LBRACK:
{
newArrayDeclarator();
astFactory.addASTChild(currentAST,returnAST);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
newExpression_AST=(AST)currentAST.root;
returnAST=newExpression_AST;
}
