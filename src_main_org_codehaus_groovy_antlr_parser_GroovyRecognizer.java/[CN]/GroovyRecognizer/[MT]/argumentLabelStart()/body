{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST argumentLabelStart_AST=null;
{
switch (LA(1)) {
case IDENT:
{
        AST tmp335_AST=null;
        tmp335_AST=astFactory.create(LT(1));
        match(IDENT);
        break;
      }
case UNUSED_DO:
case LITERAL_def:
case LITERAL_class:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case LITERAL_as:
case LITERAL_if:
case LITERAL_else:
case LITERAL_while:
case LITERAL_switch:
case LITERAL_for:
case LITERAL_in:
case LITERAL_try:
case LITERAL_finally:
case LITERAL_catch:
{
      keywordPropertyNames();
      break;
    }
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
    constantNumber();
    break;
  }
case STRING_LITERAL:
{
  AST tmp336_AST=null;
  tmp336_AST=astFactory.create(LT(1));
  match(STRING_LITERAL);
  break;
}
case LBRACK:
case LPAREN:
case LCURLY:
case STRING_CTOR_START:
{
balancedBrackets();
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
AST tmp337_AST=null;
tmp337_AST=astFactory.create(LT(1));
match(COLON);
returnAST=argumentLabelStart_AST;
}
