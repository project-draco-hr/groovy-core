{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST unaryExpressionNotPlusMinus_AST=null;
  Token lpb=null;
  AST lpb_AST=null;
  Token lp=null;
  AST lp_AST=null;
switch (LA(1)) {
case BNOT:
{
      AST tmp319_AST=null;
      if (inputState.guessing == 0) {
        tmp319_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp319_AST);
      }
      match(BNOT);
      nls();
      unaryExpression();
      if (inputState.guessing == 0) {
        astFactory.addASTChild(currentAST,returnAST);
      }
      if (inputState.guessing == 0) {
        unaryExpressionNotPlusMinus_AST=(AST)currentAST.root;
      }
      break;
    }
case LNOT:
{
    AST tmp320_AST=null;
    if (inputState.guessing == 0) {
      tmp320_AST=astFactory.create(LT(1));
      astFactory.makeASTRoot(currentAST,tmp320_AST);
    }
    match(LNOT);
    nls();
    unaryExpression();
    if (inputState.guessing == 0) {
      astFactory.addASTChild(currentAST,returnAST);
    }
    if (inputState.guessing == 0) {
      unaryExpressionNotPlusMinus_AST=(AST)currentAST.root;
    }
    break;
  }
case IDENT:
case LBRACK:
case LPAREN:
case LITERAL_super:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case DOLLAR:
case STRING_CTOR_START:
case LITERAL_new:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
{
    boolean synPredMatched428=false;
    if (((LA(1) == LPAREN) && ((LA(2) >= LITERAL_void && LA(2) <= LITERAL_any)) && (LA(3) == LBRACK || LA(3) == RPAREN))) {
      int _m428=mark();
      synPredMatched428=true;
      inputState.guessing++;
      try {
{
          match(LPAREN);
          builtInTypeSpec(true);
          match(RPAREN);
          unaryExpression();
        }
      }
 catch (      RecognitionException pe) {
        synPredMatched428=false;
      }
      rewind(_m428);
      inputState.guessing--;
    }
    if (synPredMatched428) {
      lpb=LT(1);
      if (inputState.guessing == 0) {
        lpb_AST=astFactory.create(lpb);
        astFactory.makeASTRoot(currentAST,lpb_AST);
      }
      match(LPAREN);
      if (inputState.guessing == 0) {
        lpb_AST.setType(TYPECAST);
      }
      builtInTypeSpec(true);
      if (inputState.guessing == 0) {
        astFactory.addASTChild(currentAST,returnAST);
      }
      match(RPAREN);
      unaryExpression();
      if (inputState.guessing == 0) {
        astFactory.addASTChild(currentAST,returnAST);
      }
    }
 else {
      boolean synPredMatched430=false;
      if (((LA(1) == LPAREN) && (LA(2) == IDENT) && (_tokenSet_113.member(LA(3))))) {
        int _m430=mark();
        synPredMatched430=true;
        inputState.guessing++;
        try {
{
            match(LPAREN);
            classTypeSpec(true);
            match(RPAREN);
            unaryExpressionNotPlusMinus();
          }
        }
 catch (        RecognitionException pe) {
          synPredMatched430=false;
        }
        rewind(_m430);
        inputState.guessing--;
      }
      if (synPredMatched430) {
        lp=LT(1);
        if (inputState.guessing == 0) {
          lp_AST=astFactory.create(lp);
          astFactory.makeASTRoot(currentAST,lp_AST);
        }
        match(LPAREN);
        if (inputState.guessing == 0) {
          lp_AST.setType(TYPECAST);
        }
        classTypeSpec(true);
        if (inputState.guessing == 0) {
          astFactory.addASTChild(currentAST,returnAST);
        }
        match(RPAREN);
        unaryExpressionNotPlusMinus();
        if (inputState.guessing == 0) {
          astFactory.addASTChild(currentAST,returnAST);
        }
      }
 else       if ((_tokenSet_114.member(LA(1))) && (_tokenSet_16.member(LA(2))) && (_tokenSet_5.member(LA(3)))) {
        postfixExpression();
        if (inputState.guessing == 0) {
          astFactory.addASTChild(currentAST,returnAST);
        }
      }
 else {
        throw new NoViableAltException(LT(1),getFilename());
      }
    }
  }
  if (inputState.guessing == 0) {
    unaryExpressionNotPlusMinus_AST=(AST)currentAST.root;
  }
  break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=unaryExpressionNotPlusMinus_AST;
}
