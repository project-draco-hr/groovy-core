{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST primaryExpression_AST=null;
switch (LA(1)) {
case IDENT:
{
      AST tmp251_AST=null;
      if (inputState.guessing == 0) {
        tmp251_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp251_AST);
      }
      match(IDENT);
      if (inputState.guessing == 0) {
        primaryExpression_AST=(AST)currentAST.root;
      }
      break;
    }
case STRING_LITERAL:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
    constant();
    if (inputState.guessing == 0) {
      astFactory.addASTChild(currentAST,returnAST);
    }
    if (inputState.guessing == 0) {
      primaryExpression_AST=(AST)currentAST.root;
    }
    break;
  }
case LITERAL_new:
{
  newExpression();
  if (inputState.guessing == 0) {
    astFactory.addASTChild(currentAST,returnAST);
  }
  if (inputState.guessing == 0) {
    primaryExpression_AST=(AST)currentAST.root;
  }
  break;
}
case LITERAL_this:
{
AST tmp252_AST=null;
if (inputState.guessing == 0) {
  tmp252_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp252_AST);
}
match(LITERAL_this);
if (inputState.guessing == 0) {
  primaryExpression_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_super:
{
AST tmp253_AST=null;
if (inputState.guessing == 0) {
tmp253_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp253_AST);
}
match(LITERAL_super);
if (inputState.guessing == 0) {
primaryExpression_AST=(AST)currentAST.root;
}
break;
}
case LPAREN:
{
parenthesizedExpression();
if (inputState.guessing == 0) {
astFactory.addASTChild(currentAST,returnAST);
}
if (inputState.guessing == 0) {
primaryExpression_AST=(AST)currentAST.root;
}
break;
}
case STRING_CTOR_START:
{
stringConstructorExpression();
if (inputState.guessing == 0) {
astFactory.addASTChild(currentAST,returnAST);
}
if (inputState.guessing == 0) {
primaryExpression_AST=(AST)currentAST.root;
}
break;
}
case DOLLAR:
{
scopeEscapeExpression();
if (inputState.guessing == 0) {
astFactory.addASTChild(currentAST,returnAST);
}
if (inputState.guessing == 0) {
primaryExpression_AST=(AST)currentAST.root;
}
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=primaryExpression_AST;
}
