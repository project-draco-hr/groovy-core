{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST identifierStar_AST=null;
  AST tmp31_AST=null;
  tmp31_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp31_AST);
  match(IDENT);
{
    _loop71:     do {
      if ((LA(1) == DOT) && (LA(2) == IDENT || LA(2) == NLS) && (_tokenSet_31.member(LA(3)))) {
        AST tmp32_AST=null;
        tmp32_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp32_AST);
        match(DOT);
        nls();
        AST tmp33_AST=null;
        tmp33_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp33_AST);
        match(IDENT);
      }
 else {
        break _loop71;
      }
    }
 while (true);
  }
{
switch (LA(1)) {
case DOT:
{
        AST tmp34_AST=null;
        tmp34_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp34_AST);
        match(DOT);
        nls();
        AST tmp35_AST=null;
        tmp35_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp35_AST);
        match(STAR);
        break;
      }
case LITERAL_as:
{
      AST tmp36_AST=null;
      tmp36_AST=astFactory.create(LT(1));
      astFactory.makeASTRoot(currentAST,tmp36_AST);
      match(LITERAL_as);
      nls();
      AST tmp37_AST=null;
      tmp37_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp37_AST);
      match(IDENT);
      break;
    }
case EOF:
case RCURLY:
case SEMI:
case LITERAL_default:
case LITERAL_else:
case LITERAL_case:
case NLS:
{
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
}
identifierStar_AST=(AST)currentAST.root;
returnAST=identifierStar_AST;
}
