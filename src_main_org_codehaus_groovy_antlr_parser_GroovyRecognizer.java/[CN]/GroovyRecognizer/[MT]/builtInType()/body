{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST builtInType_AST=null;
switch (LA(1)) {
case LITERAL_void:
{
      AST tmp71_AST=null;
      if (inputState.guessing == 0) {
        tmp71_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp71_AST);
      }
      match(LITERAL_void);
      if (inputState.guessing == 0) {
        builtInType_AST=(AST)currentAST.root;
      }
      break;
    }
case LITERAL_boolean:
{
    AST tmp72_AST=null;
    if (inputState.guessing == 0) {
      tmp72_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp72_AST);
    }
    match(LITERAL_boolean);
    if (inputState.guessing == 0) {
      builtInType_AST=(AST)currentAST.root;
    }
    break;
  }
case LITERAL_byte:
{
  AST tmp73_AST=null;
  if (inputState.guessing == 0) {
    tmp73_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp73_AST);
  }
  match(LITERAL_byte);
  if (inputState.guessing == 0) {
    builtInType_AST=(AST)currentAST.root;
  }
  break;
}
case LITERAL_char:
{
AST tmp74_AST=null;
if (inputState.guessing == 0) {
  tmp74_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp74_AST);
}
match(LITERAL_char);
if (inputState.guessing == 0) {
  builtInType_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_short:
{
AST tmp75_AST=null;
if (inputState.guessing == 0) {
tmp75_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp75_AST);
}
match(LITERAL_short);
if (inputState.guessing == 0) {
builtInType_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_int:
{
AST tmp76_AST=null;
if (inputState.guessing == 0) {
tmp76_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp76_AST);
}
match(LITERAL_int);
if (inputState.guessing == 0) {
builtInType_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_float:
{
AST tmp77_AST=null;
if (inputState.guessing == 0) {
tmp77_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp77_AST);
}
match(LITERAL_float);
if (inputState.guessing == 0) {
builtInType_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_long:
{
AST tmp78_AST=null;
if (inputState.guessing == 0) {
tmp78_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp78_AST);
}
match(LITERAL_long);
if (inputState.guessing == 0) {
builtInType_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_double:
{
AST tmp79_AST=null;
if (inputState.guessing == 0) {
tmp79_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp79_AST);
}
match(LITERAL_double);
if (inputState.guessing == 0) {
builtInType_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_any:
{
AST tmp80_AST=null;
if (inputState.guessing == 0) {
tmp80_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp80_AST);
}
match(LITERAL_any);
if (inputState.guessing == 0) {
builtInType_AST=(AST)currentAST.root;
}
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=builtInType_AST;
}
