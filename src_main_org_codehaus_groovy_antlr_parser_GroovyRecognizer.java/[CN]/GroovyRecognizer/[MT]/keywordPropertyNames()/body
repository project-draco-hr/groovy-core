{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST keywordPropertyNames_AST=null;
{
switch (LA(1)) {
case LITERAL_class:
{
        AST tmp266_AST=null;
        if (inputState.guessing == 0) {
          tmp266_AST=astFactory.create(LT(1));
          astFactory.addASTChild(currentAST,tmp266_AST);
        }
        match(LITERAL_class);
        break;
      }
case LITERAL_in:
{
      AST tmp267_AST=null;
      if (inputState.guessing == 0) {
        tmp267_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp267_AST);
      }
      match(LITERAL_in);
      break;
    }
case LITERAL_as:
{
    AST tmp268_AST=null;
    if (inputState.guessing == 0) {
      tmp268_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp268_AST);
    }
    match(LITERAL_as);
    break;
  }
case LITERAL_def:
{
  AST tmp269_AST=null;
  if (inputState.guessing == 0) {
    tmp269_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp269_AST);
  }
  match(LITERAL_def);
  break;
}
case LITERAL_if:
{
AST tmp270_AST=null;
if (inputState.guessing == 0) {
  tmp270_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp270_AST);
}
match(LITERAL_if);
break;
}
case LITERAL_else:
{
AST tmp271_AST=null;
if (inputState.guessing == 0) {
tmp271_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp271_AST);
}
match(LITERAL_else);
break;
}
case LITERAL_for:
{
AST tmp272_AST=null;
if (inputState.guessing == 0) {
tmp272_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp272_AST);
}
match(LITERAL_for);
break;
}
case LITERAL_while:
{
AST tmp273_AST=null;
if (inputState.guessing == 0) {
tmp273_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp273_AST);
}
match(LITERAL_while);
break;
}
case UNUSED_DO:
{
AST tmp274_AST=null;
if (inputState.guessing == 0) {
tmp274_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp274_AST);
}
match(UNUSED_DO);
break;
}
case LITERAL_switch:
{
AST tmp275_AST=null;
if (inputState.guessing == 0) {
tmp275_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp275_AST);
}
match(LITERAL_switch);
break;
}
case LITERAL_try:
{
AST tmp276_AST=null;
if (inputState.guessing == 0) {
tmp276_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp276_AST);
}
match(LITERAL_try);
break;
}
case LITERAL_catch:
{
AST tmp277_AST=null;
if (inputState.guessing == 0) {
tmp277_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp277_AST);
}
match(LITERAL_catch);
break;
}
case LITERAL_finally:
{
AST tmp278_AST=null;
if (inputState.guessing == 0) {
tmp278_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp278_AST);
}
match(LITERAL_finally);
break;
}
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
{
builtInType();
if (inputState.guessing == 0) {
astFactory.addASTChild(currentAST,returnAST);
}
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
if (inputState.guessing == 0) {
keywordPropertyNames_AST=(AST)currentAST.root;
keywordPropertyNames_AST.setType(IDENT);
}
if (inputState.guessing == 0) {
keywordPropertyNames_AST=(AST)currentAST.root;
}
returnAST=keywordPropertyNames_AST;
}
