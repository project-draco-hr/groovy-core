{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST keywordPropertyNames_AST=null;
{
switch (LA(1)) {
case LITERAL_class:
{
        AST tmp275_AST=null;
        tmp275_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp275_AST);
        match(LITERAL_class);
        break;
      }
case LITERAL_in:
{
      AST tmp276_AST=null;
      tmp276_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp276_AST);
      match(LITERAL_in);
      break;
    }
case DEF:
{
    AST tmp277_AST=null;
    tmp277_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp277_AST);
    match(DEF);
    break;
  }
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
{
  builtInType();
  astFactory.addASTChild(currentAST,returnAST);
  break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
if (inputState.guessing == 0) {
keywordPropertyNames_AST=(AST)currentAST.root;
keywordPropertyNames_AST.setType(IDENT);
}
keywordPropertyNames_AST=(AST)currentAST.root;
returnAST=keywordPropertyNames_AST;
}
