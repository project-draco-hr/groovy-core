{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST checkSuspiciousExpressionStatement_AST=null;
  boolean synPredMatched294=false;
  if (((_tokenSet_18.member(LA(1))) && (_tokenSet_8.member(LA(2))) && (_tokenSet_19.member(LA(3))))) {
    int _m294=mark();
    synPredMatched294=true;
    inputState.guessing++;
    try {
{
        if ((_tokenSet_106.member(LA(1)))) {
          matchNot(LCURLY);
        }
 else         if ((LA(1) == LCURLY)) {
          match(LCURLY);
          closureParametersStart();
        }
 else {
          throw new NoViableAltException(LT(1),getFilename());
        }
      }
    }
 catch (    RecognitionException pe) {
      synPredMatched294=false;
    }
    rewind(_m294);
    inputState.guessing--;
  }
  if (synPredMatched294) {
{
      if (((_tokenSet_18.member(LA(1))) && (_tokenSet_8.member(LA(2))) && (_tokenSet_19.member(LA(3)))) && (prevToken == NLS)) {
        if (inputState.guessing == 0) {
          addWarning("Expression statement looks like it may continue a previous statement.","Either remove previous newline, or add an explicit semicolon ';'.");
        }
      }
 else       if ((_tokenSet_18.member(LA(1))) && (_tokenSet_8.member(LA(2))) && (_tokenSet_19.member(LA(3)))) {
      }
 else {
        throw new NoViableAltException(LT(1),getFilename());
      }
    }
    if (inputState.guessing == 0) {
      checkSuspiciousExpressionStatement_AST=(AST)currentAST.root;
    }
  }
 else   if (((_tokenSet_18.member(LA(1))) && (_tokenSet_8.member(LA(2))) && (_tokenSet_19.member(LA(3)))) && (prevToken == NLS)) {
    if (inputState.guessing == 0) {
      require(false,"Closure expression looks like it may be an isolated open block, " + "or it may continue a previous statement.","Add an explicit parameter list, as in {it -> ...}, or label it as L:{...}, " + "and also either remove previous newline, or add an explicit semicolon ';'.");
    }
    if (inputState.guessing == 0) {
      checkSuspiciousExpressionStatement_AST=(AST)currentAST.root;
    }
  }
 else   if (((_tokenSet_18.member(LA(1))) && (_tokenSet_8.member(LA(2))) && (_tokenSet_19.member(LA(3)))) && (prevToken != NLS)) {
    if (inputState.guessing == 0) {
      require(false,"Closure expression looks like it may be an isolated open block.","Add an explicit parameter list, as in {it -> ...}, or label it as L:{...}.");
    }
    if (inputState.guessing == 0) {
      checkSuspiciousExpressionStatement_AST=(AST)currentAST.root;
    }
  }
 else {
    throw new NoViableAltException(LT(1),getFilename());
  }
  returnAST=checkSuspiciousExpressionStatement_AST;
}
