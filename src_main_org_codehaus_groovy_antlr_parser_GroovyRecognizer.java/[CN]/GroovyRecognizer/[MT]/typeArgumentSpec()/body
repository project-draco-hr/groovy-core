{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST typeArgumentSpec_AST=null;
switch (LA(1)) {
case IDENT:
{
      classTypeSpec(true);
      if (inputState.guessing == 0) {
        astFactory.addASTChild(currentAST,returnAST);
      }
      if (inputState.guessing == 0) {
        typeArgumentSpec_AST=(AST)currentAST.root;
      }
      break;
    }
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
{
    builtInTypeArraySpec(true);
    if (inputState.guessing == 0) {
      astFactory.addASTChild(currentAST,returnAST);
    }
    if (inputState.guessing == 0) {
      typeArgumentSpec_AST=(AST)currentAST.root;
    }
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=typeArgumentSpec_AST;
}
