{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST annotationField_AST=null;
  AST mods_AST=null;
  AST td_AST=null;
  AST t_AST=null;
  Token i=null;
  AST i_AST=null;
  AST amvi_AST=null;
  AST v_AST=null;
  modifiersOpt();
  mods_AST=(AST)returnAST;
{
switch (LA(1)) {
case AT:
case LITERAL_class:
case LITERAL_interface:
case LITERAL_enum:
{
        typeDefinitionInternal(mods_AST);
        td_AST=(AST)returnAST;
        if (inputState.guessing == 0) {
          annotationField_AST=(AST)currentAST.root;
          annotationField_AST=td_AST;
          currentAST.root=annotationField_AST;
          currentAST.child=annotationField_AST != null && annotationField_AST.getFirstChild() != null ? annotationField_AST.getFirstChild() : annotationField_AST;
          currentAST.advanceChildToEnd();
        }
        break;
      }
case IDENT:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
{
      typeSpec(false);
      t_AST=(AST)returnAST;
{
        boolean synPredMatched137=false;
        if (((LA(1) == IDENT) && (LA(2) == LPAREN) && (LA(3) == RPAREN))) {
          int _m137=mark();
          synPredMatched137=true;
          inputState.guessing++;
          try {
{
              match(IDENT);
              match(LPAREN);
            }
          }
 catch (          RecognitionException pe) {
            synPredMatched137=false;
          }
          rewind(_m137);
          inputState.guessing--;
        }
        if (synPredMatched137) {
          i=LT(1);
          i_AST=astFactory.create(i);
          match(IDENT);
          match(LPAREN);
          match(RPAREN);
{
switch (LA(1)) {
case LITERAL_default:
{
                match(LITERAL_default);
                nls();
                annotationMemberValueInitializer();
                amvi_AST=(AST)returnAST;
                break;
              }
case RCURLY:
case SEMI:
case NLS:
{
              break;
            }
default :
{
            throw new NoViableAltException(LT(1),getFilename());
          }
      }
    }
    if (inputState.guessing == 0) {
      annotationField_AST=(AST)currentAST.root;
      annotationField_AST=(AST)astFactory.make((new ASTArray(5)).add(astFactory.create(ANNOTATION_FIELD_DEF,"ANNOTATION_FIELD_DEF")).add(mods_AST).add((AST)astFactory.make((new ASTArray(2)).add(astFactory.create(TYPE,"TYPE")).add(t_AST))).add(i_AST).add(amvi_AST));
      currentAST.root=annotationField_AST;
      currentAST.child=annotationField_AST != null && annotationField_AST.getFirstChild() != null ? annotationField_AST.getFirstChild() : annotationField_AST;
      currentAST.advanceChildToEnd();
    }
  }
 else   if ((LA(1) == IDENT || LA(1) == STRING_LITERAL) && (_tokenSet_62.member(LA(2))) && (_tokenSet_63.member(LA(3)))) {
    variableDefinitions(mods_AST,t_AST);
    v_AST=(AST)returnAST;
    if (inputState.guessing == 0) {
      annotationField_AST=(AST)currentAST.root;
      annotationField_AST=v_AST;
      currentAST.root=annotationField_AST;
      currentAST.child=annotationField_AST != null && annotationField_AST.getFirstChild() != null ? annotationField_AST.getFirstChild() : annotationField_AST;
      currentAST.advanceChildToEnd();
    }
  }
 else {
    throw new NoViableAltException(LT(1),getFilename());
  }
}
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
returnAST=annotationField_AST;
}
