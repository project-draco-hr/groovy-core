{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST modifier_AST=null;
switch (LA(1)) {
case LITERAL_private:
{
      AST tmp58_AST=null;
      if (inputState.guessing == 0) {
        tmp58_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp58_AST);
      }
      match(LITERAL_private);
      if (inputState.guessing == 0) {
        modifier_AST=(AST)currentAST.root;
      }
      break;
    }
case LITERAL_public:
{
    AST tmp59_AST=null;
    if (inputState.guessing == 0) {
      tmp59_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp59_AST);
    }
    match(LITERAL_public);
    if (inputState.guessing == 0) {
      modifier_AST=(AST)currentAST.root;
    }
    break;
  }
case LITERAL_protected:
{
  AST tmp60_AST=null;
  if (inputState.guessing == 0) {
    tmp60_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp60_AST);
  }
  match(LITERAL_protected);
  if (inputState.guessing == 0) {
    modifier_AST=(AST)currentAST.root;
  }
  break;
}
case LITERAL_static:
{
AST tmp61_AST=null;
if (inputState.guessing == 0) {
  tmp61_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp61_AST);
}
match(LITERAL_static);
if (inputState.guessing == 0) {
  modifier_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_transient:
{
AST tmp62_AST=null;
if (inputState.guessing == 0) {
tmp62_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp62_AST);
}
match(LITERAL_transient);
if (inputState.guessing == 0) {
modifier_AST=(AST)currentAST.root;
}
break;
}
case FINAL:
{
AST tmp63_AST=null;
if (inputState.guessing == 0) {
tmp63_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp63_AST);
}
match(FINAL);
if (inputState.guessing == 0) {
modifier_AST=(AST)currentAST.root;
}
break;
}
case ABSTRACT:
{
AST tmp64_AST=null;
if (inputState.guessing == 0) {
tmp64_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp64_AST);
}
match(ABSTRACT);
if (inputState.guessing == 0) {
modifier_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_native:
{
AST tmp65_AST=null;
if (inputState.guessing == 0) {
tmp65_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp65_AST);
}
match(LITERAL_native);
if (inputState.guessing == 0) {
modifier_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_threadsafe:
{
AST tmp66_AST=null;
if (inputState.guessing == 0) {
tmp66_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp66_AST);
}
match(LITERAL_threadsafe);
if (inputState.guessing == 0) {
modifier_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_synchronized:
{
AST tmp67_AST=null;
if (inputState.guessing == 0) {
tmp67_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp67_AST);
}
match(LITERAL_synchronized);
if (inputState.guessing == 0) {
modifier_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_volatile:
{
AST tmp68_AST=null;
if (inputState.guessing == 0) {
tmp68_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp68_AST);
}
match(LITERAL_volatile);
if (inputState.guessing == 0) {
modifier_AST=(AST)currentAST.root;
}
break;
}
case STRICTFP:
{
AST tmp69_AST=null;
if (inputState.guessing == 0) {
tmp69_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp69_AST);
}
match(STRICTFP);
if (inputState.guessing == 0) {
modifier_AST=(AST)currentAST.root;
}
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=modifier_AST;
}
