{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST statement_AST=null;
  AST m_AST=null;
  Token c=null;
  AST c_AST=null;
  Token sp=null;
  AST sp_AST=null;
switch (LA(1)) {
case LITERAL_if:
{
      AST tmp8_AST=null;
      tmp8_AST=astFactory.create(LT(1));
      astFactory.makeASTRoot(currentAST,tmp8_AST);
      match(LITERAL_if);
      match(LPAREN);
      expression();
      astFactory.addASTChild(currentAST,returnAST);
      match(RPAREN);
      nlsWarn();
      compatibleBodyStatement();
      astFactory.addASTChild(currentAST,returnAST);
{
        boolean synPredMatched270=false;
        if (((_tokenSet_9.member(LA(1))) && (_tokenSet_10.member(LA(2))) && (_tokenSet_11.member(LA(3))))) {
          int _m270=mark();
          synPredMatched270=true;
          inputState.guessing++;
          try {
{
{
switch (LA(1)) {
case SEMI:
case NLS:
{
                    sep();
                    break;
                  }
case LITERAL_else:
{
                  break;
                }
default :
{
                throw new NoViableAltException(LT(1),getFilename());
              }
          }
        }
        match(LITERAL_else);
      }
    }
 catch (    RecognitionException pe) {
      synPredMatched270=false;
    }
    rewind(_m270);
    inputState.guessing--;
  }
  if (synPredMatched270) {
{
switch (LA(1)) {
case SEMI:
case NLS:
{
          sep();
          break;
        }
case LITERAL_else:
{
        break;
      }
default :
{
      throw new NoViableAltException(LT(1),getFilename());
    }
}
}
match(LITERAL_else);
nlsWarn();
compatibleBodyStatement();
astFactory.addASTChild(currentAST,returnAST);
}
 else if ((_tokenSet_12.member(LA(1))) && (_tokenSet_13.member(LA(2))) && (_tokenSet_8.member(LA(3)))) {
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
statement_AST=(AST)currentAST.root;
break;
}
case LITERAL_for:
{
forStatement();
astFactory.addASTChild(currentAST,returnAST);
statement_AST=(AST)currentAST.root;
break;
}
case LITERAL_while:
{
AST tmp12_AST=null;
tmp12_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp12_AST);
match(LITERAL_while);
match(LPAREN);
expression();
astFactory.addASTChild(currentAST,returnAST);
match(RPAREN);
nlsWarn();
compatibleBodyStatement();
astFactory.addASTChild(currentAST,returnAST);
statement_AST=(AST)currentAST.root;
break;
}
case LITERAL_with:
{
AST tmp15_AST=null;
tmp15_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp15_AST);
match(LITERAL_with);
match(LPAREN);
expression();
astFactory.addASTChild(currentAST,returnAST);
match(RPAREN);
nlsWarn();
compoundStatement();
astFactory.addASTChild(currentAST,returnAST);
statement_AST=(AST)currentAST.root;
break;
}
case STAR:
{
sp=LT(1);
sp_AST=astFactory.create(sp);
astFactory.makeASTRoot(currentAST,sp_AST);
match(STAR);
nls();
if (inputState.guessing == 0) {
sp_AST.setType(SPREAD_ARG);
}
expressionStatement();
astFactory.addASTChild(currentAST,returnAST);
statement_AST=(AST)currentAST.root;
break;
}
case LITERAL_import:
{
importStatement();
astFactory.addASTChild(currentAST,returnAST);
statement_AST=(AST)currentAST.root;
break;
}
case LITERAL_switch:
{
AST tmp18_AST=null;
tmp18_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp18_AST);
match(LITERAL_switch);
match(LPAREN);
expression();
astFactory.addASTChild(currentAST,returnAST);
match(RPAREN);
nlsWarn();
match(LCURLY);
nls();
{
_loop273: do {
if ((LA(1) == LITERAL_default || LA(1) == LITERAL_case)) {
casesGroup();
astFactory.addASTChild(currentAST,returnAST);
}
 else {
break _loop273;
}
}
 while (true);
}
match(RCURLY);
statement_AST=(AST)currentAST.root;
break;
}
case LITERAL_try:
{
tryBlock();
astFactory.addASTChild(currentAST,returnAST);
statement_AST=(AST)currentAST.root;
break;
}
default :
if ((LA(1) == LCURLY) && (_tokenSet_14.member(LA(2))) && (_tokenSet_11.member(LA(3)))) {
compoundStatement();
astFactory.addASTChild(currentAST,returnAST);
if (inputState.guessing == 0) {
require(false,"ambiguous free-floating block head{...} needs context to determine if it's open or closed","surround {...} with extra braces {{...}} or use it as a closure in an expression x={...}");
}
statement_AST=(AST)currentAST.root;
}
 else {
boolean synPredMatched262=false;
if (((_tokenSet_15.member(LA(1))) && (_tokenSet_16.member(LA(2))) && (_tokenSet_17.member(LA(3))))) {
int _m262=mark();
synPredMatched262=true;
inputState.guessing++;
try {
{
declarationStart();
}
}
 catch (RecognitionException pe) {
synPredMatched262=false;
}
rewind(_m262);
inputState.guessing--;
}
if (synPredMatched262) {
declaration();
astFactory.addASTChild(currentAST,returnAST);
statement_AST=(AST)currentAST.root;
}
 else if ((_tokenSet_18.member(LA(1))) && (_tokenSet_19.member(LA(2))) && (_tokenSet_7.member(LA(3)))) {
expressionStatement();
astFactory.addASTChild(currentAST,returnAST);
statement_AST=(AST)currentAST.root;
}
 else if ((_tokenSet_20.member(LA(1))) && (_tokenSet_21.member(LA(2))) && (_tokenSet_22.member(LA(3)))) {
{
switch (LA(1)) {
case FINAL:
case ABSTRACT:
case STRICTFP:
case LITERAL_static:
case AT:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
{
modifiers();
m_AST=(AST)returnAST;
break;
}
case LITERAL_class:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
classDefinition(m_AST);
astFactory.addASTChild(currentAST,returnAST);
statement_AST=(AST)currentAST.root;
}
 else if ((LA(1) == IDENT) && (LA(2) == COLON) && (_tokenSet_23.member(LA(3)))) {
AST tmp23_AST=null;
tmp23_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp23_AST);
match(IDENT);
c=LT(1);
c_AST=astFactory.create(c);
astFactory.makeASTRoot(currentAST,c_AST);
match(COLON);
if (inputState.guessing == 0) {
c_AST.setType(LABELED_STAT);
}
{
boolean synPredMatched266=false;
if (((LA(1) == LCURLY) && (_tokenSet_24.member(LA(2))) && (_tokenSet_25.member(LA(3))))) {
int _m266=mark();
synPredMatched266=true;
inputState.guessing++;
try {
{
match(LCURLY);
}
}
 catch (RecognitionException pe) {
synPredMatched266=false;
}
rewind(_m266);
inputState.guessing--;
}
if (synPredMatched266) {
openOrClosedBlock();
astFactory.addASTChild(currentAST,returnAST);
}
 else if ((_tokenSet_23.member(LA(1))) && (_tokenSet_11.member(LA(2))) && (_tokenSet_26.member(LA(3)))) {
statement();
astFactory.addASTChild(currentAST,returnAST);
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
statement_AST=(AST)currentAST.root;
}
 else if ((LA(1) == LITERAL_synchronized) && (LA(2) == LPAREN)) {
AST tmp24_AST=null;
tmp24_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp24_AST);
match(LITERAL_synchronized);
match(LPAREN);
expression();
astFactory.addASTChild(currentAST,returnAST);
match(RPAREN);
nlsWarn();
compoundStatement();
astFactory.addASTChild(currentAST,returnAST);
statement_AST=(AST)currentAST.root;
}
 else if ((_tokenSet_27.member(LA(1))) && (_tokenSet_28.member(LA(2))) && (_tokenSet_7.member(LA(3)))) {
conditionalExpression();
astFactory.addASTChild(currentAST,returnAST);
statement_AST=(AST)currentAST.root;
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
}
returnAST=statement_AST;
}
