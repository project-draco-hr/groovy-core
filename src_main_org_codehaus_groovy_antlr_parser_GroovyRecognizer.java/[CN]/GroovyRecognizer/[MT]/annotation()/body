{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST annotation_AST=null;
  AST i_AST=null;
  AST args_AST=null;
  match(AT);
  identifier();
  i_AST=(AST)returnAST;
{
switch (LA(1)) {
case LPAREN:
{
        match(LPAREN);
{
switch (LA(1)) {
case AT:
case IDENT:
case LBRACK:
case LPAREN:
case LITERAL_super:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case PLUS:
case MINUS:
case INC:
case DEC:
case BNOT:
case LNOT:
case DOLLAR:
case STRING_CTOR_START:
case LITERAL_new:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
              annotationArguments();
              args_AST=(AST)returnAST;
              break;
            }
case RPAREN:
{
            break;
          }
default :
{
          throw new NoViableAltException(LT(1),getFilename());
        }
    }
  }
  match(RPAREN);
  break;
}
case EOF:
case FINAL:
case ABSTRACT:
case STRICTFP:
case LITERAL_package:
case LITERAL_static:
case LITERAL_def:
case AT:
case IDENT:
case RBRACK:
case LITERAL_class:
case LITERAL_interface:
case LITERAL_enum:
case LT:
case COMMA:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case RPAREN:
case RCURLY:
case SEMI:
case NLS:
case STRING_LITERAL:
case TRIPLE_DOT:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
if (inputState.guessing == 0) {
annotation_AST=(AST)currentAST.root;
annotation_AST=(AST)astFactory.make((new ASTArray(3)).add(astFactory.create(ANNOTATION,"ANNOTATION")).add(i_AST).add(args_AST));
currentAST.root=annotation_AST;
currentAST.child=annotation_AST != null && annotation_AST.getFirstChild() != null ? annotation_AST.getFirstChild() : annotation_AST;
currentAST.advanceChildToEnd();
}
returnAST=annotation_AST;
}
