{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST classOrInterfaceType_AST=null;
  AST tmp90_AST=null;
  tmp90_AST=astFactory.create(LT(1));
  astFactory.makeASTRoot(currentAST,tmp90_AST);
  match(IDENT);
{
switch (LA(1)) {
case LT:
{
        typeArguments();
        astFactory.addASTChild(currentAST,returnAST);
        break;
      }
case EOF:
case FINAL:
case ABSTRACT:
case STRICTFP:
case DEF:
case LITERAL_static:
case AT:
case LBRACK:
case RBRACK:
case IDENT:
case LPAREN:
case RPAREN:
case LITERAL_class:
case LITERAL_interface:
case LITERAL_enum:
case DOT:
case QUESTION:
case LITERAL_extends:
case LITERAL_super:
case COMMA:
case GT:
case SR:
case BSR:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case STAR:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case ASSIGN:
case LCURLY:
case RCURLY:
case BAND:
case SEMI:
case LITERAL_default:
case LITERAL_implements:
case LITERAL_this:
case STRING_LITERAL:
case TRIPLE_DOT:
case BOR:
case LOR:
case COLON:
case LITERAL_else:
case LITERAL_case:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case STAR_ASSIGN:
case DIV_ASSIGN:
case MOD_ASSIGN:
case SR_ASSIGN:
case BSR_ASSIGN:
case SL_ASSIGN:
case BAND_ASSIGN:
case BXOR_ASSIGN:
case BOR_ASSIGN:
case STAR_STAR_ASSIGN:
case LAND:
case BXOR:
case REGEX_FIND:
case REGEX_MATCH:
case NOT_EQUAL:
case EQUAL:
case COMPARE_TO:
case NLS:
{
      break;
    }
default :
{
    throw new NoViableAltException(LT(1),getFilename());
  }
}
}
{
_loop676: do {
if ((LA(1) == DOT) && (LA(2) == IDENT) && (_tokenSet_40.member(LA(3)))) {
  AST tmp91_AST=null;
  tmp91_AST=astFactory.create(LT(1));
  astFactory.makeASTRoot(currentAST,tmp91_AST);
  match(DOT);
  AST tmp92_AST=null;
  tmp92_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp92_AST);
  match(IDENT);
{
switch (LA(1)) {
case LT:
{
        typeArguments();
        astFactory.addASTChild(currentAST,returnAST);
        break;
      }
case EOF:
case FINAL:
case ABSTRACT:
case STRICTFP:
case DEF:
case LITERAL_static:
case AT:
case LBRACK:
case RBRACK:
case IDENT:
case LPAREN:
case RPAREN:
case LITERAL_class:
case LITERAL_interface:
case LITERAL_enum:
case DOT:
case QUESTION:
case LITERAL_extends:
case LITERAL_super:
case COMMA:
case GT:
case SR:
case BSR:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case STAR:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case ASSIGN:
case LCURLY:
case RCURLY:
case BAND:
case SEMI:
case LITERAL_default:
case LITERAL_implements:
case LITERAL_this:
case STRING_LITERAL:
case TRIPLE_DOT:
case BOR:
case LOR:
case COLON:
case LITERAL_else:
case LITERAL_case:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case STAR_ASSIGN:
case DIV_ASSIGN:
case MOD_ASSIGN:
case SR_ASSIGN:
case BSR_ASSIGN:
case SL_ASSIGN:
case BAND_ASSIGN:
case BXOR_ASSIGN:
case BOR_ASSIGN:
case STAR_STAR_ASSIGN:
case LAND:
case BXOR:
case REGEX_FIND:
case REGEX_MATCH:
case NOT_EQUAL:
case EQUAL:
case COMPARE_TO:
case NLS:
{
      break;
    }
default :
{
    throw new NoViableAltException(LT(1),getFilename());
  }
}
}
}
 else {
break _loop676;
}
}
 while (true);
}
if (inputState.guessing == 0) {
classOrInterfaceType_AST=(AST)currentAST.root;
if (addImagNode) {
classOrInterfaceType_AST=(AST)astFactory.make((new ASTArray(2)).add(astFactory.create(TYPE,"TYPE")).add(classOrInterfaceType_AST));
}
currentAST.root=classOrInterfaceType_AST;
currentAST.child=classOrInterfaceType_AST != null && classOrInterfaceType_AST.getFirstChild() != null ? classOrInterfaceType_AST.getFirstChild() : classOrInterfaceType_AST;
currentAST.advanceChildToEnd();
}
classOrInterfaceType_AST=(AST)currentAST.root;
returnAST=classOrInterfaceType_AST;
}
