{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST expressionStatement_AST=null;
  AST head_AST=null;
  boolean zz;
{
    boolean synPredMatched286=false;
    if (((_tokenSet_19.member(LA(1))) && (_tokenSet_9.member(LA(2))) && (_tokenSet_20.member(LA(3))))) {
      int _m286=mark();
      synPredMatched286=true;
      inputState.guessing++;
      try {
{
          suspiciousExpressionStatementStart();
        }
      }
 catch (      RecognitionException pe) {
        synPredMatched286=false;
      }
      rewind(_m286);
      inputState.guessing--;
    }
    if (synPredMatched286) {
      checkSuspiciousExpressionStatement(prevToken);
      astFactory.addASTChild(currentAST,returnAST);
    }
 else     if ((_tokenSet_19.member(LA(1))) && (_tokenSet_9.member(LA(2))) && (_tokenSet_20.member(LA(3)))) {
    }
 else {
      throw new NoViableAltException(LT(1),getFilename());
    }
  }
{
    boolean synPredMatched290=false;
    if (((_tokenSet_19.member(LA(1))) && (_tokenSet_9.member(LA(2))) && (_tokenSet_20.member(LA(3))))) {
      int _m290=mark();
      synPredMatched290=true;
      inputState.guessing++;
      try {
{
          expression();
{
switch (LA(1)) {
case SEMI:
{
                match(SEMI);
                break;
              }
case NLS:
{
              match(NLS);
              break;
            }
case RCURLY:
{
            match(RCURLY);
            break;
          }
case EOF:
{
          match(Token.EOF_TYPE);
          break;
        }
default :
{
        throw new NoViableAltException(LT(1),getFilename());
      }
  }
}
}
}
 catch (RecognitionException pe) {
synPredMatched290=false;
}
rewind(_m290);
inputState.guessing--;
}
if (synPredMatched290) {
expression();
astFactory.addASTChild(currentAST,returnAST);
}
 else if ((_tokenSet_91.member(LA(1))) && (_tokenSet_92.member(LA(2))) && (_tokenSet_20.member(LA(3)))) {
zz=pathExpression();
head_AST=(AST)returnAST;
commandArguments(head_AST);
astFactory.addASTChild(currentAST,returnAST);
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
expressionStatement_AST=(AST)currentAST.root;
returnAST=expressionStatement_AST;
}
