{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST compilationUnit_AST=null;
  nls();
{
    boolean synPredMatched4=false;
    if (((LA(1) == LITERAL_package || LA(1) == AT) && (LA(2) == IDENT) && (_tokenSet_0.member(LA(3))))) {
      int _m4=mark();
      synPredMatched4=true;
      inputState.guessing++;
      try {
{
          annotations();
          match(LITERAL_package);
        }
      }
 catch (      RecognitionException pe) {
        synPredMatched4=false;
      }
      rewind(_m4);
      inputState.guessing--;
    }
    if (synPredMatched4) {
      packageDefinition();
      astFactory.addASTChild(currentAST,returnAST);
{
        _loop7:         do {
          if ((LA(1) == SEMI || LA(1) == NLS)) {
            sep();
{
switch (LA(1)) {
case FINAL:
case ABSTRACT:
case STRICTFP:
case DEF:
case LITERAL_import:
case LITERAL_static:
case AT:
case LBRACK:
case IDENT:
case LPAREN:
case LITERAL_class:
case LITERAL_super:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case STAR:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case LITERAL_if:
case LITERAL_while:
case LITERAL_with:
case LITERAL_switch:
case LITERAL_for:
case LITERAL_return:
case LITERAL_break:
case LITERAL_continue:
case LITERAL_throw:
case LITERAL_assert:
case INC:
case DEC:
case LITERAL_try:
case PLUS:
case MINUS:
case BNOT:
case LNOT:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case STRING_CTOR_START:
case LITERAL_new:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
                  statement();
                  astFactory.addASTChild(currentAST,returnAST);
                  break;
                }
case EOF:
case SEMI:
case NLS:
{
                break;
              }
default :
{
              throw new NoViableAltException(LT(1),getFilename());
            }
        }
      }
    }
 else {
      break _loop7;
    }
  }
 while (true);
}
match(Token.EOF_TYPE);
}
 else if ((_tokenSet_1.member(LA(1))) && (_tokenSet_2.member(LA(2))) && (_tokenSet_3.member(LA(3)))) {
{
switch (LA(1)) {
case FINAL:
case ABSTRACT:
case STRICTFP:
case DEF:
case LITERAL_import:
case LITERAL_static:
case AT:
case LBRACK:
case IDENT:
case LPAREN:
case LITERAL_class:
case LITERAL_super:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case STAR:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case LITERAL_if:
case LITERAL_while:
case LITERAL_with:
case LITERAL_switch:
case LITERAL_for:
case LITERAL_return:
case LITERAL_break:
case LITERAL_continue:
case LITERAL_throw:
case LITERAL_assert:
case INC:
case DEC:
case LITERAL_try:
case PLUS:
case MINUS:
case BNOT:
case LNOT:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case STRING_CTOR_START:
case LITERAL_new:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
      statement();
      astFactory.addASTChild(currentAST,returnAST);
      break;
    }
case EOF:
case SEMI:
case NLS:
{
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
}
{
_loop11: do {
if ((LA(1) == SEMI || LA(1) == NLS)) {
sep();
{
switch (LA(1)) {
case FINAL:
case ABSTRACT:
case STRICTFP:
case DEF:
case LITERAL_import:
case LITERAL_static:
case AT:
case LBRACK:
case IDENT:
case LPAREN:
case LITERAL_class:
case LITERAL_super:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case STAR:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case LITERAL_if:
case LITERAL_while:
case LITERAL_with:
case LITERAL_switch:
case LITERAL_for:
case LITERAL_return:
case LITERAL_break:
case LITERAL_continue:
case LITERAL_throw:
case LITERAL_assert:
case INC:
case DEC:
case LITERAL_try:
case PLUS:
case MINUS:
case BNOT:
case LNOT:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case STRING_CTOR_START:
case LITERAL_new:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
      statement();
      astFactory.addASTChild(currentAST,returnAST);
      break;
    }
case EOF:
case SEMI:
case NLS:
{
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
}
}
 else {
break _loop11;
}
}
 while (true);
}
match(Token.EOF_TYPE);
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
match(Token.EOF_TYPE);
compilationUnit_AST=(AST)currentAST.root;
returnAST=compilationUnit_AST;
}
