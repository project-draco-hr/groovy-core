{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST constructorBody_AST=null;
  Token lc=null;
  AST lc_AST=null;
  lc=LT(1);
  if (inputState.guessing == 0) {
    lc_AST=astFactory.create(lc);
    astFactory.makeASTRoot(currentAST,lc_AST);
  }
  match(LCURLY);
  nls();
  if (inputState.guessing == 0) {
    lc_AST.setType(SLIST);
  }
{
    boolean synPredMatched179=false;
    if (((_tokenSet_68.member(LA(1))) && (_tokenSet_69.member(LA(2))) && (_tokenSet_70.member(LA(3))))) {
      int _m179=mark();
      synPredMatched179=true;
      inputState.guessing++;
      try {
{
          explicitConstructorInvocation();
        }
      }
 catch (      RecognitionException pe) {
        synPredMatched179=false;
      }
      rewind(_m179);
      inputState.guessing--;
    }
    if (synPredMatched179) {
      explicitConstructorInvocation();
      if (inputState.guessing == 0) {
        astFactory.addASTChild(currentAST,returnAST);
      }
{
switch (LA(1)) {
case SEMI:
case NLS:
{
            sep();
            blockBody(sepToken);
            if (inputState.guessing == 0) {
              astFactory.addASTChild(currentAST,returnAST);
            }
            break;
          }
case RCURLY:
{
          break;
        }
default :
{
        throw new NoViableAltException(LT(1),getFilename());
      }
  }
}
}
 else if ((_tokenSet_71.member(LA(1))) && (_tokenSet_72.member(LA(2))) && (_tokenSet_17.member(LA(3)))) {
blockBody(EOF);
if (inputState.guessing == 0) {
  astFactory.addASTChild(currentAST,returnAST);
}
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
match(RCURLY);
if (inputState.guessing == 0) {
constructorBody_AST=(AST)currentAST.root;
}
returnAST=constructorBody_AST;
}
