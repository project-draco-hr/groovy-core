{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST constant_AST=null;
switch (LA(1)) {
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
      constantNumber();
      if (inputState.guessing == 0) {
        astFactory.addASTChild(currentAST,returnAST);
      }
      if (inputState.guessing == 0) {
        constant_AST=(AST)currentAST.root;
      }
      break;
    }
case STRING_LITERAL:
{
    AST tmp327_AST=null;
    if (inputState.guessing == 0) {
      tmp327_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp327_AST);
    }
    match(STRING_LITERAL);
    if (inputState.guessing == 0) {
      constant_AST=(AST)currentAST.root;
    }
    break;
  }
case LITERAL_true:
{
  AST tmp328_AST=null;
  if (inputState.guessing == 0) {
    tmp328_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp328_AST);
  }
  match(LITERAL_true);
  if (inputState.guessing == 0) {
    constant_AST=(AST)currentAST.root;
  }
  break;
}
case LITERAL_false:
{
AST tmp329_AST=null;
if (inputState.guessing == 0) {
  tmp329_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp329_AST);
}
match(LITERAL_false);
if (inputState.guessing == 0) {
  constant_AST=(AST)currentAST.root;
}
break;
}
case LITERAL_null:
{
AST tmp330_AST=null;
if (inputState.guessing == 0) {
tmp330_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp330_AST);
}
match(LITERAL_null);
if (inputState.guessing == 0) {
constant_AST=(AST)currentAST.root;
}
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=constant_AST;
}
