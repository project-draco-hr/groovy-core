{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST constant_AST=null;
switch (LA(1)) {
case NUM_INT:
{
      AST tmp327_AST=null;
      tmp327_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp327_AST);
      match(NUM_INT);
      constant_AST=(AST)currentAST.root;
      break;
    }
case STRING_LITERAL:
{
    AST tmp328_AST=null;
    tmp328_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp328_AST);
    match(STRING_LITERAL);
    constant_AST=(AST)currentAST.root;
    break;
  }
case NUM_FLOAT:
{
  AST tmp329_AST=null;
  tmp329_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp329_AST);
  match(NUM_FLOAT);
  constant_AST=(AST)currentAST.root;
  break;
}
case NUM_LONG:
{
AST tmp330_AST=null;
tmp330_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp330_AST);
match(NUM_LONG);
constant_AST=(AST)currentAST.root;
break;
}
case NUM_DOUBLE:
{
AST tmp331_AST=null;
tmp331_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp331_AST);
match(NUM_DOUBLE);
constant_AST=(AST)currentAST.root;
break;
}
case NUM_BIG_INT:
{
AST tmp332_AST=null;
tmp332_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp332_AST);
match(NUM_BIG_INT);
constant_AST=(AST)currentAST.root;
break;
}
case NUM_BIG_DECIMAL:
{
AST tmp333_AST=null;
tmp333_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp333_AST);
match(NUM_BIG_DECIMAL);
constant_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=constant_AST;
}
