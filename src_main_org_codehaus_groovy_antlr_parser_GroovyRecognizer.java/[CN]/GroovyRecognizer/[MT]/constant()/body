{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST constant_AST=null;
switch (LA(1)) {
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
      constantNumber();
      astFactory.addASTChild(currentAST,returnAST);
      constant_AST=(AST)currentAST.root;
      break;
    }
case STRING_LITERAL:
{
    AST tmp326_AST=null;
    tmp326_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp326_AST);
    match(STRING_LITERAL);
    constant_AST=(AST)currentAST.root;
    break;
  }
case LITERAL_true:
{
  AST tmp327_AST=null;
  tmp327_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp327_AST);
  match(LITERAL_true);
  constant_AST=(AST)currentAST.root;
  break;
}
case LITERAL_false:
{
AST tmp328_AST=null;
tmp328_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp328_AST);
match(LITERAL_false);
constant_AST=(AST)currentAST.root;
break;
}
case LITERAL_null:
{
AST tmp329_AST=null;
tmp329_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp329_AST);
match(LITERAL_null);
constant_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=constant_AST;
}
