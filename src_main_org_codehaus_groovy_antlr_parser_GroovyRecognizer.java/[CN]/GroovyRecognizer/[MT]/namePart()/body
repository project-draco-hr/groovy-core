{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST namePart_AST=null;
  Token amp=null;
  AST amp_AST=null;
  Token ats=null;
  AST ats_AST=null;
  Token sl=null;
  AST sl_AST=null;
  AST dn_AST=null;
{
switch (LA(1)) {
case LAND:
{
        amp=LT(1);
        amp_AST=astFactory.create(amp);
        astFactory.makeASTRoot(currentAST,amp_AST);
        match(LAND);
        if (inputState.guessing == 0) {
          amp_AST.setType(REFLECT_MEMBER);
        }
        break;
      }
case AT:
{
      ats=LT(1);
      ats_AST=astFactory.create(ats);
      astFactory.makeASTRoot(currentAST,ats_AST);
      match(AT);
      if (inputState.guessing == 0) {
        ats_AST.setType(SELECT_SLOT);
      }
      break;
    }
case DEF:
case IDENT:
case LPAREN:
case LITERAL_class:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case LCURLY:
case STRING_LITERAL:
case LITERAL_in:
case STRING_CTOR_START:
{
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
}
{
switch (LA(1)) {
case IDENT:
{
AST tmp266_AST=null;
tmp266_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp266_AST);
match(IDENT);
break;
}
case STRING_LITERAL:
{
sl=LT(1);
sl_AST=astFactory.create(sl);
astFactory.addASTChild(currentAST,sl_AST);
match(STRING_LITERAL);
if (inputState.guessing == 0) {
sl_AST.setType(IDENT);
}
break;
}
case LPAREN:
case STRING_CTOR_START:
{
dynamicMemberName();
dn_AST=(AST)returnAST;
if (inputState.guessing == 0) {
namePart_AST=(AST)currentAST.root;
namePart_AST=(AST)astFactory.make((new ASTArray(2)).add(astFactory.create(DYNAMIC_MEMBER,"DYNAMIC_MEMBER")).add(dn_AST));
currentAST.root=namePart_AST;
currentAST.child=namePart_AST != null && namePart_AST.getFirstChild() != null ? namePart_AST.getFirstChild() : namePart_AST;
currentAST.advanceChildToEnd();
}
break;
}
case LCURLY:
{
openBlock();
astFactory.addASTChild(currentAST,returnAST);
break;
}
case DEF:
case LITERAL_class:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case LITERAL_in:
{
keywordPropertyNames();
astFactory.addASTChild(currentAST,returnAST);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
namePart_AST=(AST)currentAST.root;
returnAST=namePart_AST;
}
