{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST packageDefinition_AST=null;
  Token p=null;
  AST p_AST=null;
  annotationsOpt();
  if (inputState.guessing == 0) {
    astFactory.addASTChild(currentAST,returnAST);
  }
  p=LT(1);
  if (inputState.guessing == 0) {
    p_AST=astFactory.create(p);
    astFactory.makeASTRoot(currentAST,p_AST);
  }
  match(LITERAL_package);
  if (inputState.guessing == 0) {
    p_AST.setType(PACKAGE_DEF);
  }
  identifier();
  if (inputState.guessing == 0) {
    astFactory.addASTChild(currentAST,returnAST);
  }
  if (inputState.guessing == 0) {
    packageDefinition_AST=(AST)currentAST.root;
  }
  returnAST=packageDefinition_AST;
}
