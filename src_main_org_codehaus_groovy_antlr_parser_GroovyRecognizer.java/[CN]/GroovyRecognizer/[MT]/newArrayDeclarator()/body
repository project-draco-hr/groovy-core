{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST newArrayDeclarator_AST=null;
  Token lb=null;
  AST lb_AST=null;
{
    int _cnt472=0;
    _loop472:     do {
      if ((LA(1) == LBRACK) && (_tokenSet_118.member(LA(2))) && (_tokenSet_16.member(LA(3)))) {
        lb=LT(1);
        lb_AST=astFactory.create(lb);
        astFactory.makeASTRoot(currentAST,lb_AST);
        match(LBRACK);
        if (inputState.guessing == 0) {
          lb_AST.setType(ARRAY_DECLARATOR);
        }
{
switch (LA(1)) {
case IDENT:
case LBRACK:
case LPAREN:
case LITERAL_super:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case PLUS:
case MINUS:
case INC:
case DEC:
case BNOT:
case LNOT:
case DOLLAR:
case STRING_CTOR_START:
case LITERAL_new:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
              expression();
              astFactory.addASTChild(currentAST,returnAST);
              break;
            }
case RBRACK:
{
            break;
          }
default :
{
          throw new NoViableAltException(LT(1),getFilename());
        }
    }
  }
  match(RBRACK);
}
 else {
  if (_cnt472 >= 1) {
    break _loop472;
  }
 else {
    throw new NoViableAltException(LT(1),getFilename());
  }
}
_cnt472++;
}
 while (true);
}
newArrayDeclarator_AST=(AST)currentAST.root;
returnAST=newArrayDeclarator_AST;
}
