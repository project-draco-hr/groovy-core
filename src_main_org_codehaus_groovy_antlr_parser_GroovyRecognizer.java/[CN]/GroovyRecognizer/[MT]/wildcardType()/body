{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST wildcardType_AST=null;
  Token q=null;
  AST q_AST=null;
  q=LT(1);
  q_AST=astFactory.create(q);
  astFactory.makeASTRoot(currentAST,q_AST);
  match(QUESTION);
  if (inputState.guessing == 0) {
    q_AST.setType(WILDCARD_TYPE);
  }
{
    boolean synPredMatched51=false;
    if (((LA(1) == LITERAL_extends || LA(1) == LITERAL_super) && (LA(2) == IDENT) && (_tokenSet_40.member(LA(3))))) {
      int _m51=mark();
      synPredMatched51=true;
      inputState.guessing++;
      try {
{
switch (LA(1)) {
case LITERAL_extends:
{
              match(LITERAL_extends);
              break;
            }
case LITERAL_super:
{
            match(LITERAL_super);
            break;
          }
default :
{
          throw new NoViableAltException(LT(1),getFilename());
        }
    }
  }
}
 catch (RecognitionException pe) {
  synPredMatched51=false;
}
rewind(_m51);
inputState.guessing--;
}
if (synPredMatched51) {
typeArgumentBounds();
astFactory.addASTChild(currentAST,returnAST);
}
 else if ((_tokenSet_39.member(LA(1))) && (_tokenSet_42.member(LA(2))) && (_tokenSet_8.member(LA(3)))) {
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
wildcardType_AST=(AST)currentAST.root;
returnAST=wildcardType_AST;
}
