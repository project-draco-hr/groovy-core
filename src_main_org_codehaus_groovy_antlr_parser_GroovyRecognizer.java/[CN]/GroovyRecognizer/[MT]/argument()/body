{
  boolean hasLabel=false;
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST argument_AST=null;
  Token c=null;
  AST c_AST=null;
  Token sp=null;
  AST sp_AST=null;
  Token op=null;
  AST op_AST=null;
{
    boolean synPredMatched451=false;
    if (((_tokenSet_130.member(LA(1))) && (_tokenSet_131.member(LA(2))) && (_tokenSet_109.member(LA(3))))) {
      int _m451=mark();
      synPredMatched451=true;
      inputState.guessing++;
      try {
{
          argumentLabelStart();
        }
      }
 catch (      RecognitionException pe) {
        synPredMatched451=false;
      }
      rewind(_m451);
      inputState.guessing--;
    }
    if (synPredMatched451) {
      argumentLabel();
      astFactory.addASTChild(currentAST,returnAST);
      c=LT(1);
      c_AST=astFactory.create(c);
      astFactory.makeASTRoot(currentAST,c_AST);
      match(COLON);
      if (inputState.guessing == 0) {
        c_AST.setType(LABELED_ARG);
      }
    }
 else     if ((_tokenSet_132.member(LA(1))) && (_tokenSet_69.member(LA(2))) && (_tokenSet_84.member(LA(3)))) {
    }
 else {
      throw new NoViableAltException(LT(1),getFilename());
    }
  }
{
switch (LA(1)) {
case STAR:
{
        sp=LT(1);
        sp_AST=astFactory.create(sp);
        astFactory.makeASTRoot(currentAST,sp_AST);
        match(STAR);
        if (inputState.guessing == 0) {
          sp_AST.setType(SPREAD_ARG);
        }
        break;
      }
case QUESTION:
{
      op=LT(1);
      op_AST=astFactory.create(op);
      astFactory.makeASTRoot(currentAST,op_AST);
      match(QUESTION);
      if (inputState.guessing == 0) {
        op_AST.setType(OPTIONAL_ARG);
      }
      break;
    }
case FINAL:
case ABSTRACT:
case STRICTFP:
case DEF:
case LITERAL_static:
case AT:
case LBRACK:
case IDENT:
case LPAREN:
case LITERAL_super:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case LITERAL_return:
case LITERAL_break:
case LITERAL_continue:
case LITERAL_throw:
case LITERAL_assert:
case INC:
case DEC:
case PLUS:
case MINUS:
case BNOT:
case LNOT:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case STRING_CTOR_START:
case LITERAL_new:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
}
expression();
astFactory.addASTChild(currentAST,returnAST);
argument_AST=(AST)currentAST.root;
returnAST=argument_AST;
return hasLabel;
}
