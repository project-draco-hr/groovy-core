{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST variableDefinitions_AST=null;
  Token id=null;
  AST id_AST=null;
  Token qid=null;
  AST qid_AST=null;
  AST param_AST=null;
  AST tc_AST=null;
  AST mb_AST=null;
  if ((LA(1) == IDENT) && (_tokenSet_34.member(LA(2)))) {
    variableDeclarator(getASTFactory().dupTree(mods),getASTFactory().dupTree(t));
    astFactory.addASTChild(currentAST,returnAST);
{
      _loop187:       do {
        if ((LA(1) == COMMA)) {
          match(COMMA);
          nls();
          variableDeclarator(getASTFactory().dupTree(mods),getASTFactory().dupTree(t));
          astFactory.addASTChild(currentAST,returnAST);
        }
 else {
          break _loop187;
        }
      }
 while (true);
    }
    variableDefinitions_AST=(AST)currentAST.root;
  }
 else   if ((LA(1) == IDENT || LA(1) == STRING_LITERAL) && (LA(2) == LPAREN)) {
{
switch (LA(1)) {
case IDENT:
{
          id=LT(1);
          id_AST=astFactory.create(id);
          astFactory.addASTChild(currentAST,id_AST);
          match(IDENT);
          break;
        }
case STRING_LITERAL:
{
        qid=LT(1);
        qid_AST=astFactory.create(qid);
        astFactory.addASTChild(currentAST,qid_AST);
        match(STRING_LITERAL);
        if (inputState.guessing == 0) {
          qid_AST.setType(IDENT);
        }
        break;
      }
default :
{
      throw new NoViableAltException(LT(1),getFilename());
    }
}
}
match(LPAREN);
parameterDeclarationList();
param_AST=(AST)returnAST;
match(RPAREN);
{
switch (LA(1)) {
case LITERAL_throws:
{
    throwsClause();
    tc_AST=(AST)returnAST;
    break;
  }
case EOF:
case FINAL:
case ABSTRACT:
case STRICTFP:
case DEF:
case LITERAL_static:
case AT:
case IDENT:
case LITERAL_class:
case LITERAL_interface:
case LITERAL_enum:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case LCURLY:
case RCURLY:
case SEMI:
case LITERAL_default:
case LITERAL_else:
case LITERAL_case:
case NLS:
{
  break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
nlsWarn();
{
if ((LA(1) == LCURLY) && (_tokenSet_14.member(LA(2))) && (_tokenSet_35.member(LA(3)))) {
openBlock();
mb_AST=(AST)returnAST;
}
 else if ((_tokenSet_36.member(LA(1))) && (_tokenSet_13.member(LA(2))) && (_tokenSet_8.member(LA(3)))) {
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
if (inputState.guessing == 0) {
variableDefinitions_AST=(AST)currentAST.root;
if (qid_AST != null) id_AST=qid_AST;
variableDefinitions_AST=(AST)astFactory.make((new ASTArray(7)).add(astFactory.create(METHOD_DEF,"METHOD_DEF")).add(mods).add((AST)astFactory.make((new ASTArray(2)).add(astFactory.create(TYPE,"TYPE")).add(t))).add(id_AST).add(param_AST).add(tc_AST).add(mb_AST));
currentAST.root=variableDefinitions_AST;
currentAST.child=variableDefinitions_AST != null && variableDefinitions_AST.getFirstChild() != null ? variableDefinitions_AST.getFirstChild() : variableDefinitions_AST;
currentAST.advanceChildToEnd();
}
variableDefinitions_AST=(AST)currentAST.root;
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
returnAST=variableDefinitions_AST;
}
