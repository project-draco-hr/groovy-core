{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST annotationMemberArrayValueInitializer_AST=null;
switch (LA(1)) {
case LBRACK:
case IDENT:
case LPAREN:
case LITERAL_super:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case INC:
case DEC:
case PLUS:
case MINUS:
case BNOT:
case LNOT:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case STRING_CTOR_START:
case LITERAL_new:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
      conditionalExpression();
      astFactory.addASTChild(currentAST,returnAST);
      annotationMemberArrayValueInitializer_AST=(AST)currentAST.root;
      break;
    }
case AT:
{
    annotation();
    astFactory.addASTChild(currentAST,returnAST);
    nls();
    annotationMemberArrayValueInitializer_AST=(AST)currentAST.root;
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=annotationMemberArrayValueInitializer_AST;
}
