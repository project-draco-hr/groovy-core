{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST annotationMemberArrayValueInitializer_AST=null;
switch (LA(1)) {
case IDENT:
case LBRACK:
case LPAREN:
case LITERAL_super:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case PLUS:
case MINUS:
case INC:
case DEC:
case BNOT:
case LNOT:
case DOLLAR:
case STRING_CTOR_START:
case LITERAL_new:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
      conditionalExpression();
      if (inputState.guessing == 0) {
        astFactory.addASTChild(currentAST,returnAST);
      }
      if (inputState.guessing == 0) {
        annotationMemberArrayValueInitializer_AST=(AST)currentAST.root;
      }
      break;
    }
case AT:
{
    annotation();
    if (inputState.guessing == 0) {
      astFactory.addASTChild(currentAST,returnAST);
    }
    nls();
    if (inputState.guessing == 0) {
      annotationMemberArrayValueInitializer_AST=(AST)currentAST.root;
    }
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=annotationMemberArrayValueInitializer_AST;
}
