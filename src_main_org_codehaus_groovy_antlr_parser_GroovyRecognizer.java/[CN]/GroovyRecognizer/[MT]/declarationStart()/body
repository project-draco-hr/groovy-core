{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST declarationStart_AST=null;
switch (LA(1)) {
case LITERAL_def:
{
      match(LITERAL_def);
      break;
    }
case FINAL:
case ABSTRACT:
case STRICTFP:
case LITERAL_static:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
{
    modifier();
    break;
  }
case AT:
{
  AST tmp53_AST=null;
  tmp53_AST=astFactory.create(LT(1));
  match(AT);
  AST tmp54_AST=null;
  tmp54_AST=astFactory.create(LT(1));
  match(IDENT);
  break;
}
case IDENT:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
{
{
switch (LA(1)) {
case IDENT:
{
      upperCaseIdent();
      break;
    }
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
{
    builtInType();
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
}
{
_loop24: do {
if ((LA(1) == LBRACK)) {
AST tmp55_AST=null;
tmp55_AST=astFactory.create(LT(1));
match(LBRACK);
balancedTokens();
AST tmp56_AST=null;
tmp56_AST=astFactory.create(LT(1));
match(RBRACK);
}
 else {
break _loop24;
}
}
 while (true);
}
AST tmp57_AST=null;
tmp57_AST=astFactory.create(LT(1));
match(IDENT);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=declarationStart_AST;
}
