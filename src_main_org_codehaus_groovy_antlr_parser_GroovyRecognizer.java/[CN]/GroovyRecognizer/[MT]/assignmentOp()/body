{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST assignmentOp_AST=null;
{
switch (LA(1)) {
case ASSIGN:
{
        AST tmp236_AST=null;
        if (inputState.guessing == 0) {
          tmp236_AST=astFactory.create(LT(1));
          astFactory.makeASTRoot(currentAST,tmp236_AST);
        }
        match(ASSIGN);
        break;
      }
case PLUS_ASSIGN:
{
      AST tmp237_AST=null;
      if (inputState.guessing == 0) {
        tmp237_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp237_AST);
      }
      match(PLUS_ASSIGN);
      break;
    }
case MINUS_ASSIGN:
{
    AST tmp238_AST=null;
    if (inputState.guessing == 0) {
      tmp238_AST=astFactory.create(LT(1));
      astFactory.makeASTRoot(currentAST,tmp238_AST);
    }
    match(MINUS_ASSIGN);
    break;
  }
case STAR_ASSIGN:
{
  AST tmp239_AST=null;
  if (inputState.guessing == 0) {
    tmp239_AST=astFactory.create(LT(1));
    astFactory.makeASTRoot(currentAST,tmp239_AST);
  }
  match(STAR_ASSIGN);
  break;
}
case DIV_ASSIGN:
{
AST tmp240_AST=null;
if (inputState.guessing == 0) {
  tmp240_AST=astFactory.create(LT(1));
  astFactory.makeASTRoot(currentAST,tmp240_AST);
}
match(DIV_ASSIGN);
break;
}
case MOD_ASSIGN:
{
AST tmp241_AST=null;
if (inputState.guessing == 0) {
tmp241_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp241_AST);
}
match(MOD_ASSIGN);
break;
}
case SR_ASSIGN:
{
AST tmp242_AST=null;
if (inputState.guessing == 0) {
tmp242_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp242_AST);
}
match(SR_ASSIGN);
break;
}
case BSR_ASSIGN:
{
AST tmp243_AST=null;
if (inputState.guessing == 0) {
tmp243_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp243_AST);
}
match(BSR_ASSIGN);
break;
}
case SL_ASSIGN:
{
AST tmp244_AST=null;
if (inputState.guessing == 0) {
tmp244_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp244_AST);
}
match(SL_ASSIGN);
break;
}
case BAND_ASSIGN:
{
AST tmp245_AST=null;
if (inputState.guessing == 0) {
tmp245_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp245_AST);
}
match(BAND_ASSIGN);
break;
}
case BXOR_ASSIGN:
{
AST tmp246_AST=null;
if (inputState.guessing == 0) {
tmp246_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp246_AST);
}
match(BXOR_ASSIGN);
break;
}
case BOR_ASSIGN:
{
AST tmp247_AST=null;
if (inputState.guessing == 0) {
tmp247_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp247_AST);
}
match(BOR_ASSIGN);
break;
}
case STAR_STAR_ASSIGN:
{
AST tmp248_AST=null;
if (inputState.guessing == 0) {
tmp248_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp248_AST);
}
match(STAR_STAR_ASSIGN);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
if (inputState.guessing == 0) {
assignmentOp_AST=(AST)currentAST.root;
}
returnAST=assignmentOp_AST;
}
