{
  boolean hasLabels=false;
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST argList_AST=null;
  boolean hl2;
{
switch (LA(1)) {
case FINAL:
case ABSTRACT:
case STRICTFP:
case DEF:
case LITERAL_static:
case AT:
case LBRACK:
case IDENT:
case LPAREN:
case LITERAL_class:
case QUESTION:
case LITERAL_super:
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
case LITERAL_any:
case STAR:
case LITERAL_private:
case LITERAL_public:
case LITERAL_protected:
case LITERAL_transient:
case LITERAL_native:
case LITERAL_threadsafe:
case LITERAL_synchronized:
case LITERAL_volatile:
case LCURLY:
case LITERAL_this:
case STRING_LITERAL:
case LITERAL_in:
case LITERAL_return:
case LITERAL_break:
case LITERAL_continue:
case LITERAL_throw:
case LITERAL_assert:
case INC:
case DEC:
case PLUS:
case MINUS:
case BNOT:
case LNOT:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case STRING_CTOR_START:
case LITERAL_new:
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INT:
case NUM_BIG_DECIMAL:
{
        hasLabels=argument();
        astFactory.addASTChild(currentAST,returnAST);
{
          _loop1078:           do {
            if ((LA(1) == COMMA) && (_tokenSet_69.member(LA(2))) && (_tokenSet_70.member(LA(3)))) {
              match(COMMA);
              hl2=argument();
              astFactory.addASTChild(currentAST,returnAST);
              if (inputState.guessing == 0) {
                hasLabels|=hl2;
              }
            }
 else {
              break _loop1078;
            }
          }
 while (true);
        }
        if (inputState.guessing == 0) {
          argList_AST=(AST)currentAST.root;
          argList_AST=(AST)astFactory.make((new ASTArray(2)).add(astFactory.create(ELIST,"ELIST")).add(argList_AST));
          currentAST.root=argList_AST;
          currentAST.child=argList_AST != null && argList_AST.getFirstChild() != null ? argList_AST.getFirstChild() : argList_AST;
          currentAST.advanceChildToEnd();
        }
        break;
      }
case RBRACK:
case RPAREN:
case COMMA:
{
      if (inputState.guessing == 0) {
        argList_AST=(AST)currentAST.root;
        argList_AST=astFactory.create(ELIST,"ELIST");
        currentAST.root=argList_AST;
        currentAST.child=argList_AST != null && argList_AST.getFirstChild() != null ? argList_AST.getFirstChild() : argList_AST;
        currentAST.advanceChildToEnd();
      }
      break;
    }
default :
{
    throw new NoViableAltException(LT(1),getFilename());
  }
}
}
{
switch (LA(1)) {
case COMMA:
{
  match(COMMA);
  break;
}
case RBRACK:
case RPAREN:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
argList_AST=(AST)currentAST.root;
returnAST=argList_AST;
return hasLabels;
}
