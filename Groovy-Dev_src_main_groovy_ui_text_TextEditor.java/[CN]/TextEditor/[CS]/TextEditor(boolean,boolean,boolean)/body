{
  this.tabsAsSpaces=tabsAsSpaces;
  this.multiLineTab=multiLineTab;
  this.unwrapped=unwrapped;
  ActionMap aMap=getActionMap();
  Action action=null;
  do {
    action=action == null ? aMap.get(DefaultEditorKit.deletePrevCharAction) : null;
    aMap.remove(DefaultEditorKit.deletePrevCharAction);
    aMap=aMap.getParent();
  }
 while (aMap != null);
  aMap=getActionMap();
  KeyStroke keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0,false);
  InputMap iMap=getInputMap();
  iMap.put(keyStroke,"delete");
  aMap.put("delete",action);
  action=new FindAction();
  aMap.put(FIND,action);
  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_F,KeyEvent.CTRL_MASK,false);
  iMap.put(keyStroke,FIND);
  aMap.put(FIND_NEXT,FindReplaceUtility.FIND_ACTION);
  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_F3,0,false);
  iMap.put(keyStroke,FIND_NEXT);
  aMap.put(FIND_PREVIOUS,FindReplaceUtility.FIND_ACTION);
  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_F3,KeyEvent.SHIFT_MASK,false);
  iMap.put(keyStroke,FIND_PREVIOUS);
  action=new TabAction();
  aMap.put("TextEditor-tabAction",action);
  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_TAB,0,false);
  iMap.put(keyStroke,"TextEditor-tabAction");
  action=new ShiftTabAction();
  aMap.put("TextEditor-shiftTabAction",action);
  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_TAB,KeyEvent.SHIFT_MASK,false);
  iMap.put(keyStroke,"TextEditor-shiftTabAction");
  action=new ReplaceAction();
  getActionMap().put(REPLACE,action);
  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_H,KeyEvent.CTRL_MASK,false);
  do {
    iMap.remove(keyStroke);
    iMap=iMap.getParent();
  }
 while (iMap != null);
  getInputMap().put(keyStroke,REPLACE);
  action=new AutoIndentAction();
  getActionMap().put(AUTO_INDENT,action);
  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,false);
  getInputMap().put(keyStroke,AUTO_INDENT);
  setAutoscrolls(true);
  defaultCaret=getCaret();
  overtypeCaret=new OvertypeCaret();
  overtypeCaret.setBlinkRate(defaultCaret.getBlinkRate());
}
