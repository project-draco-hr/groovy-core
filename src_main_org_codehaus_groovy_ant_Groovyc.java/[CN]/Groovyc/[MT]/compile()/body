{
  if (compileList.length == 0) {
    log.info("No sources to compile");
    return;
  }
  log.info("Compiling " + compileList.length + " source file"+ (compileList.length == 1 ? "" : "s")+ " to "+ destDir);
  if (listFiles) {
    for (int i=0; i < compileList.length; i++) {
      String filename=compileList[i].getAbsolutePath();
      log.info("    " + filename);
    }
  }
  if (fork) {
    if (compileList.length == 0) {
      throw new BuildException("No files to compile in fork mode.");
    }
    final String javaHome=System.getProperty("java.home");
    final String javaClasspath=System.getProperty("java.class.path");
    final String separator=System.getProperty("file.separator");
    final String groovyClasspath=getClasspath() != null ? getClasspath().toString() : javaClasspath;
    final String[] fixedParameters={javaHome + separator + "bin"+ separator+ "java","-classpath",javaClasspath,"-Dprogram.name=groovyc","-Dtools.jar=" + javaHome + separator+ "lib"+ separator+ "tools.jar","org.codehaus.groovy.tools.GroovyStarter","--main","org.codehaus.groovy.tools.FileSystemCompiler","-d",destDir.getPath(),"--classpath",groovyClasspath};
    int size=fixedParameters.length + compileList.length;
    if (encoding != null) {
      size+=2;
    }
    Map javaOptions=null;
    if (jointCompilation) {
      size+=1;
      javaOptions=javac.getRuntimeConfigurableWrapper().getAttributeMap();
      size+=javaOptions.size();
    }
    final String[] parameters=new String[size];
    System.arraycopy(fixedParameters,0,parameters,0,fixedParameters.length);
    int index=fixedParameters.length;
    if (encoding != null) {
      parameters[index++]="--encoding";
      parameters[index++]=encoding;
    }
    if (jointCompilation) {
      parameters[index++]="-j";
      for (Iterator i=javaOptions.entrySet().iterator(); i.hasNext(); ) {
        final Map.Entry e=(Map.Entry)i.next();
        parameters[index++]="-J" + e.getKey() + "="+ e.getValue();
      }
    }
    for (int i=0; i < compileList.length; ++i) {
      parameters[i + index]=compileList[i].getPath();
    }
    try {
      if (Runtime.getRuntime().exec(parameters).waitFor() != 0) {
        throw new BuildException("Forked groovyc failed to return 0.");
      }
    }
 catch (    final IOException ioe) {
      throw new BuildException("Forked compile failed with " + ioe.getMessage());
    }
catch (    final InterruptedException ie) {
      throw new BuildException("Forked compile was interruptes with " + ie.getMessage());
    }
  }
 else {
    try {
      Path classpath=getClasspath();
      if (classpath != null) {
        configuration.setClasspath(classpath.toString());
      }
      configuration.setTargetDirectory(destDir);
      if (encoding != null) {
        configuration.setSourceEncoding(encoding);
      }
      CompilationUnit unit=makeCompileUnit();
      unit.addSources(compileList);
      unit.compile();
    }
 catch (    Exception e) {
      StringWriter writer=new StringWriter();
      new ErrorReporter(e,false).write(new PrintWriter(writer));
      String message=writer.toString();
      if (failOnError) {
        throw new BuildException(message,e,getLocation());
      }
 else {
        log(message,Project.MSG_ERR);
      }
    }
  }
}
