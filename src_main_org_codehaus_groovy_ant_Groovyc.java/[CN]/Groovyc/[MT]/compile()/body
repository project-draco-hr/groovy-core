{
  if (compileList.length > 0) {
    log("Compiling " + compileList.length + " source file"+ (compileList.length == 1 ? "" : "s")+ (destDir != null ? " to " + destDir : ""));
    if (listFiles) {
      for (int i=0; i < compileList.length; ++i) {
        String filename=compileList[i].getAbsolutePath();
        log(filename);
      }
    }
    if (fork) {
      final String separator=System.getProperty("file.separator");
      final Path classpath=getClasspath() != null ? getClasspath() : new Path(getProject());
      if (includeAntRuntime) {
        classpath.addExisting((new Path(getProject())).concatSystemClasspath("last"));
      }
      if (includeJavaRuntime) {
        classpath.addJavaRuntime();
      }
      final ArrayList commandLineList=new ArrayList();
      commandLineList.add(System.getProperty("java.home") + separator + "bin"+ separator+ "java");
      commandLineList.add("-classpath");
      commandLineList.add(classpath.toString());
      if ((memoryInitialSize != null) && !memoryInitialSize.equals("")) {
        commandLineList.add("-Xms" + memoryInitialSize);
      }
      if ((memoryMaximumSize != null) && !memoryMaximumSize.equals("")) {
        commandLineList.add("-Xmx" + memoryMaximumSize);
      }
      commandLineList.add("org.codehaus.groovy.ant.Groovyc");
      commandLineList.add("--classpath");
      commandLineList.add(classpath.toString());
      if (jointCompilation) {
        commandLineList.add("-j");
        for (Iterator i=javac.getRuntimeConfigurableWrapper().getAttributeMap().entrySet().iterator(); i.hasNext(); ) {
          final Map.Entry e=(Map.Entry)i.next();
          final String key=e.getKey().toString();
          if (key.indexOf("debug") != -1) {
            commandLineList.add("-Fg");
          }
 else           if (key.indexOf("classpath") != -1) {
          }
 else {
            commandLineList.add("-J" + e.getKey() + "="+ e.getValue());
          }
        }
      }
      commandLineList.add(destDir.getPath());
      commandLineList.add(src.toString());
      final String[] commandLine=new String[commandLineList.size()];
      for (int i=0; i < commandLine.length; ++i) {
        commandLine[i]=(String)commandLineList.get(i);
      }
      final Execute executor=new Execute();
      executor.setAntRun(getProject());
      executor.setWorkingDirectory(getProject().getBaseDir());
      executor.setCommandline(commandLine);
      try {
        executor.execute();
      }
 catch (      final IOException ioe) {
        throw new BuildException("Error running forked groovyc.",ioe);
      }
      final int returnCode=executor.getExitValue();
      if (returnCode != 0) {
        throw new BuildException("Forked groovyc returned error code: " + returnCode);
      }
    }
 else {
      try {
        Path classpath=getClasspath();
        if (classpath != null) {
          configuration.setClasspath(classpath.toString());
        }
        configuration.setTargetDirectory(destDir);
        if (encoding != null) {
          configuration.setSourceEncoding(encoding);
        }
        CompilationUnit unit=makeCompileUnit();
        unit.addSources(compileList);
        unit.compile();
      }
 catch (      Exception e) {
        StringWriter writer=new StringWriter();
        new ErrorReporter(e,false).write(new PrintWriter(writer));
        String message=writer.toString();
        if (failOnError) {
          throw new BuildException(message,e,getLocation());
        }
 else {
          log(message,Project.MSG_ERR);
        }
      }
    }
  }
}
