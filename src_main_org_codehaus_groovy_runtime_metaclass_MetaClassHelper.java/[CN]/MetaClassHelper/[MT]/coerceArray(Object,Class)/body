{
  if (!param.isArray())   return argument;
  Class argumentClass=argument.getClass();
  if (!argumentClass.isArray())   return argument;
  Class paramComponent=param.getComponentType();
  if (paramComponent.isPrimitive()) {
    if (paramComponent == boolean.class && argumentClass == Boolean[].class) {
      argument=DefaultTypeTransformation.convertToBooleanArray(argument);
    }
 else     if (paramComponent == byte.class && argumentClass == Byte[].class) {
      argument=DefaultTypeTransformation.convertToByteArray(argument);
    }
 else     if (paramComponent == char.class && argumentClass == Character[].class) {
      argument=DefaultTypeTransformation.convertToCharArray(argument);
    }
 else     if (paramComponent == short.class && argumentClass == Short[].class) {
      argument=DefaultTypeTransformation.convertToShortArray(argument);
    }
 else     if (paramComponent == int.class && argumentClass == Integer[].class) {
      argument=DefaultTypeTransformation.convertToIntArray(argument);
    }
 else     if (paramComponent == long.class && (argumentClass == Long[].class || argumentClass == Integer[].class)) {
      argument=DefaultTypeTransformation.convertToLongArray(argument);
    }
 else     if (paramComponent == float.class && (argumentClass == Float[].class || argumentClass == Integer[].class)) {
      argument=DefaultTypeTransformation.convertToFloatArray(argument);
    }
 else     if (paramComponent == double.class && (argumentClass == Double[].class || argumentClass == Float[].class || BigDecimal.class.isAssignableFrom(argumentClass))) {
      argument=DefaultTypeTransformation.convertToDoubleArray(argument);
    }
  }
 else   if (paramComponent == String.class && argument instanceof GString[]) {
    GString[] strings=(GString[])argument;
    String[] ret=new String[strings.length];
    for (int i=0; i < strings.length; i++) {
      ret[i]=strings[i].toString();
    }
    argument=ret;
  }
  return argument;
}
