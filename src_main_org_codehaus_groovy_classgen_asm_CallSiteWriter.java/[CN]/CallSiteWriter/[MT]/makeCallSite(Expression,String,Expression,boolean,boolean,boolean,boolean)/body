{
  prepareSiteAndReceiver(receiver,message,implicitThis);
  CompileStack compileStack=controller.getCompileStack();
  compileStack.pushImplicitThis(implicitThis);
  compileStack.pushLHS(false);
  boolean constructor=message.equals(CONSTRUCTOR);
  OperandStack operandStack=controller.getOperandStack();
  boolean containsSpreadExpression=AsmClassGenerator.containsSpreadExpression(arguments);
  int numberOfArguments=containsSpreadExpression ? -1 : AsmClassGenerator.argumentSize(arguments);
  int operandsToReplace=1;
  if (numberOfArguments > MethodCallerMultiAdapter.MAX_ARGS || containsSpreadExpression) {
    ArgumentListExpression ae;
    if (arguments instanceof ArgumentListExpression) {
      ae=(ArgumentListExpression)arguments;
    }
 else     if (arguments instanceof TupleExpression) {
      TupleExpression te=(TupleExpression)arguments;
      ae=new ArgumentListExpression(te.getExpressions());
    }
 else {
      ae=new ArgumentListExpression();
      ae.addExpression(arguments);
    }
    controller.getCompileStack().pushImplicitThis(false);
    if (containsSpreadExpression) {
      numberOfArguments=-1;
      controller.getAcg().despreadList(ae.getExpressions(),true);
    }
 else {
      numberOfArguments=ae.getExpressions().size();
      for (int i=0; i < numberOfArguments; i++) {
        Expression argument=ae.getExpression(i);
        argument.visit(controller.getAcg());
        operandStack.box();
        if (argument instanceof CastExpression)         controller.getAcg().loadWrapper(argument);
      }
      operandsToReplace+=numberOfArguments;
    }
    controller.getCompileStack().popImplicitThis();
  }
  controller.getCompileStack().popLHS();
  controller.getCompileStack().popImplicitThis();
  MethodVisitor mv=controller.getMethodVisitor();
  if (numberOfArguments > 4) {
    final String createArraySignature=getCreateArraySignature(numberOfArguments);
    mv.visitMethodInsn(INVOKESTATIC,"org/codehaus/groovy/runtime/ArrayUtil","createArray",createArraySignature);
    operandStack.replace(ClassHelper.OBJECT_TYPE.makeArray(),numberOfArguments);
    operandsToReplace=operandsToReplace - numberOfArguments + 1;
  }
  final String desc=getDescForParamNum(numberOfArguments);
  if (callStatic) {
    mv.visitMethodInsn(INVOKEINTERFACE,CALLSITE_CLASS,"callStatic","(Ljava/lang/Class;" + desc);
  }
 else   if (constructor) {
    mv.visitMethodInsn(INVOKEINTERFACE,CALLSITE_CLASS,"callConstructor","(Ljava/lang/Object;" + desc);
  }
 else   if (callCurrent) {
    mv.visitMethodInsn(INVOKEINTERFACE,CALLSITE_CLASS,"callCurrent","(Lgroovy/lang/GroovyObject;" + desc);
  }
 else   if (safe) {
    mv.visitMethodInsn(INVOKEINTERFACE,CALLSITE_CLASS,"callSafe","(Ljava/lang/Object;" + desc);
  }
 else {
    mv.visitMethodInsn(INVOKEINTERFACE,CALLSITE_CLASS,"call","(Ljava/lang/Object;" + desc);
  }
  operandStack.replace(ClassHelper.OBJECT_TYPE,operandsToReplace);
}
