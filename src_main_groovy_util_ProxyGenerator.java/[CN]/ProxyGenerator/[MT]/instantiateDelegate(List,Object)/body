{
  List interfacesToImplement=new ArrayList();
  if (interfaces != null) {
    interfacesToImplement=interfaces;
  }
  String name=shortName(delegate.getClass().getName()) + "_delegateProxy";
  StringBuffer buffer=new StringBuffer();
  buffer.append("import org.codehaus.groovy.runtime.InvokerHelper\nclass ").append(name);
  for (int i=0; i < interfacesToImplement.size(); i++) {
    Class thisInterface=(Class)interfacesToImplement.get(i);
    if (i == 0) {
      buffer.append(" implements ");
    }
 else {
      buffer.append(", ");
    }
    buffer.append(thisInterface.getName());
  }
  buffer.append(" {\n").append("    private delegate\n    ");
  buffer.append(name).append("(delegate) {\n");
  buffer.append("        this.delegate = delegate\n");
  buffer.append("    }\n");
  List objectMethods=DefaultGroovyMethods.toList(Object.class.getMethods());
  objectMethods.addAll(getInheritedMethods(Object.class));
  List groovyObjectMethods=DefaultGroovyMethods.toList(GroovyObject.class.getMethods());
  groovyObjectMethods.addAll(getInheritedMethods(GroovyObject.class));
  List interfaceMethods=new ArrayList();
  for (int i=0; i < interfacesToImplement.size(); i++) {
    Class thisInterface=(Class)interfacesToImplement.get(i);
    interfaceMethods.addAll(DefaultGroovyMethods.toList(thisInterface.getMethods()));
    interfaceMethods.addAll(getInheritedMethods(thisInterface));
  }
  for (int i=0; i < interfaceMethods.size(); i++) {
    Method method=(Method)interfaceMethods.get(i);
    if (!containsEquivalentMethod(objectMethods,method) && !containsEquivalentMethod(groovyObjectMethods,method)) {
      addWrappedCall(buffer,method);
    }
  }
  List additionalMethods=new ArrayList();
  additionalMethods.addAll(DefaultGroovyMethods.toList(delegate.getClass().getMethods()));
  additionalMethods.addAll(getInheritedMethods(delegate.getClass()));
  for (int i=0; i < additionalMethods.size(); i++) {
    Method method=(Method)additionalMethods.get(i);
    if (!containsEquivalentMethod(interfaceMethods,method) && !containsEquivalentMethod(objectMethods,method) && !containsEquivalentMethod(groovyObjectMethods,method)) {
      addWrappedCall(buffer,method);
    }
  }
  buffer.append("}\n").append("new ").append(name);
  buffer.append("(delegate)");
  Binding binding=new Binding();
  binding.setVariable("delegate",delegate);
  ClassLoader cl=delegate.getClass().getClassLoader();
  GroovyShell shell=new GroovyShell(cl,binding);
  if (debug)   System.out.println("proxy source:\n------------------\n" + buffer.toString() + "\n------------------");
  try {
    return shell.evaluate(buffer.toString());
  }
 catch (  MultipleCompilationErrorsException err) {
    throw new GroovyRuntimeException("Error creating proxy: " + err.getMessage());
  }
}
