{
  if (node == null)   return defaultText;
switch (node.getType()) {
case LITERAL_boolean:
    return "boolean";
case LITERAL_byte:
  return "byte";
case LITERAL_char:
return "char";
case LITERAL_double:
return "double";
case LITERAL_float:
return "float";
case LITERAL_int:
return "int";
case LITERAL_long:
return "long";
case LITERAL_short:
return "short";
case LITERAL_void:
return "void";
case ARRAY_DECLARATOR:
String componentType=getAsText(node,defaultText);
if (!componentType.equals("def")) return componentType + "[]";
return "java/lang/Object[]";
case IDENT:
StringBuilder ident=new StringBuilder();
ident.append(node.getText());
GroovySourceAST identChild=(GroovySourceAST)node.getFirstChild();
getTypeArguments(identChild,ident,defaultText);
return ident.toString();
case DOT:
StringBuilder dot=new StringBuilder();
GroovySourceAST dotChild=(GroovySourceAST)node.getFirstChild();
while (dotChild != null) {
if (dotChild.getType() == IDENT) {
if (dot.length() > 0) dot.append("/");
dot.append(getAsTextCurrent(dotChild,defaultText));
}
 else if (dotChild.getType() == DOT) {
if (dot.length() > 0) dot.append("/");
dot.append(getAsTextCurrent(dotChild,defaultText));
}
 else if (dotChild.getType() == TYPE_ARGUMENTS) {
getTypeArguments(dotChild,dot,defaultText);
}
dotChild=(GroovySourceAST)dotChild.getNextSibling();
}
return dot.toString();
}
return defaultText;
}
