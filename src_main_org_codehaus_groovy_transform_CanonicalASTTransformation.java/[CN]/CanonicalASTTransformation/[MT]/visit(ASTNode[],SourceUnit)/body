{
  init(nodes,source);
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  AnnotationNode node=(AnnotationNode)nodes[0];
  if (!MY_TYPE.equals(node.getClassNode()))   return;
  if (parent instanceof ClassNode) {
    ClassNode cNode=(ClassNode)parent;
    if (hasAnnotation(cNode,ImmutableASTTransformation.MY_TYPE)) {
      addError(MY_TYPE_NAME + " class '" + cNode.getName()+ "' can't also be "+ ImmutableASTTransformation.MY_TYPE_NAME,parent);
    }
    checkNotInterface(cNode,MY_TYPE_NAME);
    if (!hasAnnotation(cNode,TupleConstructorASTTransformation.MY_TYPE)) {
      createConstructor(cNode,false,true,false,false,false,false,new ArrayList<String>());
    }
    if (!hasAnnotation(cNode,EqualsAndHashCodeASTTransformation.MY_TYPE)) {
      createHashCode(cNode,false,false,false,new ArrayList<String>());
      createEquals(cNode,false,false,true,new ArrayList<String>());
    }
    if (!hasAnnotation(cNode,ToStringASTTransformation.MY_TYPE)) {
      toStringInit(cNode,ConstantExpression.FALSE);
      createToString(cNode,false,false,new ArrayList<String>());
    }
  }
}
