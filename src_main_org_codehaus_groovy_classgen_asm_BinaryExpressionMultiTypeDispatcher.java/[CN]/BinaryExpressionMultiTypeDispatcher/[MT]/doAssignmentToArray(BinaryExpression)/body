{
  if (!isAssignmentToArray(binExp))   return false;
  int operation=removeAssignment(binExp.getOperation().getType());
  ClassNode current=getController().getClassNode();
  Expression leftExp=binExp.getLeftExpression();
  ClassNode leftType=getController().getTypeChooser().resolveType(leftExp,current);
  Expression rightExp=binExp.getRightExpression();
  ClassNode rightType=getController().getTypeChooser().resolveType(rightExp,current);
  int operationType=getOperandConversionType(leftType,rightType);
  BinaryExpressionWriter bew=binExpWriter[operationType];
  boolean simulationSuccess=bew.arrayGet(LEFT_SQUARE_BRACKET,true);
  simulationSuccess=simulationSuccess && bew.write(operation,true);
  simulationSuccess=simulationSuccess && bew.arraySet(true);
  if (!simulationSuccess)   return false;
  AsmClassGenerator acg=getController().getAcg();
  OperandStack operandStack=getController().getOperandStack();
  CompileStack compileStack=getController().getCompileStack();
  BinaryExpression arrayWithSubscript=(BinaryExpression)leftExp;
  Expression subscript=arrayWithSubscript.getRightExpression();
  subscript.visit(acg);
  operandStack.doGroovyCast(int_TYPE);
  int subscriptValueId=compileStack.defineTemporaryVariable("$sub",ClassHelper.int_TYPE,true);
  arrayWithSubscript.getLeftExpression().visit(acg);
  operandStack.doGroovyCast(bew.getNormalOpResultType().makeArray());
  operandStack.dup();
  operandStack.load(ClassHelper.int_TYPE,subscriptValueId);
  bew.arrayGet(LEFT_SQUARE_BRACKET,false);
  operandStack.replace(leftType,2);
  binExp.getRightExpression().visit(acg);
  bew.write(operation,false);
  operandStack.dup();
  int resultValueId=compileStack.defineTemporaryVariable("$result",rightType,true);
  operandStack.load(ClassHelper.int_TYPE,subscriptValueId);
  operandStack.swap();
  bew.arraySet(false);
  operandStack.remove(3);
  operandStack.load(rightType,resultValueId);
  compileStack.removeVar(resultValueId);
  compileStack.removeVar(subscriptValueId);
  return true;
}
