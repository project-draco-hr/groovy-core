{
  int operation=removeAssignment(binExp.getOperation().getType());
  ClassNode current=getController().getClassNode();
  Expression leftExp=binExp.getLeftExpression();
  ClassNode leftTypeOrig=getController().getTypeChooser().resolveType(leftExp,current);
  ClassNode leftType=leftTypeOrig;
  Expression rightExp=binExp.getRightExpression();
  ClassNode rightType=getController().getTypeChooser().resolveType(rightExp,current);
  AsmClassGenerator acg=getController().getAcg();
  OperandStack os=getController().getOperandStack();
  if (operation == LEFT_SQUARE_BRACKET) {
    leftType=leftTypeOrig.getComponentType();
    int operationType=getOperandType(leftType);
    BinaryExpressionWriter bew=binExpWriter[operationType];
    if (leftTypeOrig.isArray() && isIntCastableType(rightExp) && bew.arrayGet(operation,true)) {
      leftExp.visit(acg);
      os.doGroovyCast(leftTypeOrig);
      rightExp.visit(acg);
      os.doGroovyCast(int_TYPE);
      bew.arrayGet(operation,false);
      if (bew instanceof BinaryObjectExpressionHelper) {
        os.replace(ClassHelper.OBJECT_TYPE,2);
      }
 else {
        os.replace(leftType,2);
      }
    }
 else {
      super.evaluateBinaryExpression(message,binExp);
    }
  }
 else {
    int operationType=getOperandConversionType(leftType,rightType);
    BinaryExpressionWriter bew=binExpWriter[operationType];
    if (isShiftOperation(operation) && isIntCastableType(rightExp) && bew.write(operation,true)) {
      leftExp.visit(acg);
      os.doGroovyCast(bew.getNormalOpResultType());
      rightExp.visit(acg);
      os.doGroovyCast(int_TYPE);
      bew.write(operation,false);
    }
 else     if (operation == DIVIDE && bew.writeDivision(true)) {
      leftExp.visit(acg);
      os.doGroovyCast(bew.getDevisionOpResultType());
      rightExp.visit(acg);
      os.doGroovyCast(bew.getDevisionOpResultType());
      bew.writeDivision(false);
    }
 else     if (bew.write(operation,true)) {
      leftExp.visit(acg);
      os.doGroovyCast(bew.getNormalOpResultType());
      rightExp.visit(acg);
      os.doGroovyCast(bew.getNormalOpResultType());
      bew.write(operation,false);
    }
 else {
      super.evaluateBinaryExpression(message,binExp);
    }
  }
}
