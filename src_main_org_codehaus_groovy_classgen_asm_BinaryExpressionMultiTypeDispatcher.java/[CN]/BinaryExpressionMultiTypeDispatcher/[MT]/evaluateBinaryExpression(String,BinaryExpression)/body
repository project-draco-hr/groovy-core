{
  int operation=binExp.getOperation().getType();
  ClassNode current=getController().getClassNode();
  Expression leftExp=binExp.getLeftExpression();
  ClassNode leftType=getType(leftExp,current);
  Expression rightExp=binExp.getRightExpression();
  ClassNode rightType=getType(rightExp,current);
  int operationType=getOperandConversionType(leftType,rightType);
  BinaryExpressionWriter bew=binExpWriter[operationType];
  AsmClassGenerator acg=getController().getAcg();
  OperandStack os=getController().getOperandStack();
  if (bew.arrayGet(operation,true)) {
    leftExp.visit(acg);
    os.doGroovyCast(leftType);
    rightExp.visit(acg);
    os.doGroovyCast(int_TYPE);
    bew.arrayGet(operation,false);
  }
 else   if (bew.write(operation,true)) {
    leftExp.visit(acg);
    os.doGroovyCast(int_TYPE);
    rightExp.visit(acg);
    os.doGroovyCast(int_TYPE);
    bew.write(operation,false);
  }
 else {
    super.evaluateBinaryExpression(message,binExp);
  }
}
