{
  ClassNode current=getController().getClassNode();
  TypeChooser typeChooser=getController().getTypeChooser();
  int operation=binExp.getOperation().getType();
  Expression leftExp=binExp.getLeftExpression();
  ClassNode leftType=typeChooser.resolveType(leftExp,current);
  Expression rightExp=binExp.getRightExpression();
  ClassNode rightType=typeChooser.resolveType(rightExp,current);
  int operationType=getOperandConversionType(leftType,rightType);
  BinaryExpressionWriter bew=binExpWriter[operationType];
  if (bew.write(operation,true)) {
    AsmClassGenerator acg=getController().getAcg();
    OperandStack os=getController().getOperandStack();
    leftExp.visit(acg);
    os.doGroovyCast(bew.getNormalOpResultType());
    rightExp.visit(acg);
    os.doGroovyCast(bew.getNormalOpResultType());
    bew.write(operation,false);
  }
 else {
    super.evaluateCompareExpression(compareMethod,binExp);
  }
}
