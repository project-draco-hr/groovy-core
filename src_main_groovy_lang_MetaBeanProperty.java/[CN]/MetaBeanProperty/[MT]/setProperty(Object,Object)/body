{
  if (setter == null) {
    throw new GroovyRuntimeException("Cannot set read-only property: " + name);
  }
  try {
    if (getType() == String.class && !(newValue instanceof String)) {
      newValue=newValue.toString();
    }
    if (newValue instanceof java.math.BigDecimal) {
      if (getType() == Double.class) {
        newValue=new Double(((java.math.BigDecimal)newValue).doubleValue());
      }
 else       if (getType() == Float.class) {
        newValue=new Float(((java.math.BigDecimal)newValue).floatValue());
      }
 else       if (getType() == Long.class) {
        newValue=new Long(((java.math.BigDecimal)newValue).longValue());
      }
 else       if (getType() == Integer.class) {
        newValue=new Integer(((java.math.BigDecimal)newValue).intValue());
      }
 else       if (getType() == Short.class) {
        newValue=new Short((short)((java.math.BigDecimal)newValue).intValue());
      }
 else       if (getType() == Byte.class) {
        newValue=new Byte((byte)((java.math.BigDecimal)newValue).intValue());
      }
 else       if (getType() == Character.class) {
        newValue=new Character((char)((java.math.BigDecimal)newValue).intValue());
      }
    }
 else     if (newValue instanceof java.math.BigInteger) {
      if (getType() == Long.class) {
        newValue=new Long(((java.math.BigInteger)newValue).longValue());
      }
 else       if (getType() == Integer.class) {
        newValue=new Integer(((java.math.BigInteger)newValue).intValue());
      }
 else       if (getType() == Short.class) {
        newValue=new Short((short)((java.math.BigInteger)newValue).intValue());
      }
 else       if (getType() == Byte.class) {
        newValue=new Byte((byte)((java.math.BigInteger)newValue).intValue());
      }
 else       if (getType() == Character.class) {
        newValue=new Character((char)((java.math.BigInteger)newValue).intValue());
      }
    }
 else     if (newValue instanceof java.lang.Long) {
      if (getType() == Integer.class) {
        newValue=new Integer(((Long)newValue).intValue());
      }
 else       if (getType() == Short.class) {
        newValue=new Short(((Long)newValue).shortValue());
      }
 else       if (getType() == Byte.class) {
        newValue=new Byte(((Long)newValue).byteValue());
      }
 else       if (getType() == Character.class) {
        newValue=new Character((char)((Long)newValue).intValue());
      }
    }
 else     if (newValue instanceof java.lang.Integer) {
      if (getType() == Short.class) {
        newValue=new Short(((Integer)newValue).shortValue());
      }
 else       if (getType() == Byte.class) {
        newValue=new Byte(((Integer)newValue).byteValue());
      }
 else       if (getType() == Character.class) {
        newValue=new Character((char)((Integer)newValue).intValue());
      }
    }
    setter.invoke(object,new Object[]{newValue});
  }
 catch (  IllegalArgumentException e) {
    try {
      newValue=InvokerHelper.asType(newValue,getType());
      setter.invoke(object,new Object[]{newValue});
    }
 catch (    Exception ex) {
      throw new TypeMismatchException("The property '" + toName(object.getClass()) + "."+ name+ "' can not refer to the value '"+ newValue+ "' (type "+ toName(newValue.getClass())+ "), because it is of the type "+ toName(getType())+ ". The reason is from java.lang.IllegalArgumentException.");
    }
  }
catch (  ClassCastException e) {
    try {
      newValue=InvokerHelper.asType(newValue,getType());
      setter.invoke(object,new Object[]{newValue});
    }
 catch (    Exception ex) {
      throw new TypeMismatchException("The property '" + toName(object.getClass()) + "."+ name+ "' can not refer to the value '"+ newValue+ "' (type "+ toName(newValue.getClass())+ "), because it is of the type "+ toName(getType())+ ". The reason is from java.lang.ClassCastException.");
    }
  }
catch (  Exception e) {
    throw new GroovyRuntimeException("Cannot set property: " + name + " reason: "+ e.getMessage(),e);
  }
}
