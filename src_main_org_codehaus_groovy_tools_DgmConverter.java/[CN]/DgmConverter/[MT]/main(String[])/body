{
  boolean info=args.length == 1 && args[0].equals("--info");
  List<CachedMethod> cachedMethodsList=new ArrayList<CachedMethod>();
  for (  Class aClass : DefaultGroovyMethods.DGM_LIKE_CLASSES) {
    Collections.addAll(cachedMethodsList,ReflectionCache.getCachedClass(aClass).getMethods());
  }
  final CachedMethod[] cachedMethods=cachedMethodsList.toArray(new CachedMethod[cachedMethodsList.size()]);
  List<GeneratedMetaMethod.DgmMethodRecord> records=new ArrayList<GeneratedMetaMethod.DgmMethodRecord>();
  int cur=0;
  for (  CachedMethod method : cachedMethods) {
    if (!method.isStatic() || !method.isPublic())     continue;
    if (method.getCachedMethod().getAnnotation(Deprecated.class) != null)     continue;
    if (method.getParameterTypes().length == 0)     continue;
    final Class returnType=method.getReturnType();
    final String className="org/codehaus/groovy/runtime/dgm$" + cur++;
    GeneratedMetaMethod.DgmMethodRecord record=new GeneratedMetaMethod.DgmMethodRecord();
    records.add(record);
    record.methodName=method.getName();
    record.returnType=method.getReturnType();
    record.parameters=method.getNativeParameterTypes();
    record.className=className;
    ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);
    cw.visit(V1_3,ACC_PUBLIC,className,null,"org/codehaus/groovy/reflection/GeneratedMetaMethod",null);
    createConstructor(cw);
    final String methodDescriptor=BytecodeHelper.getMethodDescriptor(returnType,method.getNativeParameterTypes());
    createInvokeMethod(method,cw,returnType,methodDescriptor);
    createDoMethodInvokeMethod(method,cw,className,returnType,methodDescriptor);
    createIsValidMethodMethod(method,cw,className);
    cw.visitEnd();
    final byte[] bytes=cw.toByteArray();
    final FileOutputStream fileOutputStream=new FileOutputStream("target/classes/" + className + ".class");
    fileOutputStream.write(bytes);
    fileOutputStream.flush();
    fileOutputStream.close();
  }
  GeneratedMetaMethod.DgmMethodRecord.saveDgmInfo(records,"target/classes/META-INF/dgminfo");
  if (info)   System.out.println("Saved " + cur + " dgm records to: target/classes/META-INF/dgminfo");
}
