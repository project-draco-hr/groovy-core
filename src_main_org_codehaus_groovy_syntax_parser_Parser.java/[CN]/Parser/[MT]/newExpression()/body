{
  Reduction expression=consume(Types.KEYWORD_NEW).asReduction();
  CSTNode scalarType=scalarDatatype(false);
  if (lt(true) == Types.LEFT_SQUARE_BRACKET) {
    boolean implicit=(lt(2) == Types.RIGHT_SQUARE_BRACKET);
    Reduction dimensions=implicit ? Reduction.EMPTY : Reduction.newContainer();
    int count=0;
    CSTNode arrayType=scalarType;
    while (lt(true) == Types.LEFT_SQUARE_BRACKET) {
      arrayType=consume(Types.LEFT_SQUARE_BRACKET).asReduction(arrayType);
      count++;
      if (!implicit) {
        dimensions.add(expression());
      }
      consume(Types.RIGHT_SQUARE_BRACKET);
    }
    expression.add(arrayType);
    expression.add(dimensions);
    if (implicit) {
      expression.add(tupleExpression(0,count));
    }
  }
 else {
    expression.add(scalarType);
    Reduction parameters=null;
    consume(Types.LEFT_PARENTHESIS);
    parameters=(lt() == Types.RIGHT_PARENTHESIS ? Reduction.newContainer() : parameterList());
    consume(Types.RIGHT_PARENTHESIS);
    expression.add(parameters);
    if (lt() == Types.LEFT_CURLY_BRACE) {
      if (lt(2) == Types.PIPE || lt(2) == Types.DOUBLE_PIPE) {
        parameters.add(closureExpression());
      }
 else {
        expression.add(typeBody(true,false,false));
      }
    }
  }
  return expression;
}
