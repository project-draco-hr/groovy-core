{
  CSTNode expr=rootNode(Token.LEFT_CURLY_BRACE);
  boolean pipeRequired=false;
  if (lt(1) == Token.KEYWORD_BOOLEAN || lt(1) == Token.KEYWORD_BYTE || lt(1) == Token.KEYWORD_CHAR || lt(1) == Token.KEYWORD_DOUBLE || lt(1) == Token.KEYWORD_FLOAT || lt(1) == Token.KEYWORD_INT || lt(1) == Token.KEYWORD_LONG || lt(1) == Token.KEYWORD_SHORT || lt(2) == Token.PIPE || lt(2) == Token.COMMA || lt(3) == Token.PIPE || lt(3) == Token.COMMA) {
    expr.addChild(parameterDeclarationList());
    pipeRequired=true;
  }
 else {
    expr.addChild(new CSTNode());
  }
  if (pipeRequired || lt() == Token.PIPE) {
    consume(Token.PIPE);
  }
  CSTNode block=new CSTNode();
  statementsUntilRightCurly(block);
  consume(Token.RIGHT_CURLY_BRACE);
  expr.addChild(block);
  return expr;
}
