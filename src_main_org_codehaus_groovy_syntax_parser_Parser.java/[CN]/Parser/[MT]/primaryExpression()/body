{
  CSTNode expr=null;
  CSTNode identifier=null;
  PREFIX_SWITCH: switch (lt_bare()) {
case (Token.KEYWORD_TRUE):
case (Token.KEYWORD_FALSE):
case (Token.KEYWORD_NULL):
{
      expr=rootNode(lt_bare());
      break PREFIX_SWITCH;
    }
case (Token.KEYWORD_NEW):
{
    expr=newExpression();
    break PREFIX_SWITCH;
  }
case (Token.LEFT_PARENTHESIS):
{
  expr=parentheticalExpression();
  break PREFIX_SWITCH;
}
case (Token.INTEGER_NUMBER):
case (Token.FLOAT_NUMBER):
case (Token.SINGLE_QUOTE_STRING):
{
expr=rootNode(lt_bare());
break PREFIX_SWITCH;
}
case (Token.DOUBLE_QUOTE_STRING):
{
expr=doubleQuotedString();
break PREFIX_SWITCH;
}
case (Token.LEFT_SQUARE_BRACKET):
{
expr=listOrMapExpression();
break PREFIX_SWITCH;
}
case (Token.LEFT_CURLY_BRACE):
{
expr=closureExpression();
break PREFIX_SWITCH;
}
case (Token.KEYWORD_THIS):
{
expr=new CSTNode(Token.keyword(-1,-1,"this"));
identifier=rootNode(lt_bare());
break PREFIX_SWITCH;
}
case (Token.KEYWORD_SUPER):
{
expr=new CSTNode(Token.keyword(-1,-1,"super"));
identifier=rootNode(lt_bare());
break PREFIX_SWITCH;
}
case (Token.IDENTIFIER):
{
identifier=rootNode(lt_bare());
expr=identifier;
break PREFIX_SWITCH;
}
case (Token.PATTERN_REGEX):
{
expr=regexPattern();
break PREFIX_SWITCH;
}
default :
{
throwExpected(new int[]{});
}
}
if (identifier != null) {
if (lt_bare() == Token.LEFT_PARENTHESIS || lt_bare() == Token.LEFT_CURLY_BRACE) {
if (expr == identifier) {
CSTNode replacementExpr=new CSTNode();
CSTNode resultExpr=sugaryMethodCallExpression(replacementExpr,identifier,null);
if (resultExpr != replacementExpr) {
expr=resultExpr;
}
}
 else {
expr=sugaryMethodCallExpression(expr,identifier,null);
}
}
 else {
CSTNode methodCall=tryParseMethodCallWithoutParenthesis(expr,identifier);
if (methodCall != null) {
expr=methodCall;
}
}
}
while (lt_bare() == Token.LEFT_SQUARE_BRACKET || lookAheadForMethodCall()) {
if (lt_bare() == Token.LEFT_SQUARE_BRACKET) {
expr=subscriptExpression(expr);
}
 else {
expr=methodCallOrPropertyExpression(expr);
}
}
return expr;
}
