{
  CSTNode expr=null;
switch (lt()) {
case (Token.KEYWORD_TRUE):
case (Token.KEYWORD_FALSE):
case (Token.KEYWORD_NULL):
{
      expr=rootNode(lt());
      break;
    }
case (Token.LEFT_PARENTHESIS):
{
    consume(Token.LEFT_PARENTHESIS);
    expr=expression();
    consume(Token.RIGHT_PARENTHESIS);
    break;
  }
case (Token.KEYWORD_THIS):
case (Token.KEYWORD_SUPER):
case (Token.IDENTIFIER):
{
  CSTNode cur=rootNode(lt());
  while (lt() == Token.DOT) {
    cur=rootNode(Token.DOT,cur);
    consume(cur,Token.IDENTIFIER);
  }
  if (lt() == Token.LEFT_PARENTHESIS) {
    cur=rootNode(Token.LEFT_PARENTHESIS,cur);
    cur.addChild(argumentList());
    consume(Token.RIGHT_PARENTHESIS);
  }
  expr=cur;
  break;
}
case (Token.INTEGER_NUMBER):
case (Token.FLOAT_NUMBER):
case (Token.DOUBLE_QUOTE_STRING):
case (Token.SINGLE_QUOTE_STRING):
{
expr=rootNode(lt());
break;
}
default :
{
throwExpected(new int[]{});
}
}
return expr;
}
