{
  CSTNode statement=null;
  CSTNode label=null;
  if (lt() == Types.IDENTIFIER && lt(2) == Types.COLON) {
    label=consume(Types.IDENTIFIER).asReduction();
    label.setMeaning(Types.SYNTH_LABEL);
    consume(Types.COLON);
  }
switch (lt()) {
case Types.KEYWORD_ASSERT:
{
      statement=assertStatement();
      break;
    }
case Types.KEYWORD_BREAK:
{
    statement=breakStatement();
    break;
  }
case Types.KEYWORD_CONTINUE:
{
  statement=continueStatement();
  break;
}
case Types.KEYWORD_IF:
{
statement=ifStatement();
break;
}
case Types.KEYWORD_RETURN:
{
statement=returnStatement();
break;
}
case Types.KEYWORD_SWITCH:
{
statement=switchStatement();
break;
}
case Types.KEYWORD_SYNCHRONIZED:
{
statement=synchronizedStatement();
break;
}
case Types.KEYWORD_THROW:
{
statement=throwStatement();
break;
}
case Types.KEYWORD_TRY:
{
statement=tryStatement();
break;
}
case Types.KEYWORD_FOR:
{
statement=forStatement();
break;
}
case Types.KEYWORD_DO:
{
statement=doWhileStatement();
break;
}
case Types.KEYWORD_WHILE:
{
statement=whileStatement();
break;
}
case Types.SEMICOLON:
{
statement=consume().asReduction();
statement.setMeaning(Types.SYNTH_BLOCK);
break;
}
case Types.LEFT_CURLY_BRACE:
{
statement=expression();
if (statement.isA(Types.SYNTH_CLOSURE)) {
if (!statement.get(1).hasChildren()) {
Reduction block=statement.getRoot().asReduction();
block.setMeaning(Types.SYNTH_BLOCK);
block.addChildrenOf(statement.get(2));
if (label == null && !allowUnlabelledBlocks) {
collector.add(new ParserException("groovy does not support anonymous blocks; please add a label",statement.getRoot()));
}
statement=block;
}
}
 else {
endOfStatement();
}
break;
}
default :
{
try {
statement=expression();
endOfStatement();
}
 catch (SyntaxException e) {
collector.add(e);
recover();
}
}
}
if (label != null) {
label.add(statement);
statement=label;
}
return statement;
}
