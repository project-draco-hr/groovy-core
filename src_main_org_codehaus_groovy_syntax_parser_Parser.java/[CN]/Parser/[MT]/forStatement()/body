{
  Reduction statement=consume(Types.KEYWORD_FOR).asReduction();
  consume(Types.LEFT_PARENTHESIS);
  getTokenStream().checkpoint();
  Reduction header=null;
  CSTNode datatype=optionalDatatype(false,false);
  if (lt(2) == Types.KEYWORD_IN || lt(2) == Types.COLON) {
    Token name=nameDeclaration(false);
    header=consume().asReduction(datatype,name,expression());
  }
 else {
    getTokenStream().restore();
    header=Reduction.newContainer();
    Reduction init=Reduction.newContainer();
    while (lt() != Types.SEMICOLON && lt() != Types.EOF) {
      init.add(expression());
      if (lt() != Types.SEMICOLON) {
        consume(Types.COMMA);
      }
    }
    consume(Types.SEMICOLON);
    header.add(init);
    header.add(expression());
    consume(Types.SEMICOLON);
    Reduction incr=(Reduction)header.add(Reduction.newContainer());
    while (lt() != Types.RIGHT_PARENTHESIS && lt() != Types.EOF) {
      incr.add(expression());
      if (lt() != Types.RIGHT_PARENTHESIS) {
        consume(Types.COMMA);
      }
    }
  }
  consume(Types.RIGHT_PARENTHESIS);
  statement.add(header);
  statement.add(statementBody(false));
  return statement;
}
