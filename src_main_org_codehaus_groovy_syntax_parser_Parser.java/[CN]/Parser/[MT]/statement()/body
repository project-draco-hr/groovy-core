{
  CSTNode statement=null;
switch (lt()) {
case (Token.KEYWORD_FOR):
{
      statement=forStatement();
      break;
    }
case (Token.KEYWORD_WHILE):
{
    statement=whileStatement();
    break;
  }
case (Token.KEYWORD_DO):
{
  statement=doWhileStatement();
  break;
}
case (Token.KEYWORD_CONTINUE):
{
statement=continueStatement();
break;
}
case (Token.KEYWORD_BREAK):
{
statement=breakStatement();
break;
}
case (Token.KEYWORD_IF):
{
statement=ifStatement();
break;
}
case (Token.KEYWORD_TRY):
{
statement=tryStatement();
break;
}
case (Token.KEYWORD_THROW):
{
statement=throwStatement();
break;
}
case (Token.KEYWORD_SYNCHRONIZED):
{
statement=synchronizedStatement();
break;
}
case (Token.KEYWORD_SWITCH):
{
statement=switchStatement();
break;
}
case (Token.KEYWORD_RETURN):
{
statement=returnStatement();
optionalSemicolon();
break;
}
case (Token.KEYWORD_ASSERT):
{
statement=assertStatement();
optionalSemicolon();
break;
}
default :
{
try {
statement=expression();
optionalSemicolon();
}
 catch (SyntaxException e) {
collector.add(e);
errorCorrect();
}
}
}
return statement;
}
