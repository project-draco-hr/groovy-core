{
  CSTNode expr=rangeExpression();
switch (lt_bare()) {
case (Token.COMPARE_LESS_THAN):
case (Token.COMPARE_LESS_THAN_EQUAL):
case (Token.COMPARE_GREATER_THAN):
case (Token.COMPARE_GREATER_THAN_EQUAL):
case (Token.FIND_REGEX):
case (Token.MATCH_REGEX):
case (Token.KEYWORD_INSTANCEOF):
{
      expr=rootNode(lt_bare(),expr);
      optionalNewlines();
      expr.addChild(rangeExpression());
      break;
    }
case (Token.LEFT_SQUARE_BRACKET):
{
    expr=rootNode(lt_bare(),expr);
    optionalNewlines();
    CSTNode rangeExpr=rangeExpression();
    if (lt_bare() != Token.COMMA) {
      expr.addChild(rangeExpr);
    }
 else {
      consume_bare(Token.COMMA);
      CSTNode listExpr=new CSTNode(Token.syntheticList());
      expr.addChild(listExpr);
      listExpr.addChild(rangeExpr);
      while (true) {
        optionalNewlines();
        listExpr.addChild(rangeExpression());
        if (lt_bare() == Token.COMMA) {
          consume_bare(Token.COMMA);
        }
 else {
          break;
        }
      }
    }
    optionalNewlines();
    consume(Token.RIGHT_SQUARE_BRACKET);
    break;
  }
}
return expr;
}
