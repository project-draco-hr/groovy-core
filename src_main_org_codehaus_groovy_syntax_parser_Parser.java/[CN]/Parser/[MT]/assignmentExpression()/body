{
  CSTNode expr=null;
  if (lt_bare() == Token.IDENTIFIER && lt_bare(2) == Token.IDENTIFIER && lt_bare(3) == Token.EQUAL) {
    CSTNode typeExpr=new CSTNode(consume_bare(lt_bare()));
    expr=new CSTNode(consume_bare(lt_bare()));
    expr.addChild(typeExpr);
  }
 else {
    expr=ternaryExpression();
  }
switch (lt_bare()) {
case (Token.EQUAL):
case (Token.PLUS_EQUAL):
case (Token.MINUS_EQUAL):
case (Token.DIVIDE_EQUAL):
case (Token.MULTIPLY_EQUAL):
case (Token.MOD_EQUAL):
{
      expr=rootNode(lt_bare(),expr);
      optionalNewlines();
      expr.addChild(ternaryExpression());
      break;
    }
}
return expr;
}
