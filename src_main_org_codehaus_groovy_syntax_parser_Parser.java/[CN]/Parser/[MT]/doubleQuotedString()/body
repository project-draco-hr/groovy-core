{
  Token token=consume(Token.DOUBLE_QUOTE_STRING);
  String text=token.getText();
  CSTNode expr=new CSTNode(token);
  int textStart=0;
  int cur=0;
  int len=text.length();
  while (cur < len) {
    int exprStart=text.indexOf("${",cur);
    if (exprStart < 0) {
      break;
    }
    if (exprStart > 0) {
      if (text.charAt(exprStart - 1) == '$') {
        StringBuffer buf=new StringBuffer(text);
        buf.replace(exprStart - 1,exprStart,"");
        text=buf.toString();
        cur=exprStart + 1;
        continue;
      }
    }
    expr.addChild(new CSTNode(Token.singleQuoteString(token.getStartLine(),token.getStartColumn() + cur + 1,text.substring(textStart,exprStart))));
    int exprEnd=text.indexOf("}",exprStart);
    String exprText=text.substring(exprStart + 2,exprEnd);
    StringCharStream exprStream=new StringCharStream(exprText);
    Lexer lexer=new Lexer(exprStream);
    Parser parser=new Parser(new LexerTokenStream(lexer));
    CSTNode embeddedExpr=parser.expression();
    expr.addChild(embeddedExpr);
    cur=exprEnd + 1;
    textStart=cur;
  }
  if (textStart < len) {
    expr.addChild(new CSTNode(Token.singleQuoteString(token.getStartLine(),token.getStartColumn() + textStart + 1,text.substring(textStart))));
  }
  return expr;
}
