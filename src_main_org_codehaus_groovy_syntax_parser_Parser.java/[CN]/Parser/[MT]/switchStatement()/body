{
  CSTNode statement=rootNode(Token.KEYWORD_SWITCH);
  consume(Token.LEFT_PARENTHESIS);
  statement.addChild(expression());
  consume(Token.RIGHT_PARENTHESIS);
  consume(Token.LEFT_CURLY_BRACE);
  while (lt() == Token.KEYWORD_CASE) {
    CSTNode caseBlock=rootNode(Token.KEYWORD_CASE);
    caseBlock.addChild(expression());
    consume(Token.COLON);
    while (lt() != Token.RIGHT_CURLY_BRACE && lt() != Token.KEYWORD_CASE && lt() != Token.KEYWORD_DEFAULT) {
      caseBlock.addChild(statement());
      if (lt() == Token.RIGHT_CURLY_BRACE) {
        break;
      }
 else       if (lt() == -1) {
        throwExpected(new int[]{Token.RIGHT_CURLY_BRACE});
      }
    }
    statement.addChild(caseBlock);
  }
  if (lt() == Token.KEYWORD_DEFAULT) {
    CSTNode caseBlock=rootNode(Token.KEYWORD_DEFAULT);
    consume(Token.COLON);
    while (lt() != Token.RIGHT_CURLY_BRACE) {
      caseBlock.addChild(statement());
      if (lt() == Token.RIGHT_CURLY_BRACE) {
        break;
      }
 else       if (lt() == -1) {
        throwExpected(new int[]{Token.RIGHT_CURLY_BRACE});
      }
    }
    statement.addChild(caseBlock);
  }
  consume(Token.RIGHT_CURLY_BRACE);
  return statement;
}
