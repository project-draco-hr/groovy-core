{
  if (visit == OPENING_VISIT && !insideEnum && !insideAnonymousInnerClass()) {
    SimpleGroovyClassDoc currentClassDoc=getCurrentClassDoc();
    if (currentClassDoc == null) {
      if ("true".equals(properties.getProperty("processScripts","true"))) {
        currentClassDoc=new SimpleGroovyClassDoc(importedClassesAndPackages,className,links);
        currentClassDoc.setFullPathName(packagePath + FS + className);
        currentClassDoc.setPublic(true);
        currentClassDoc.setScript(true);
        currentClassDoc.setSuperClassName("groovy/lang/Script");
        if ("true".equals(properties.getProperty("includeMainForScripts","true"))) {
          currentClassDoc.add(createMainMethod(currentClassDoc));
        }
        classDocs.put(currentClassDoc.getFullPathName(),currentClassDoc);
        if (foundClasses == null) {
          foundClasses=new HashMap<String,SimpleGroovyClassDoc>();
        }
        foundClasses.put(className,currentClassDoc);
      }
 else {
        return;
      }
    }
    String methodName=getIdentFor(t);
    SimpleGroovyMethodDoc currentMethodDoc=new SimpleGroovyMethodDoc(methodName,currentClassDoc);
    currentMethodDoc.setRawCommentText(getJavaDocCommentsBeforeNode(t));
    processModifiers(t,currentMethodDoc);
    currentMethodDoc.setReturnType(new SimpleGroovyType(getTypeOrDefault(t)));
    addParametersTo(t,currentMethodDoc);
    processAnnotations(t,currentMethodDoc);
    currentClassDoc.add(currentMethodDoc);
  }
}
