{
  if (visit == OPENING_VISIT) {
    String methodName=t.childOfType(GroovyTokenTypes.IDENT).getText();
    currentMethodDoc=new SimpleGroovyMethodDoc(methodName,links);
    String commentText=getJavaDocCommentsBeforeNode(t);
    currentMethodDoc.setRawCommentText(commentText);
    GroovySourceAST modifiers=t.childOfType(GroovyTokenTypes.MODIFIERS);
    if (modifiers != null) {
      AST currentModifier=modifiers.getFirstChild();
      while (currentModifier != null) {
        if (currentModifier.getType() == GroovyTokenTypes.LITERAL_static) {
          currentMethodDoc.setStatic(true);
        }
        currentModifier=currentModifier.getNextSibling();
      }
    }
    String returnTypeName=getTypeNodeAsText(t.childOfType(GroovyTokenTypes.TYPE),"def");
    SimpleGroovyType returnType=new SimpleGroovyType(returnTypeName);
    currentMethodDoc.setReturnType(returnType);
    addParametersTo(currentMethodDoc,t,visit);
    currentClassDoc.add(currentMethodDoc);
  }
}
