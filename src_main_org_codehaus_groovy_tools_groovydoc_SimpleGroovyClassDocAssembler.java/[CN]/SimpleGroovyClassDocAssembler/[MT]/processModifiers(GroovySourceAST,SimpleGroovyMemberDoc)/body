{
  GroovySourceAST modifiers=t.childOfType(MODIFIERS);
  if (modifiers != null) {
    AST currentModifier=modifiers.getFirstChild();
    boolean hasNonPublicVisibility=false;
    boolean hasPublicVisibility=false;
    while (currentModifier != null) {
      int type=currentModifier.getType();
switch (type) {
case LITERAL_public:
        memberDoc.setPublic(true);
      hasPublicVisibility=true;
    break;
case LITERAL_protected:
  memberDoc.setProtected(true);
hasNonPublicVisibility=true;
break;
case LITERAL_private:
memberDoc.setPrivate(true);
hasNonPublicVisibility=true;
break;
case LITERAL_static:
memberDoc.setStatic(true);
break;
case FINAL:
memberDoc.setFinal(true);
break;
case ABSTRACT:
memberDoc.setAbstract(true);
break;
}
currentModifier=currentModifier.getNextSibling();
}
if (!hasNonPublicVisibility && !(memberDoc instanceof GroovyFieldDoc)) {
memberDoc.setPublic(true);
}
if (memberDoc instanceof GroovyFieldDoc && !hasNonPublicVisibility && !hasPublicVisibility&& isGroovy) return true;
}
return memberDoc instanceof GroovyFieldDoc && isGroovy;
}
