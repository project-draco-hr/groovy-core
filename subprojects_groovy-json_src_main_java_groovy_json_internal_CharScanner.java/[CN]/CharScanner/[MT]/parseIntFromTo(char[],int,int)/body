{
  try {
    int num;
    boolean negative=false;
    char c=digitChars[offset];
    if (c == '-') {
      offset++;
      negative=true;
    }
    if (negative) {
      num=(digitChars[offset] - '0');
      if (++offset < to) {
        num=(num * 10) + (digitChars[offset] - '0');
        if (++offset < to) {
          num=(num * 10) + (digitChars[offset] - '0');
          if (++offset < to) {
            num=(num * 10) + (digitChars[offset] - '0');
            if (++offset < to) {
              num=(num * 10) + (digitChars[offset] - '0');
              if (++offset < to) {
                num=(num * 10) + (digitChars[offset] - '0');
                if (++offset < to) {
                  num=(num * 10) + (digitChars[offset] - '0');
                  if (++offset < to) {
                    num=(num * 10) + (digitChars[offset] - '0');
                    if (++offset < to) {
                      num=(num * 10) + (digitChars[offset] - '0');
                      if (++offset < to) {
                        num=(num * 10) + (digitChars[offset] - '0');
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else {
      num=(digitChars[offset] - '0');
      if (++offset < to) {
        num=(num * 10) + (digitChars[offset] - '0');
        if (++offset < to) {
          num=(num * 10) + (digitChars[offset] - '0');
          if (++offset < to) {
            num=(num * 10) + (digitChars[offset] - '0');
            if (++offset < to) {
              num=(num * 10) + (digitChars[offset] - '0');
              if (++offset < to) {
                num=(num * 10) + (digitChars[offset] - '0');
                if (++offset < to) {
                  num=(num * 10) + (digitChars[offset] - '0');
                  if (++offset < to) {
                    num=(num * 10) + (digitChars[offset] - '0');
                    if (++offset < to) {
                      num=(num * 10) + (digitChars[offset] - '0');
                      if (++offset < to) {
                        num=(num * 10) + (digitChars[offset] - '0');
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return negative ? num * -1 : num;
  }
 catch (  Exception ex) {
    return handle(int.class,ex);
  }
}
