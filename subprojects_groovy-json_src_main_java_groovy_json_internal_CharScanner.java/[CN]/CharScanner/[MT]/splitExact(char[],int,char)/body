{
  char[][] results=new char[resultsArrayLength][];
  int resultIndex=0;
  int startCurrentLineIndex=0;
  int currentLineLength=1;
  char c='\u0000';
  int index=0;
  int j;
  char split;
  for (; index < inputArray.length; index++, currentLineLength++) {
    c=inputArray[index];
    inner:     for (j=0; j < delims.length; j++) {
      split=delims[j];
      if (c == split) {
        results[resultIndex]=Chr.copy(inputArray,startCurrentLineIndex,currentLineLength - 1);
        startCurrentLineIndex=index + 1;
        currentLineLength=0;
        resultIndex++;
        break inner;
      }
    }
  }
  if (!Chr.in(c,delims)) {
    results[resultIndex]=Chr.copy(inputArray,startCurrentLineIndex,currentLineLength - 1);
    resultIndex++;
  }
  int actualLength=resultIndex;
  if (actualLength < resultsArrayLength) {
    final int newSize=resultsArrayLength - actualLength;
    results=__shrink(results,newSize);
  }
  return results;
}
