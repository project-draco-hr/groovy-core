{
  final StringBuffer code=new StringBuffer();
  this.methodIndex=methodIndex;
  code.append("private Method ").append(this.method.getName() + this.methodIndex).append("Method;\n");
  code.append("{\ntry {\n").append(this.method.getName() + this.methodIndex).append("Method = ");
  code.append(this.method.getDeclaringClass().getName()).append(".class.getDeclaredMethod(\"").append(this.method.getName()).append("\", new Class[] {");
  final Class[] parameterTypes=this.method.getParameterTypes();
  if (parameterTypes.length != 0) {
    for (int i=0; i != parameterTypes.length; i++) {
      final Class parameterType=parameterTypes[i];
      if (parameterType.isPrimitive()) {
        if (parameterType == void.class) {
          code.append("void.class, ");
        }
 else         if (parameterType == int.class) {
          code.append("void.class, ");
        }
 else         if (parameterType == long.class) {
          code.append("void.class, ");
        }
 else         if (parameterType == short.class) {
          code.append("void.class, ");
        }
 else         if (parameterType == char.class) {
          code.append("void.class, ");
        }
 else         if (parameterType == byte.class) {
          code.append("void.class, ");
        }
 else         if (parameterType == boolean.class) {
          code.append("void.class, ");
        }
 else         if (parameterType == float.class) {
          code.append("void.class, ");
        }
 else         if (parameterType == double.class) {
          code.append("void.class, ");
        }
 else {
          code.append("**** ERROR ***** found primative return type: " + parameterType.getName());
        }
      }
 else {
        getFullName(parameterType,code);
        code.append(".class, ");
      }
    }
    code.setLength(code.length() - 2);
  }
  code.append("});\n");
  code.append("AccessController.doPrivileged(new PrivilegedAction() {\npublic Object run() {\n");
  code.append(this.method.getName() + this.methodIndex).append("Method.setAccessible(true);\nreturn null;\n}\n});\n");
  code.append("} catch (final NoSuchMethodException e) {}\n}\n");
  return code.toString();
}
