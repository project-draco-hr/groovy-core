{
  Class clazz=classNode.getTypeClass();
  Field[] fields=clazz.getDeclaredFields();
  for (int i=0; i < fields.length; i++) {
    classNode.addField(fields[i].getName(),fields[i].getModifiers(),classNode,null);
  }
  Method[] methods=clazz.getDeclaredMethods();
  for (int i=0; i < methods.length; i++) {
    Method m=methods[i];
    MethodNode mn=new MethodNode(m.getName(),m.getModifiers(),ClassHelper.make(m.getReturnType()),createParameters(m.getParameterTypes()),ClassHelper.make(m.getExceptionTypes()),null);
    classNode.addMethod(mn);
  }
  Constructor[] constructors=clazz.getDeclaredConstructors();
  for (int i=0; i < constructors.length; i++) {
    Constructor ctor=constructors[i];
    classNode.addConstructor(ctor.getModifiers(),createParameters(ctor.getParameterTypes()),ClassHelper.make(ctor.getExceptionTypes()),null);
  }
  Class sc=clazz.getSuperclass();
  if (sc != null)   classNode.setUnresolvedSuperClass(getPrimaryClassNode(compileUnit,sc));
  buildInterfaceTypes(compileUnit,classNode,clazz);
}
