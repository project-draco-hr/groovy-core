{
  Map constantAttrs=new HashMap();
  Map enumAttrs=new HashMap();
  Map atAttrs=new HashMap();
  Map arrayAttrs=new HashMap();
  Iterator mIt=an.getMembers().keySet().iterator();
  while (mIt.hasNext()) {
    String name=(String)mIt.next();
    Expression expr=an.getMember(name);
    if (expr instanceof AnnotationConstantExpression) {
      atAttrs.put(name,((AnnotationConstantExpression)expr).getValue());
    }
 else     if (expr instanceof ConstantExpression) {
      constantAttrs.put(name,((ConstantExpression)expr).getValue());
    }
 else     if (expr instanceof ClassExpression) {
      constantAttrs.put(name,Type.getType(BytecodeHelper.getTypeDescription(expr.getType())));
    }
 else     if (expr instanceof PropertyExpression) {
      enumAttrs.put(name,expr);
    }
 else     if (expr instanceof ListExpression) {
      arrayAttrs.put(name,expr);
    }
  }
  for (Iterator it=constantAttrs.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry entry=(Map.Entry)it.next();
    av.visit((String)entry.getKey(),entry.getValue());
  }
  for (Iterator it=enumAttrs.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry entry=(Map.Entry)it.next();
    PropertyExpression propExp=(PropertyExpression)entry.getValue();
    av.visitEnum((String)entry.getKey(),BytecodeHelper.getTypeDescription(propExp.getObjectExpression().getType()),String.valueOf(((ConstantExpression)propExp.getProperty()).getValue()));
  }
  for (Iterator it=atAttrs.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry entry=(Map.Entry)it.next();
    AnnotationNode atNode=(AnnotationNode)entry.getValue();
    AnnotationVisitor av2=av.visitAnnotation((String)entry.getKey(),BytecodeHelper.getTypeDescription(atNode.getClassNode()));
    visitAnnotationAttributes(atNode,av2);
    av2.visitEnd();
  }
  visitArrayAttributes(an,arrayAttrs,av);
}
