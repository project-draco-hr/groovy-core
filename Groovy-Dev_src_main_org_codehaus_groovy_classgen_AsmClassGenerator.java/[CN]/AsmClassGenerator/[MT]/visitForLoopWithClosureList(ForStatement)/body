{
  compileStack.pushLoop(loop.getVariableScope(),loop.getStatementLabel());
  ClosureListExpression clExpr=(ClosureListExpression)loop.getCollectionExpression();
  compileStack.pushVariableScope(clExpr.getVariableScope());
  List expressions=clExpr.getExpressions();
  int size=expressions.size();
  int condIndex=(size - 1) / 2;
  for (int i=0; i < condIndex; i++) {
    visitExpressionOrStatement(expressions.get(i));
  }
  Label continueLabel=compileStack.getContinueLabel();
  Label breakLabel=compileStack.getBreakLabel();
  Label cond=new Label();
  mv.visitLabel(cond);
{
    Expression condExpr=(Expression)expressions.get(condIndex);
    if (condExpr == EmptyExpression.INSTANCE) {
      mv.visitIntInsn(BIPUSH,0);
    }
 else     if (isComparisonExpression(condExpr)) {
      condExpr.visit(this);
    }
 else {
      visitAndAutoboxBoolean(condExpr);
      helper.unbox(ClassHelper.boolean_TYPE);
    }
  }
  mv.visitJumpInsn(IFEQ,breakLabel);
  loop.getLoopBlock().visit(this);
  mv.visitLabel(continueLabel);
  for (int i=condIndex + 1; i < size; i++) {
    visitExpressionOrStatement(expressions.get(i));
  }
  mv.visitJumpInsn(GOTO,cond);
  mv.visitLabel(breakLabel);
  compileStack.pop();
  compileStack.pop();
}
