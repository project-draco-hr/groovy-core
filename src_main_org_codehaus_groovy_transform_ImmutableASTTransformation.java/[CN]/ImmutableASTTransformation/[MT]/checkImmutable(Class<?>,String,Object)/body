{
  Immutable immutable=(Immutable)clazz.getAnnotation(MY_CLASS);
  List<Class> knownImmutableClasses=new ArrayList<Class>();
  if (immutable != null && immutable.knownImmutableClasses().length > 0) {
    knownImmutableClasses=Arrays.asList(immutable.knownImmutableClasses());
  }
  if (field == null || field instanceof Enum || inImmutableList(field.getClass().getName()) || knownImmutableClasses.contains(field.getClass()))   return field;
  if (field.getClass().getAnnotation(MY_CLASS) != null)   return field;
  if (field instanceof Collection) {
    Field declaredField;
    try {
      declaredField=clazz.getDeclaredField(fieldName);
      Class<?> fieldType=declaredField.getType();
      if (Collection.class.isAssignableFrom(fieldType)) {
        return DefaultGroovyMethods.asImmutable((Collection)field);
      }
      if (fieldType.getAnnotation(MY_CLASS) != null)       return field;
      if (inImmutableList(fieldType.getName()) || knownImmutableClasses.contains(fieldType)) {
        return field;
      }
    }
 catch (    NoSuchFieldException ignore) {
    }
  }
  final String typeName=field.getClass().getName();
  throw new RuntimeException(createErrorMessage(clazz.getName(),fieldName,typeName,"constructing"));
}
