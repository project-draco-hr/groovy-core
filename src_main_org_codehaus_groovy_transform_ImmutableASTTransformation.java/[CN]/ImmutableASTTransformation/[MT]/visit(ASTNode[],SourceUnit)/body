{
  init(nodes,source);
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  AnnotationNode node=(AnnotationNode)nodes[0];
  if (!node.getClassNode().getName().endsWith(".Immutable"))   return;
  List<PropertyNode> newProperties=new ArrayList<PropertyNode>();
  if (parent instanceof ClassNode) {
    final List<String> knownImmutableClasses=getKnownImmutableClasses(node);
    final List<String> knownImmutables=getKnownImmutables(node);
    ClassNode cNode=(ClassNode)parent;
    String cName=cNode.getName();
    if (!checkNotInterface(cNode,MY_TYPE_NAME))     return;
    makeClassFinal(cNode);
    final List<PropertyNode> pList=getInstanceProperties(cNode);
    for (    PropertyNode pNode : pList) {
      adjustPropertyForImmutability(pNode,newProperties);
    }
    for (    PropertyNode pNode : newProperties) {
      cNode.getProperties().remove(pNode);
      addProperty(cNode,pNode);
    }
    final List<FieldNode> fList=cNode.getFields();
    for (    FieldNode fNode : fList) {
      ensureNotPublic(cName,fNode);
    }
    boolean includeSuperProperties=false;
    if (hasAnnotation(cNode,TupleConstructorASTTransformation.MY_TYPE)) {
      AnnotationNode tupleCons=cNode.getAnnotations(TupleConstructorASTTransformation.MY_TYPE).get(0);
      includeSuperProperties=memberHasValue(tupleCons,"includeSuperProperties",true);
    }
    createConstructors(cNode,knownImmutableClasses,knownImmutables,includeSuperProperties);
    if (!hasAnnotation(cNode,EqualsAndHashCodeASTTransformation.MY_TYPE)) {
      createHashCode(cNode,true,false,false,null,null);
      createEquals(cNode,false,false,false,null,null);
    }
    if (!hasAnnotation(cNode,ToStringASTTransformation.MY_TYPE)) {
      createToString(cNode,false,false,null,null,false,true);
    }
    if (memberHasValue(node,MEMBER_ADD_COPY_WITH,true) && pList.size() > 0 && !hasDeclaredMethod(cNode,COPY_WITH_METHOD,1)) {
      createCopyWith(cNode,pList);
    }
  }
}
