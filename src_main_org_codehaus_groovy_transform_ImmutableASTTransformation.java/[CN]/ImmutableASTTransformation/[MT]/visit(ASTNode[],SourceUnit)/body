{
  if (!(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof AnnotatedNode)) {
    throw new RuntimeException("Internal error: wrong types: $node.class / $parent.class");
  }
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  AnnotationNode node=(AnnotationNode)nodes[0];
  if (!MY_TYPE.equals(node.getClassNode()))   return;
  List<PropertyNode> newNodes=new ArrayList<PropertyNode>();
  if (parent instanceof ClassNode) {
    ClassNode cNode=(ClassNode)parent;
    String cName=cNode.getName();
    if (cNode.isInterface()) {
      throw new RuntimeException("Error processing interface '" + cName + "'. "+ MY_TYPE_NAME+ " not allowed for interfaces.");
    }
    if ((cNode.getModifiers() & ACC_FINAL) == 0) {
      throw new RuntimeException("Error processing class '" + cName + "'. "+ MY_TYPE_NAME+ " classes must be final.");
    }
    final List<PropertyNode> pList=cNode.getProperties();
    for (    PropertyNode pNode : pList) {
      adjustPropertyForImmutability(pNode,newNodes);
    }
    for (    PropertyNode pNode : newNodes) {
      pList.remove(pNode);
      addProperty(cNode,pNode);
    }
    final List<FieldNode> fList=cNode.getFields();
    for (    FieldNode fNode : fList) {
      ensureNotPublic(cName,fNode);
    }
    createConstructor(cNode);
    createHashCode(cNode);
    createEquals(cNode);
    createToString(cNode);
  }
}
