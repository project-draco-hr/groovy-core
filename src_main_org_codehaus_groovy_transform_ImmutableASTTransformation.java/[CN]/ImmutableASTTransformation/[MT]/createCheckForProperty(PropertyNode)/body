{
  return new BlockStatement(new Statement[]{new IfStatement(new BooleanExpression(new MethodCallExpression(new VariableExpression("map",HASHMAP_TYPE),"containsKey",new ArgumentListExpression(new Expression[]{new ConstantExpression(pNode.getName())}))),new BlockStatement(new Statement[]{AbstractASTTransformUtil.declStatement(new VariableExpression("newValue",ClassHelper.OBJECT_TYPE),new MethodCallExpression(new VariableExpression("map",HASHMAP_TYPE),"get",new ArgumentListExpression(new Expression[]{new ConstantExpression(pNode.getName())}))),AbstractASTTransformUtil.declStatement(new VariableExpression("oldValue",ClassHelper.OBJECT_TYPE),new FieldExpression(pNode.getField())),new IfStatement(new BooleanExpression(new BinaryExpression(new VariableExpression("newValue",ClassHelper.OBJECT_TYPE),new Token(Types.COMPARE_NOT_EQUAL,"!=",-1,-1),new VariableExpression("oldValue",ClassHelper.OBJECT_TYPE))),new BlockStatement(new Statement[]{AbstractASTTransformUtil.assignStatement(new VariableExpression("oldValue",ClassHelper.OBJECT_TYPE),new VariableExpression("newValue",ClassHelper.OBJECT_TYPE)),AbstractASTTransformUtil.assignStatement(new VariableExpression("dirty",ClassHelper.boolean_TYPE),ConstantExpression.TRUE)},new VariableScope()),EmptyStatement.INSTANCE),new ExpressionStatement(new MethodCallExpression(new VariableExpression("construct",HASHMAP_TYPE),"put",new ArgumentListExpression(new Expression[]{new ConstantExpression(pNode.getName()),new VariableExpression("oldValue",ClassHelper.OBJECT_TYPE)})))},new VariableScope()),new BlockStatement(new Statement[]{new ExpressionStatement(new MethodCallExpression(new VariableExpression("construct",HASHMAP_TYPE),"put",new ArgumentListExpression(new Expression[]{new ConstantExpression(pNode.getName()),new FieldExpression(pNode.getField())})))},new VariableScope()))},new VariableScope());
}
