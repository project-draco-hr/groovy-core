{
  Map visibleClasses=rootDoc.getVisibleClasses(importedClassesAndPackages);
  for (  GroovyConstructorDoc constructor : constructors) {
    for (    GroovyParameter groovyParameter : constructor.parameters()) {
      SimpleGroovyParameter param=(SimpleGroovyParameter)groovyParameter;
      String paramTypeName=param.typeName();
      if (visibleClasses.containsKey(paramTypeName)) {
        param.setType((GroovyType)visibleClasses.get(paramTypeName));
      }
    }
  }
  for (  GroovyFieldDoc field : fields) {
    SimpleGroovyFieldDoc mutableField=(SimpleGroovyFieldDoc)field;
    GroovyType fieldType=field.type();
    String typeName=fieldType.typeName();
    if (visibleClasses.containsKey(typeName)) {
      mutableField.setType((GroovyType)visibleClasses.get(typeName));
    }
  }
  for (  GroovyMethodDoc method : methods) {
    GroovyType returnType=method.returnType();
    String typeName=returnType.typeName();
    if (visibleClasses.containsKey(typeName)) {
      method.setReturnType((GroovyType)visibleClasses.get(typeName));
    }
    for (    GroovyParameter groovyParameter : method.parameters()) {
      SimpleGroovyParameter param=(SimpleGroovyParameter)groovyParameter;
      String paramTypeName=param.typeName();
      if (visibleClasses.containsKey(paramTypeName)) {
        param.setType((GroovyType)visibleClasses.get(paramTypeName));
      }
    }
  }
  for (  String name : superClassNames) {
    superClasses.add(resolveClass(rootDoc,name));
  }
  for (  String name : interfaceNames) {
    interfaceClasses.add(resolveClass(rootDoc,name));
  }
  for (  String name : annotationNames) {
    annotationClasses.add(resolveClass(rootDoc,name));
  }
}
