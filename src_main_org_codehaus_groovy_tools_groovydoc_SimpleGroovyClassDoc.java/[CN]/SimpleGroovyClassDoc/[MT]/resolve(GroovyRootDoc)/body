{
  Map visibleClasses=rootDoc.getVisibleClasses(importedClassesAndPackages);
  for (  GroovyConstructorDoc constructor : constructors) {
    for (    GroovyParameter groovyParameter : Arrays.asList(constructor.parameters())) {
      SimpleGroovyParameter param=(SimpleGroovyParameter)groovyParameter;
      String paramTypeName=param.typeName();
      if (visibleClasses.containsKey(paramTypeName)) {
        param.setType((GroovyType)visibleClasses.get(paramTypeName));
      }
    }
  }
  for (  GroovyMethodDoc method : methods) {
    GroovyType returnType=method.returnType();
    String typeName=returnType.typeName();
    if (visibleClasses.containsKey(typeName)) {
      method.setReturnType((GroovyType)visibleClasses.get(typeName));
    }
    for (    GroovyParameter groovyParameter : Arrays.asList(method.parameters())) {
      SimpleGroovyParameter param=(SimpleGroovyParameter)groovyParameter;
      String paramTypeName=param.typeName();
      if (visibleClasses.containsKey(paramTypeName)) {
        param.setType((GroovyType)visibleClasses.get(paramTypeName));
      }
    }
  }
  if (superClassName != null) {
    superClass=rootDoc.classNamed(superClassName);
    if (superClass == null) {
      superClass=new SimpleGroovyClassDoc(null,superClassName);
    }
  }
 else {
    superClass=new SimpleGroovyClassDoc(null,"Object");
  }
}
