{
  int type=binExp.getOperation().getType();
  Expression left=binExp.getLeftExpression();
  boolean leftIsInt=isIntOperand(left,controller.getClassNode());
  Expression right=binExp.getRightExpression();
  boolean rightIsInt=isIntOperand(right,controller.getClassNode());
  OperandStack operandStack=controller.getOperandStack();
  if (leftIsInt && rightIsInt && writeIntXInt(type,true)) {
    left.visit(controller.getAcg());
    operandStack.doGroovyCast(ClassHelper.int_TYPE);
    right.visit(controller.getAcg());
    operandStack.doGroovyCast(ClassHelper.int_TYPE);
    writeIntXInt(type,false);
    return;
  }
 else   if (rightIsInt && type == LEFT_SQUARE_BRACKET && getType(left,controller.getClassNode()).getComponentType() == ClassHelper.int_TYPE) {
    left.visit(controller.getAcg());
    operandStack.doGroovyCast(getType(left,controller.getClassNode()));
    right.visit(controller.getAcg());
    operandStack.doGroovyCast(ClassHelper.int_TYPE);
    MethodVisitor mv=controller.getMethodVisitor();
    intArrayGet.call(mv);
    operandStack.replace(ClassHelper.int_TYPE,2);
  }
 else {
    super.evaluateBinaryExpression(message,binExp);
  }
}
