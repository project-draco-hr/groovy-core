{
  Class vargsClassOrig=paramTypes[paramTypes.length - 1].getTheClass().getComponentType();
  Class vargsClass=ReflectionCache.autoboxType(vargsClassOrig);
  Object[] argumentArray=argumentArrayOrig.clone();
  MetaClassHelper.unwrap(argumentArray);
  if (argumentArray.length == paramTypes.length - 1) {
    Object[] newArgs=new Object[paramTypes.length];
    System.arraycopy(argumentArray,0,newArgs,0,argumentArray.length);
    Object vargs=Array.newInstance(vargsClass,0);
    newArgs[newArgs.length - 1]=vargs;
    return newArgs;
  }
 else   if (argumentArray.length == paramTypes.length) {
    Object lastArgument=argumentArray[argumentArray.length - 1];
    if (lastArgument != null && !lastArgument.getClass().isArray()) {
      Object wrapped=makeCommonArray(argumentArray,paramTypes.length - 1,vargsClass);
      Object[] newArgs=new Object[paramTypes.length];
      System.arraycopy(argumentArray,0,newArgs,0,paramTypes.length - 1);
      newArgs[newArgs.length - 1]=wrapped;
      return newArgs;
    }
 else {
      return argumentArray;
    }
  }
 else   if (argumentArray.length > paramTypes.length) {
    Object[] newArgs=new Object[paramTypes.length];
    System.arraycopy(argumentArray,0,newArgs,0,paramTypes.length - 1);
    Object vargs=makeCommonArray(argumentArray,paramTypes.length - 1,vargsClass);
    newArgs[newArgs.length - 1]=vargs;
    return newArgs;
  }
 else {
    throw new GroovyBugError("trying to call a vargs method without enough arguments");
  }
}
