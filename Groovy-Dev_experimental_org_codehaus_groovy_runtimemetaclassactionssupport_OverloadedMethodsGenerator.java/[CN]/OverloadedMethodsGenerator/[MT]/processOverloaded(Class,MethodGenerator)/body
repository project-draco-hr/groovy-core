{
  if (other instanceof OverloadedMethodsGenerator) {
    final Iterator iter=((OverloadedMethodsGenerator)other).generatorList.iterator();
    while (iter.hasNext()) {
      processOverloaded(claz,(MethodGenerator)iter.next());
    }
  }
 else {
    final Class[] p1=other.getParameterTypes();
    for (int i=0; i != this.generatorList.size(); i++) {
      final MethodGenerator generator=(MethodGenerator)this.generatorList.get(i);
      final Class[] p2=generator.getParameterTypes();
      int j=0;
      while (p1[j] == p2[j] && ++j != p1.length)       ;
      if (j == p1.length) {
        if (other.method.getDeclaringClass() == claz) {
          this.generatorList.add(i,other);
        }
        return this;
      }
    }
    this.generatorList.add(other);
  }
  return this;
}
