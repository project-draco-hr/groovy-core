{
  init(nodes,source);
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  AnnotationNode anno=(AnnotationNode)nodes[0];
  if (!MY_TYPE.equals(anno.getClassNode()))   return;
  if (parent instanceof ClassNode) {
    ClassNode cNode=(ClassNode)parent;
    if (!hasNoargConstructor(cNode)) {
      addError(MY_TYPE_NAME + ": An Externalizable class requires a no-arg constructor but none found",cNode);
    }
    if (!implementsExternalizable(cNode)) {
      addError(MY_TYPE_NAME + ": An Externalizable class must implement the Externalizable interface",cNode);
    }
    boolean includeFields=memberHasValue(anno,"includeFields",true);
    boolean checkPropertyTypes=memberHasValue(anno,"checkPropertyTypes",true);
    List<String> excludes=getMemberList(anno,"excludes");
    List<FieldNode> list=getInstancePropertyFields(cNode);
    if (includeFields) {
      list.addAll(getInstanceNonPropertyFields(cNode));
    }
    checkProps(list,excludes,checkPropertyTypes);
  }
}
