{
  MethodVisitor mv;
  mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"call" + name,"(L" + receiverType + ";[Ljava/lang/Object;)Ljava/lang/Object;",null,EXCEPTIONS);
  mv.visitCode();
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitVarInsn(Opcodes.ALOAD,1);
  mv.visitVarInsn(Opcodes.ALOAD,2);
  mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,superClass,"checkCall","(Ljava/lang/Object;[Ljava/lang/Object;)Z");
  Label l0=new Label();
  mv.visitJumpInsn(Opcodes.IFEQ,l0);
  BytecodeHelper helper=new BytecodeHelper(mv);
  Class callClass=cachedMethod.getDeclaringClass().getTheClass();
  boolean useInterface=callClass.isInterface();
  String type=BytecodeHelper.getClassInternalName(callClass.getName());
  String descriptor=BytecodeHelper.getMethodDescriptor(cachedMethod.getReturnType(),cachedMethod.getNativeParameterTypes());
  if (cachedMethod.isStatic()) {
    genLoadParameters(2,mv,helper,cachedMethod);
    mv.visitMethodInsn(Opcodes.INVOKESTATIC,type,cachedMethod.getName(),descriptor);
  }
 else {
    mv.visitVarInsn(Opcodes.ALOAD,1);
    helper.doCast(callClass);
    genLoadParameters(2,mv,helper,cachedMethod);
    mv.visitMethodInsn((useInterface) ? Opcodes.INVOKEINTERFACE : Opcodes.INVOKEVIRTUAL,type,cachedMethod.getName(),descriptor);
  }
  helper.box(cachedMethod.getReturnType());
  if (cachedMethod.getReturnType() == void.class) {
    mv.visitInsn(Opcodes.ACONST_NULL);
  }
  mv.visitInsn(Opcodes.ARETURN);
  mv.visitLabel(l0);
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitVarInsn(Opcodes.ALOAD,1);
  mv.visitVarInsn(Opcodes.ALOAD,2);
  mv.visitMethodInsn(Opcodes.INVOKESTATIC,"org/codehaus/groovy/runtime/callsite/CallSiteArray","defaultCall" + name,"(Lorg/codehaus/groovy/runtime/callsite/CallSite;L" + receiverType + ";[Ljava/lang/Object;)Ljava/lang/Object;");
  mv.visitInsn(Opcodes.ARETURN);
  mv.visitMaxs(0,0);
  mv.visitEnd();
}
