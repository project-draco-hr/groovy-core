{
  if (!finished && source != null && !last) {
    StringBuffer read=new StringBuffer();
    for (int i=consumed + 1; i < data.length(); i++) {
      read.append(data.charAt(i));
    }
    char c;
    StringBuffer raw=new StringBuffer();
    while ((c=source.la()) == '\n' || c == '\r') {
      if (raw.length() > 0) {
        read.append(raw);
        raw.setLength(0);
      }
      if (!((LexerBase)source).readEOL(raw)) {
        throw new UnterminatedStringLiteralException(getStartLine(),getStartColumn());
      }
    }
    boolean use=true;
    if (!isDelimited()) {
      while ((c=source.la()) != '\n' && c != '\r' && c != CharStream.EOS) {
        raw.append(source.consume());
      }
    }
 else {
      if (!onmargin) {
        while ((c=source.la()) == ' ' || c == '\t') {
          raw.append(c);
        }
      }
      int testing=0, length=marker.length();
      boolean found=false, lost=false;
      while ((c=source.la()) != '\n' && c != '\r' && c != CharStream.EOS && !found) {
        if (!lost && c == marker.charAt(testing)) {
          testing++;
          if (testing == length) {
            found=true;
          }
        }
 else {
          lost=true;
        }
        raw.append(source.consume());
      }
      if (found) {
        use=false;
      }
    }
    if (use) {
      read.append(raw);
    }
 else {
      last=true;
    }
    data=read.toString();
    consumed=-1;
  }
}
