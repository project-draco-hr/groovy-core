{
  CompilationFailuresException failures=new CompilationFailuresException();
  String[] descriptors=new String[sources.length];
  for (int i=0; i < sources.length; ++i) {
    descriptors[i]=sources[i].getDescription();
    if (descriptors[i] == null) {
      descriptors[i]="unknown" + i;
    }
  }
  CompileUnit unit=new CompileUnit(getClassLoader(),config);
  for (int i=0; i < sources.length; ++i) {
    try {
      if (verbose) {
        System.out.println("building source [" + descriptors[i] + "]");
      }
      ModuleNode ast=parse(sources[i],descriptors[i]);
      unit.addModule(ast);
    }
 catch (    ExceptionCollector e) {
      if (!e.isEmpty()) {
        failures.add(descriptors[i],e);
      }
      if (failures.total() > maximumFailuresPerCompile) {
        throw failures;
      }
    }
catch (    Exception e) {
      throw new CompilerBugException(descriptors[i],"parse",e);
    }
 finally {
      try {
        sources[i].close();
      }
 catch (      Exception e) {
      }
    }
  }
  if (!failures.isEmpty()) {
    throw failures;
  }
  ArrayList classes=new ArrayList();
  for (Iterator iter=unit.getModules().iterator(); iter.hasNext(); ) {
    ModuleNode module=(ModuleNode)iter.next();
    try {
      Iterator classNodes=module.getClasses().iterator();
      while (classNodes.hasNext()) {
        ClassNode classNode=(ClassNode)classNodes.next();
        if (verbose) {
          System.out.println("Generating class: " + classNode.getName());
        }
        classes.addAll(generateClasses(new GeneratorContext(unit),classNode,module.getDescription()));
      }
    }
 catch (    ExceptionCollector e) {
      if (!e.isEmpty()) {
        failures.add(module.getDescription(),e);
      }
    }
catch (    Exception e) {
      throw new CompilerBugException(module.getDescription(),"class generation",e);
    }
  }
  if (!failures.isEmpty()) {
    throw failures;
  }
  return (GroovyClass[])classes.toArray(GroovyClass.EMPTY_ARRAY);
}
