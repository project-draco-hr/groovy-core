{
  ArrayList results=new ArrayList();
  ClassGenerator classGenerator=null;
  verifier.visitClass(classNode);
  if (debug) {
    DumpClassVisitor dumpVisitor=new DumpClassVisitor(new PrintWriter(new OutputStreamWriter(System.out)));
    classGenerator=new ClassGenerator(context,dumpVisitor,getClassLoader(),descriptor);
    classGenerator.visitClass(classNode);
  }
 else {
    ClassWriter classWriter=new ClassWriter(true);
    classGenerator=new ClassGenerator(context,classWriter,getClassLoader(),descriptor);
    classGenerator.visitClass(classNode);
    byte[] bytes=classWriter.toByteArray();
    results.add(new GroovyClass(classNode.getName(),bytes));
  }
  LinkedList innerClasses=classGenerator.getInnerClasses();
  while (!innerClasses.isEmpty()) {
    results.addAll(generateClasses(context,(ClassNode)innerClasses.removeFirst(),descriptor));
  }
  return results;
}
