{
  String name=exp.getMethodAsString();
  if (exp.isImplicitThis() && "include".equals(name)) {
    return tryTransformInclude(exp);
  }
 else   if (exp.isImplicitThis() && name.startsWith(":")) {
    List<Expression> args;
    if (exp.getArguments() instanceof ArgumentListExpression) {
      args=((ArgumentListExpression)exp.getArguments()).getExpressions();
    }
 else {
      args=Collections.singletonList(exp.getArguments());
    }
    Expression newArguments=transform(new ArgumentListExpression(new ConstantExpression(name.substring(1)),new ArrayExpression(ClassHelper.OBJECT_TYPE,args)));
    MethodCallExpression call=new MethodCallExpression(new VariableExpression("this"),"methodMissing",newArguments);
    call.setImplicitThis(true);
    call.setSafe(exp.isSafe());
    call.setSpreadSafe(exp.isSpreadSafe());
    call.setSourcePosition(exp);
    return call;
  }
 else   if (name != null && name.startsWith("$")) {
    MethodCallExpression reformatted=new MethodCallExpression(exp.getObjectExpression(),name.substring(1),exp.getArguments());
    reformatted.setImplicitThis(exp.isImplicitThis());
    reformatted.setSafe(exp.isSafe());
    reformatted.setSpreadSafe(exp.isSpreadSafe());
    reformatted.setSourcePosition(exp);
    ClosureExpression clos=new ClosureExpression(Parameter.EMPTY_ARRAY,new ExpressionStatement(reformatted));
    clos.setVariableScope(new VariableScope());
    MethodCallExpression stringOf=new MethodCallExpression(new VariableExpression("this"),"stringOf",clos);
    stringOf.setImplicitThis(true);
    stringOf.setSourcePosition(reformatted);
    return stringOf;
  }
  return super.transform(exp);
}
