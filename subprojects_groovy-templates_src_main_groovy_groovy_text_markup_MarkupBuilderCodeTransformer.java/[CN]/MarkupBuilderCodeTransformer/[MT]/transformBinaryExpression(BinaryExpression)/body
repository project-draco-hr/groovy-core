{
  Expression left=bin.getLeftExpression();
  Expression right=bin.getRightExpression();
  boolean assignment=bin.getOperation().getType() == Types.ASSIGN;
  if (assignment && left instanceof VariableExpression) {
    VariableExpression var=(VariableExpression)left;
    if (var.getAccessedVariable() instanceof DynamicVariable) {
      String varName=var.getName();
      if (!"modelTypes".equals(varName)) {
        MethodCallExpression callGetModel=new MethodCallExpression(new VariableExpression("this"),"getModel",ArgumentListExpression.EMPTY_ARGUMENTS);
        callGetModel.setImplicitThis(true);
        callGetModel.setSourcePosition(left);
        MethodCallExpression mce=new MethodCallExpression(callGetModel,"put",new ArgumentListExpression(new ConstantExpression(varName),right));
        mce.setSourcePosition(left);
        mce.setImplicitThis(false);
        return transform(mce);
      }
    }
  }
  if (assignment && left instanceof VariableExpression && right instanceof ClosureExpression) {
    VariableExpression var=(VariableExpression)left;
    if ("modelTypes".equals(var.getName())) {
      Map<String,ClassNode> modelTypes=extractModelTypesFromClosureExpression((ClosureExpression)right);
      Expression result=new EmptyExpression();
      result.setSourcePosition(bin);
      classNode.putNodeMetaData(MarkupTemplateEngine.MODELTYPES_ASTKEY,modelTypes);
      return result;
    }
  }
  return super.transform(bin);
}
