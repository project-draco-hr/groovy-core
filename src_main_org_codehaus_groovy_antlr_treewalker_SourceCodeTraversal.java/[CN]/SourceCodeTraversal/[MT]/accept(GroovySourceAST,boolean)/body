{
  if (currentNode != null && unvisitedNodes != null && unvisitedNodes.size() > 0) {
    GroovySourceAST t=currentNode;
    if (!(unvisitedNodes.contains(currentNode))) {
      return;
    }
switch (t.getType()) {
case GroovyTokenTypes.EXPR:
case GroovyTokenTypes.IMPORT:
case GroovyTokenTypes.PACKAGE_DEF:
case GroovyTokenTypes.VARIABLE_DEF:
      accept_v_AllChildren_v_Siblings(t,followSiblings);
    break;
case GroovyTokenTypes.ELIST:
case GroovyTokenTypes.STRING_CONSTRUCTOR:
  accept_v_FirstChild_v_SecondChild_v___LastChild_v(t);
break;
case GroovyTokenTypes.METHOD_DEF:
case GroovyTokenTypes.PARAMETER_DEF:
case GroovyTokenTypes.SLIST:
accept_v_AllChildren_v(t);
break;
case GroovyTokenTypes.EQUAL:
case GroovyTokenTypes.ASSIGN:
if (t.childAt(1) != null) {
accept_FirstChild_v_RestOfTheChildren(t);
}
 else {
accept_v_FirstChild_v_RestOfTheChildren(t);
}
break;
case GroovyTokenTypes.CLASS_DEF:
case GroovyTokenTypes.DOT:
case GroovyTokenTypes.LABELED_ARG:
case GroovyTokenTypes.MEMBER_POINTER:
case GroovyTokenTypes.METHOD_CALL:
case GroovyTokenTypes.PLUS:
case GroovyTokenTypes.STAR:
accept_FirstChild_v_RestOfTheChildren(t);
break;
case GroovyTokenTypes.LITERAL_case:
case GroovyTokenTypes.LITERAL_while:
accept_v_FirstChildsFirstChild_v_RestOfTheChildren(t);
break;
case GroovyTokenTypes.LITERAL_if:
accept_v_FirstChildsFirstChild_v_Child2_Child3_v_Child4_v___v_LastChild(t);
break;
case GroovyTokenTypes.CLOSED_BLOCK:
accept_v_FirstChild_v_RestOfTheChildren_v(t);
break;
case GroovyTokenTypes.LITERAL_catch:
case GroovyTokenTypes.LITERAL_new:
case GroovyTokenTypes.LITERAL_try:
case GroovyTokenTypes.TYPECAST:
accept_v_FirstChild_v_RestOfTheChildren(t);
break;
default :
accept_v_FirstChild_v(t);
break;
}
}
acceptSiblings(currentNode,followSiblings);
}
