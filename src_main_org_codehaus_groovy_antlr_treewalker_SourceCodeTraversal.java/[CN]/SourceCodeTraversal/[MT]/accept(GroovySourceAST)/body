{
  if (currentNode != null && unvisitedNodes != null && unvisitedNodes.size() > 0) {
    GroovySourceAST t=currentNode;
    if (!(unvisitedNodes.contains(currentNode))) {
      return;
    }
    push(t);
switch (t.getType()) {
case GroovyTokenTypes.QUESTION:
      accept_FirstChild_v_SecondChild_v_ThirdChild_v(t);
    break;
case GroovyTokenTypes.CASE_GROUP:
case GroovyTokenTypes.LITERAL_instanceof:
  accept_FirstChild_v_SecondChildsChildren_v(t);
break;
case GroovyTokenTypes.ANNOTATION:
accept_v_FirstChild_2ndv_SecondChild_v___LastChild_v(t);
break;
case GroovyTokenTypes.ELIST:
case GroovyTokenTypes.PARAMETERS:
case GroovyTokenTypes.TYPE_ARGUMENTS:
case GroovyTokenTypes.STRING_CONSTRUCTOR:
accept_v_FirstChild_v_SecondChild_v___LastChild_v(t);
break;
case GroovyTokenTypes.INDEX_OP:
accept_FirstChild_v_SecondChild_v(t);
break;
case GroovyTokenTypes.ENUM_CONSTANT_DEF:
case GroovyTokenTypes.EXPR:
case GroovyTokenTypes.IMPORT:
case GroovyTokenTypes.VARIABLE_DEF:
case GroovyTokenTypes.METHOD_DEF:
case GroovyTokenTypes.OBJBLOCK:
case GroovyTokenTypes.PARAMETER_DEF:
case GroovyTokenTypes.SLIST:
accept_v_AllChildren_v(t);
break;
case GroovyTokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:
case GroovyTokenTypes.ASSIGN:
case GroovyTokenTypes.BAND_ASSIGN:
case GroovyTokenTypes.BOR_ASSIGN:
case GroovyTokenTypes.BSR_ASSIGN:
case GroovyTokenTypes.BXOR_ASSIGN:
case GroovyTokenTypes.COMPARE_TO:
case GroovyTokenTypes.DIV_ASSIGN:
case GroovyTokenTypes.EQUAL:
case GroovyTokenTypes.MINUS_ASSIGN:
case GroovyTokenTypes.MOD_ASSIGN:
case GroovyTokenTypes.NOT_EQUAL:
case GroovyTokenTypes.PLUS_ASSIGN:
case GroovyTokenTypes.REGEX_FIND:
case GroovyTokenTypes.REGEX_MATCH:
if (t.childAt(1) != null) {
accept_FirstChild_v_RestOfTheChildren(t);
}
 else {
accept_v_FirstChild_v_RestOfTheChildren(t);
}
break;
case GroovyTokenTypes.ANNOTATION_FIELD_DEF:
accept_FirstSecondAndThirdChild_v_v_ForthChild(t);
break;
case GroovyTokenTypes.ANNOTATION_DEF:
case GroovyTokenTypes.BAND:
case GroovyTokenTypes.BOR:
case GroovyTokenTypes.BSR:
case GroovyTokenTypes.BXOR:
case GroovyTokenTypes.CLASS_DEF:
case GroovyTokenTypes.CTOR_IDENT:
case GroovyTokenTypes.DIV:
case GroovyTokenTypes.DOT:
case GroovyTokenTypes.ENUM_DEF:
case GroovyTokenTypes.GE:
case GroovyTokenTypes.GT:
case GroovyTokenTypes.INTERFACE_DEF:
case GroovyTokenTypes.LABELED_ARG:
case GroovyTokenTypes.LABELED_STAT:
case GroovyTokenTypes.LAND:
case GroovyTokenTypes.LE:
case GroovyTokenTypes.LITERAL_as:
case GroovyTokenTypes.LITERAL_in:
case GroovyTokenTypes.LOR:
case GroovyTokenTypes.LT:
case GroovyTokenTypes.MEMBER_POINTER:
case GroovyTokenTypes.MOD:
case GroovyTokenTypes.MINUS:
case GroovyTokenTypes.OPTIONAL_DOT:
case GroovyTokenTypes.PACKAGE_DEF:
case GroovyTokenTypes.PLUS:
case GroovyTokenTypes.RANGE_EXCLUSIVE:
case GroovyTokenTypes.RANGE_INCLUSIVE:
case GroovyTokenTypes.SL:
case GroovyTokenTypes.STAR:
accept_FirstChild_v_RestOfTheChildren(t);
break;
case GroovyTokenTypes.CTOR_CALL:
case GroovyTokenTypes.METHOD_CALL:
if (t.getNumberOfChildren() == 2 && t.childAt(1) != null && t.childAt(1).getType() == GroovyTokenTypes.CLOSED_BLOCK) {
accept_FirstChild_v_SecondChild(t);
}
 else {
GroovySourceAST lastChild=t.childAt(t.getNumberOfChildren() - 1);
if (lastChild != null && lastChild.getType() == GroovyTokenTypes.CLOSED_BLOCK) {
accept_FirstChild_v_RestOfTheChildren_v_LastChild(t);
}
 else {
accept_FirstChild_v_RestOfTheChildren_v(t);
}
}
break;
case GroovyTokenTypes.LITERAL_while:
case GroovyTokenTypes.LITERAL_with:
case GroovyTokenTypes.TYPECAST:
accept_v_FirstChildsFirstChild_v_RestOfTheChildren(t);
break;
case GroovyTokenTypes.LITERAL_if:
accept_v_FirstChildsFirstChild_v_Child2_Child3_v_Child4_v___v_LastChild(t);
break;
case GroovyTokenTypes.CLOSED_BLOCK:
if (t.childAt(0) != null && t.childAt(0).getType() == GroovyTokenTypes.IMPLICIT_PARAMETERS) {
accept_v_AllChildren_v(t);
}
 else {
accept_v_FirstChild_v_RestOfTheChildren_v(t);
}
break;
case GroovyTokenTypes.FOR_IN_ITERABLE:
case GroovyTokenTypes.LITERAL_for:
case GroovyTokenTypes.LITERAL_new:
case GroovyTokenTypes.LITERAL_switch:
accept_v_FirstChild_v_RestOfTheChildren_v(t);
break;
case GroovyTokenTypes.ANNOTATIONS:
case GroovyTokenTypes.LITERAL_assert:
case GroovyTokenTypes.LITERAL_catch:
case GroovyTokenTypes.LITERAL_synchronized:
case GroovyTokenTypes.LITERAL_try:
case GroovyTokenTypes.MODIFIERS:
accept_v_FirstChild_v_RestOfTheChildren(t);
break;
default :
accept_v_FirstChild_v(t);
break;
}
pop();
}
}
