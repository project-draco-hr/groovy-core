{
  List vars=new ArrayList();
  VariableScope outerScope=getVariableScope().createRecursiveParentScope();
  VariableScope innerScope=expression.getVariableScope();
  if (innerScope == null) {
    System.out.println("No variable scope for: " + expression + " method: "+ methodNode+ " constructor: "+ constructorNode);
    innerScope=new VariableScope(getVariableScope());
  }
 else {
    innerScope=innerScope.createRecursiveChildScope();
  }
  Set outerDecls=outerScope.getDeclaredVariables();
  Set outerRefs=outerScope.getReferencedVariables();
  Set innerDecls=innerScope.getDeclaredVariables();
  Set innerRefs=innerScope.getReferencedVariables();
  Set varSet=new HashSet();
  for (Iterator iter=innerRefs.iterator(); iter.hasNext(); ) {
    String var=(String)iter.next();
    if (outerDecls.contains(var) && (isNotFieldOfOutermostClass(var))) {
      String type=getVariableType(var);
      vars.add(new Parameter(type,var));
      varSet.add(var);
    }
  }
  for (Iterator iter=outerRefs.iterator(); iter.hasNext(); ) {
    String var=(String)iter.next();
    if (innerDecls.contains(var) && (isNotFieldOfOutermostClass(var)) && !varSet.contains(var)) {
      String type=getVariableType(var);
      vars.add(new Parameter(type,var));
    }
  }
  Parameter[] answer=new Parameter[vars.size()];
  vars.toArray(answer);
  return answer;
}
