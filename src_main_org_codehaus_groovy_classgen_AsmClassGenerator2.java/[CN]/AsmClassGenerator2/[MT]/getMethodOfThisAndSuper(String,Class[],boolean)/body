{
  MethodNode candidate=null;
  List meths=classNode.getMethods();
  Class[] candidateParamClasses=null;
  for (int i=0; i < meths.size(); i++) {
    MethodNode meth=(MethodNode)meths.get(i);
    if (meth.getName().equals(methName)) {
      Parameter[] params=meth.getParameters();
      if (params.length == argsArray.length) {
        Class[] paramClasses=new Class[params.length];
        for (int j=0; j < params.length; j++) {
          Parameter param=params[j];
          String type=param.getType();
          Class paramClass=null;
          try {
            paramClass=loadClass(type);
          }
 catch (          Exception e) {
            log.warning(e.getMessage());
            return null;
          }
          paramClasses[j]=paramClass;
        }
        if (MetaClass.isValidMethod(paramClasses,argsArray,false)) {
          candidateParamClasses=paramClasses;
          candidate=meth;
          break;
        }
 else {
          if (MetaClass.isValidMethod(paramClasses,argsArray,true)) {
            candidateParamClasses=paramClasses;
            candidate=meth;
            break;
          }
        }
      }
    }
  }
  if (candidate != null && candidateParamClasses != null) {
    try {
      return new MetaMethod(methName,null,candidateParamClasses,loadClass(candidate.getReturnType()),candidate.getModifiers());
    }
 catch (    Exception e) {
      log.warning(e.getMessage());
      return null;
    }
  }
 else {
    Class superClass=null;
    try {
      superClass=loadClass(classNode.getSuperClass());
    }
 catch (    Exception e) {
      log.warning(e.getMessage());
    }
    if (superClass != null) {
      MetaMethod mmethod=MetaClassRegistry.getIntance(MetaClassRegistry.DONT_LOAD_DEFAULT).getDefinedMethod(superClass,methName,argsArray,isStaticCall);
      if (mmethod == null)       return null;
      int modies=mmethod.getModifiers();
      if (Modifier.isPrivate(modies)) {
        return null;
      }
 else       if (modies == 0) {
        int pThis=classNode.getName().lastIndexOf(".");
        String packageNameThis=pThis > 0 ? classNode.getName().substring(0,pThis) : "";
        int pSuper=classNode.getSuperClass().lastIndexOf(".");
        String packageNameSuper=pSuper > 0 ? classNode.getSuperClass().substring(0,pSuper) : "";
        if (packageNameThis.equals(packageNameSuper)) {
          return new MetaMethod(methName,null,mmethod.getParameterTypes(),mmethod.getReturnType(),mmethod.getModifiers());
        }
 else {
          return null;
        }
      }
 else {
        return new MetaMethod(methName,null,mmethod.getParameterTypes(),mmethod.getReturnType(),mmethod.getModifiers());
      }
    }
    return null;
  }
}
