{
  if (statement instanceof ReturnStatement || statement instanceof BytecodeSequence || statement instanceof ThrowStatement) {
    return statement;
  }
  if (statement instanceof EmptyStatement) {
    final ReturnStatement returnStatement=new ReturnStatement(ConstantExpression.NULL);
    listener.returnStatementAdded(returnStatement);
    return returnStatement;
  }
  if (statement instanceof ExpressionStatement) {
    ExpressionStatement expStmt=(ExpressionStatement)statement;
    Expression expr=expStmt.getExpression();
    ReturnStatement ret=new ReturnStatement(expr);
    ret.setSourcePosition(expr);
    ret.setStatementLabel(statement.getStatementLabel());
    listener.returnStatementAdded(ret);
    return ret;
  }
  if (statement instanceof SynchronizedStatement) {
    SynchronizedStatement sync=(SynchronizedStatement)statement;
    final Statement code=addReturnsIfNeeded(sync.getCode(),scope);
    if (doAdd)     sync.setCode(code);
    return sync;
  }
  if (statement instanceof IfStatement) {
    IfStatement ifs=(IfStatement)statement;
    final Statement ifBlock=addReturnsIfNeeded(ifs.getIfBlock(),scope);
    final Statement elseBlock=addReturnsIfNeeded(ifs.getElseBlock(),scope);
    if (doAdd) {
      ifs.setIfBlock(ifBlock);
      ifs.setElseBlock(elseBlock);
    }
    return ifs;
  }
  if (statement instanceof SwitchStatement) {
    SwitchStatement swi=(SwitchStatement)statement;
    for (    CaseStatement caseStatement : swi.getCaseStatements()) {
      final Statement code=adjustSwitchCaseCode(caseStatement.getCode(),scope,false);
      if (doAdd)       caseStatement.setCode(code);
    }
    final Statement defaultStatement=adjustSwitchCaseCode(swi.getDefaultStatement(),scope,true);
    if (doAdd)     swi.setDefaultStatement(defaultStatement);
    return swi;
  }
  if (statement instanceof TryCatchStatement) {
    TryCatchStatement trys=(TryCatchStatement)statement;
    final boolean[] missesReturn=new boolean[1];
    new ReturnAdder(new ReturnStatementListener(){
      @Override public void returnStatementAdded(      ReturnStatement returnStatement){
        missesReturn[0]=true;
      }
    }
).addReturnsIfNeeded(trys.getFinallyStatement(),scope);
    boolean hasFinally=!(trys.getFinallyStatement() instanceof EmptyStatement);
    if (hasFinally && !missesReturn[0])     return trys;
    final Statement tryStatement=addReturnsIfNeeded(trys.getTryStatement(),scope);
    if (doAdd)     trys.setTryStatement(tryStatement);
    final int len=trys.getCatchStatements().size();
    for (int i=0; i != len; ++i) {
      final CatchStatement catchStatement=trys.getCatchStatement(i);
      final Statement code=addReturnsIfNeeded(catchStatement.getCode(),scope);
      if (doAdd)       catchStatement.setCode(code);
    }
    return trys;
  }
  if (statement instanceof BlockStatement) {
    BlockStatement block=(BlockStatement)statement;
    final List list=block.getStatements();
    if (!list.isEmpty()) {
      int idx=list.size() - 1;
      Statement last=addReturnsIfNeeded((Statement)list.get(idx),block.getVariableScope());
      if (doAdd)       list.set(idx,last);
      if (!statementReturns(last)) {
        final ReturnStatement returnStatement=new ReturnStatement(ConstantExpression.NULL);
        listener.returnStatementAdded(returnStatement);
        if (doAdd)         list.add(returnStatement);
      }
    }
 else {
      ReturnStatement ret=new ReturnStatement(ConstantExpression.NULL);
      ret.setSourcePosition(block);
      listener.returnStatementAdded(ret);
      return ret;
    }
    BlockStatement newBlock=new BlockStatement(list,block.getVariableScope());
    newBlock.setSourcePosition(block);
    return newBlock;
  }
  if (statement == null) {
    final ReturnStatement returnStatement=new ReturnStatement(ConstantExpression.NULL);
    listener.returnStatementAdded(returnStatement);
    return returnStatement;
  }
 else {
    final List list=new ArrayList();
    list.add(statement);
    final ReturnStatement returnStatement=new ReturnStatement(ConstantExpression.NULL);
    listener.returnStatementAdded(returnStatement);
    list.add(returnStatement);
    BlockStatement newBlock=new BlockStatement(list,new VariableScope(scope));
    newBlock.setSourcePosition(statement);
    return newBlock;
  }
}
