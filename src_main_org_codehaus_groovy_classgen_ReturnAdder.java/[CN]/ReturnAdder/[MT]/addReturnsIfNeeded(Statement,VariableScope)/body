{
  if (statement instanceof ReturnStatement || statement instanceof BytecodeSequence || statement instanceof ThrowStatement) {
    return statement;
  }
  if (statement instanceof EmptyStatement) {
    return new ReturnStatement(ConstantExpression.NULL);
  }
  if (statement instanceof ExpressionStatement) {
    ExpressionStatement expStmt=(ExpressionStatement)statement;
    Expression expr=expStmt.getExpression();
    ReturnStatement ret=new ReturnStatement(expr);
    ret.setSourcePosition(expr);
    ret.setStatementLabel(statement.getStatementLabel());
    return ret;
  }
  if (statement instanceof SynchronizedStatement) {
    SynchronizedStatement sync=(SynchronizedStatement)statement;
    sync.setCode(addReturnsIfNeeded(sync.getCode(),scope));
    return sync;
  }
  if (statement instanceof IfStatement) {
    IfStatement ifs=(IfStatement)statement;
    ifs.setIfBlock(addReturnsIfNeeded(ifs.getIfBlock(),scope));
    ifs.setElseBlock(addReturnsIfNeeded(ifs.getElseBlock(),scope));
    return ifs;
  }
  if (statement instanceof SwitchStatement) {
    SwitchStatement swi=(SwitchStatement)statement;
    for (    CaseStatement caseStatement : swi.getCaseStatements()) {
      caseStatement.setCode(adjustSwitchCaseCode(caseStatement.getCode(),scope,false));
    }
    swi.setDefaultStatement(adjustSwitchCaseCode(swi.getDefaultStatement(),scope,true));
    return swi;
  }
  if (statement instanceof TryCatchStatement) {
    TryCatchStatement trys=(TryCatchStatement)statement;
    trys.setTryStatement(addReturnsIfNeeded(trys.getTryStatement(),scope));
    final int len=trys.getCatchStatements().size();
    for (int i=0; i != len; ++i) {
      final CatchStatement catchStatement=trys.getCatchStatement(i);
      catchStatement.setCode(addReturnsIfNeeded(catchStatement.getCode(),scope));
    }
    return trys;
  }
  if (statement instanceof BlockStatement) {
    BlockStatement block=(BlockStatement)statement;
    final List list=block.getStatements();
    if (!list.isEmpty()) {
      int idx=list.size() - 1;
      Statement last=addReturnsIfNeeded((Statement)list.get(idx),block.getVariableScope());
      list.set(idx,last);
      if (!statementReturns(last)) {
        list.add(new ReturnStatement(ConstantExpression.NULL));
      }
    }
 else {
      ReturnStatement ret=new ReturnStatement(ConstantExpression.NULL);
      ret.setSourcePosition(block);
      return ret;
    }
    BlockStatement newBlock=new BlockStatement(list,block.getVariableScope());
    newBlock.setSourcePosition(block);
    return newBlock;
  }
  if (statement == null) {
    return new ReturnStatement(ConstantExpression.NULL);
  }
 else {
    final List list=new ArrayList();
    list.add(statement);
    list.add(new ReturnStatement(ConstantExpression.NULL));
    BlockStatement newBlock=new BlockStatement(list,new VariableScope(scope));
    newBlock.setSourcePosition(statement);
    return newBlock;
  }
}
