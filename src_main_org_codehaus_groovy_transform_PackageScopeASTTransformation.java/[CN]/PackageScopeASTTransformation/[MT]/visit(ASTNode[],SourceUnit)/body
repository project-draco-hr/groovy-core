{
  init(nodes,source);
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  AnnotationNode node=(AnnotationNode)nodes[0];
  boolean legacyMode=LEGACY_TYPE_NAME.equals(node.getClassNode().getName());
  if (!MY_TYPE.equals(node.getClassNode()) && !legacyMode)   return;
  Expression value=node.getMember("value");
  if (parent instanceof ClassNode) {
    List<groovy.transform.PackageScopeTarget> targets;
    if (value == null)     targets=Arrays.asList(legacyMode ? PackageScopeTarget.FIELDS : PackageScopeTarget.CLASS);
 else     targets=determineTargets(value);
    visitClassNode((ClassNode)parent,targets);
    parent.getAnnotations();
  }
 else {
    if (value != null) {
      addError("Error during " + MY_TYPE_NAME + " processing: "+ TARGET_CLASS_NAME+ " only allowed at class level.",parent);
      return;
    }
    if (parent instanceof MethodNode) {
      visitMethodNode((MethodNode)parent);
    }
 else     if (parent instanceof FieldNode) {
      visitFieldNode((FieldNode)parent);
    }
  }
}
