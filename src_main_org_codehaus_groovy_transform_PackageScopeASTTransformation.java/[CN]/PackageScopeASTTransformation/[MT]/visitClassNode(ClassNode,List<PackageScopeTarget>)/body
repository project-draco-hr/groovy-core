{
  String cName=cNode.getName();
  if (cNode.isInterface() && value.size() != 1 && value.get(0) != PackageScopeTarget.CLASS) {
    addError("Error processing interface '" + cName + "'. "+ MY_TYPE_NAME+ " not allowed for interfaces except when targeting Class level.",cNode);
  }
  if (value.contains(groovy.transform.PackageScopeTarget.CLASS)) {
    if (cNode.isSyntheticPublic())     revertVisibility(cNode);
 else     addError("Can't use " + MY_TYPE_NAME + " for class '"+ cNode.getName()+ "' which has explicit visibility.",cNode);
  }
  if (value.contains(groovy.transform.PackageScopeTarget.METHODS)) {
    final List<MethodNode> mList=cNode.getMethods();
    for (    MethodNode mNode : mList) {
      if (mNode.isSyntheticPublic())       revertVisibility(mNode);
    }
  }
  if (value.contains(groovy.transform.PackageScopeTarget.CONSTRUCTORS)) {
    final List<ConstructorNode> cList=cNode.getDeclaredConstructors();
    for (    MethodNode mNode : cList) {
      if (mNode.isSyntheticPublic())       revertVisibility(mNode);
    }
  }
  if (value.contains(PackageScopeTarget.FIELDS)) {
    final List<PropertyNode> pList=cNode.getProperties();
    List<PropertyNode> foundProps=new ArrayList<PropertyNode>();
    List<String> foundNames=new ArrayList<String>();
    for (    PropertyNode pNode : pList) {
      foundProps.add(pNode);
      foundNames.add(pNode.getName());
    }
    for (    PropertyNode pNode : foundProps) {
      pList.remove(pNode);
    }
    final List<FieldNode> fList=cNode.getFields();
    for (    FieldNode fNode : fList) {
      if (foundNames.contains(fNode.getName())) {
        revertVisibility(fNode);
      }
    }
  }
}
