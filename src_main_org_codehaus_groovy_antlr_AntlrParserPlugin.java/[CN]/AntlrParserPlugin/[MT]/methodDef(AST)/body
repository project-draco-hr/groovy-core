{
  List<AnnotationNode> annotations=new ArrayList<AnnotationNode>();
  AST node=methodDef.getFirstChild();
  GenericsType[] generics=null;
  if (isType(TYPE_PARAMETERS,node)) {
    generics=makeGenericsType(node);
    node=node.getNextSibling();
  }
  int modifiers=Opcodes.ACC_PUBLIC;
  if (isType(MODIFIERS,node)) {
    modifiers=modifiers(node,annotations,modifiers);
    checkNoInvalidModifier(methodDef,"Method",modifiers,Opcodes.ACC_VOLATILE,"volatile");
    node=node.getNextSibling();
  }
  if (isAnInterface()) {
    modifiers|=Opcodes.ACC_ABSTRACT;
  }
  ClassNode returnType=null;
  if (isType(TYPE,node)) {
    returnType=makeTypeWithArguments(node);
    node=node.getNextSibling();
  }
  String name=identifier(node);
  if (classNode != null && !classNode.isAnnotationDefinition()) {
    if (classNode.getNameWithoutPackage().equals(name)) {
      if (isAnInterface()) {
        throw new ASTRuntimeException(methodDef,"Constructor not permitted within an interface.");
      }
      throw new ASTRuntimeException(methodDef,"Invalid constructor format. Remove '" + returnType.getName() + "' as the return type if you want a constructor, or use a different name if you want a method.");
    }
  }
  node=node.getNextSibling();
  Parameter[] parameters=Parameter.EMPTY_ARRAY;
  ClassNode[] exceptions=ClassNode.EMPTY_ARRAY;
  if (classNode == null || !classNode.isAnnotationDefinition()) {
    assertNodeType(PARAMETERS,node);
    parameters=parameters(node);
    if (parameters == null)     parameters=Parameter.EMPTY_ARRAY;
    node=node.getNextSibling();
    if (isType(LITERAL_throws,node)) {
      AST throwsNode=node.getFirstChild();
      List<ClassNode> exceptionList=new ArrayList<ClassNode>();
      throwsList(throwsNode,exceptionList);
      exceptions=exceptionList.toArray(exceptions);
      node=node.getNextSibling();
    }
  }
  boolean hasAnnotationDefault=false;
  Statement code=null;
  if ((modifiers & Opcodes.ACC_ABSTRACT) == 0) {
    if (node == null) {
      throw new ASTRuntimeException(methodDef,"You defined a method without body. Try adding a body, or declare it abstract.");
    }
    assertNodeType(SLIST,node);
    code=statementList(node);
  }
 else   if (node != null && classNode.isAnnotationDefinition()) {
    code=statement(node);
    hasAnnotationDefault=true;
  }
 else   if ((modifiers & Opcodes.ACC_ABSTRACT) > 0) {
    if (node != null) {
      throw new ASTRuntimeException(methodDef,"Abstract methods do not define a body.");
    }
  }
  boolean syntheticPublic=((modifiers & Opcodes.ACC_SYNTHETIC) != 0);
  modifiers&=~Opcodes.ACC_SYNTHETIC;
  MethodNode methodNode=new MethodNode(name,modifiers,returnType,parameters,exceptions,code);
  methodNode.addAnnotations(annotations);
  methodNode.setGenericsTypes(generics);
  methodNode.setAnnotationDefault(hasAnnotationDefault);
  methodNode.setSyntheticPublic(syntheticPublic);
  configureAST(methodNode,methodDef);
  if (classNode != null) {
    classNode.addMethod(methodNode);
  }
 else {
    output.addMethod(methodNode);
  }
}
