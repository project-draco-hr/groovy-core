{
  Statement statement=null;
  int type=node.getType();
switch (type) {
case SLIST:
case LITERAL_finally:
    statement=statementList(node);
  break;
case METHOD_CALL:
statement=methodCall(node);
break;
case VARIABLE_DEF:
statement=variableDef(node);
break;
case LABELED_STAT:
statement=labelledStatement(node);
break;
case LITERAL_assert:
statement=assertStatement(node);
break;
case LITERAL_break:
statement=breakStatement(node);
break;
case LITERAL_continue:
statement=continueStatement(node);
break;
case LITERAL_if:
statement=ifStatement(node);
break;
case LITERAL_for:
statement=forStatement(node);
break;
case LITERAL_return:
statement=returnStatement(node);
break;
case LITERAL_synchronized:
statement=synchronizedStatement(node);
break;
case LITERAL_switch:
statement=switchStatement(node);
break;
case LITERAL_with:
statement=withStatement(node);
break;
case LITERAL_try:
statement=tryStatement(node);
break;
case LITERAL_throw:
statement=throwStatement(node);
break;
case LITERAL_while:
statement=whileStatement(node);
break;
default :
statement=new ExpressionStatement(expression(node));
}
if (statement != null) {
configureAST(statement,node);
}
return statement;
}
