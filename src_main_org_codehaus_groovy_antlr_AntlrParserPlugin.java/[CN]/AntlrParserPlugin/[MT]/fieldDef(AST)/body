{
  List annotations=new ArrayList();
  AST node=fieldDef.getFirstChild();
  int modifiers=0;
  if (isType(MODIFIERS,node)) {
    modifiers=modifiers(node,annotations,modifiers);
    node=node.getNextSibling();
  }
  Type type=null;
  if (isType(TYPE,node)) {
    type=makeType(node);
    node=node.getNextSibling();
  }
  String name=identifier(node);
  node=node.getNextSibling();
  Expression initialValue=null;
  if (node != null) {
    assertNodeType(ASSIGN,node);
    initialValue=expression(node);
  }
  if (initialValue == null && type != null) {
    if (type.equals(Type.int_TYPE)) {
      initialValue=new ConstantExpression(new Integer(0));
    }
 else     if (type.equals(Type.long_TYPE)) {
      initialValue=new ConstantExpression(new Long(0L));
    }
 else     if (type.equals(Type.double_TYPE)) {
      initialValue=new ConstantExpression(new Double(0.0));
    }
 else     if (type.equals(Type.float_TYPE)) {
      initialValue=new ConstantExpression(new Float(0.0F));
    }
 else     if (type.equals(Type.boolean_TYPE)) {
      initialValue=ConstantExpression.FALSE;
    }
 else     if (type.equals(Type.short_TYPE)) {
      initialValue=new ConstantExpression(new Short((short)0));
    }
 else     if (type.equals(Type.byte_TYPE)) {
      initialValue=new ConstantExpression(new Byte((byte)0));
    }
 else     if (type.equals(Type.char_TYPE)) {
      initialValue=new ConstantExpression(new Character((char)0));
    }
  }
  FieldNode fieldNode=new FieldNode(name,modifiers,type,classNode,initialValue);
  fieldNode.addAnnotations(annotations);
  configureAST(fieldNode,fieldDef);
  if (fieldNode.getAnnotations("Property") != null) {
    int fieldModifiers=0;
    int flags=Opcodes.ACC_STATIC | Opcodes.ACC_TRANSIENT | Opcodes.ACC_VOLATILE| Opcodes.ACC_FINAL;
    fieldModifiers|=(modifiers & flags);
    fieldNode.setModifiers(fieldModifiers);
    if (!hasVisibility(modifiers)) {
      modifiers|=Opcodes.ACC_PUBLIC;
    }
    PropertyNode propertyNode=new PropertyNode(fieldNode,modifiers,null,null);
    configureAST(propertyNode,fieldDef);
    classNode.addProperty(propertyNode);
  }
 else {
    fieldNode.setModifiers(modifiers);
    classNode.addField(fieldNode);
  }
}
