{
  List<AnnotationNode> annotations=new ArrayList<AnnotationNode>();
  AST node=constructorDef.getFirstChild();
  int modifiers=Opcodes.ACC_PUBLIC;
  if (isType(MODIFIERS,node)) {
    modifiers=modifiers(node,annotations,modifiers);
    node=node.getNextSibling();
  }
  assertNodeType(PARAMETERS,node);
  Parameter[] parameters=parameters(node);
  if (parameters == null)   parameters=Parameter.EMPTY_ARRAY;
  node=node.getNextSibling();
  ClassNode[] exceptions=ClassNode.EMPTY_ARRAY;
  if (isType(LITERAL_throws,node)) {
    AST throwsNode=node.getFirstChild();
    List<ClassNode> exceptionList=new ArrayList<ClassNode>();
    throwsList(throwsNode,exceptionList);
    exceptions=exceptionList.toArray(exceptions);
    node=node.getNextSibling();
  }
  assertNodeType(SLIST,node);
  Statement code=statementList(node);
  boolean syntheticPublic=((modifiers & Opcodes.ACC_SYNTHETIC) != 0);
  modifiers&=~Opcodes.ACC_SYNTHETIC;
  ConstructorNode constructorNode=classNode.addConstructor(modifiers,parameters,exceptions,code);
  constructorNode.setSyntheticPublic(syntheticPublic);
  constructorNode.addAnnotations(annotations);
  configureAST(constructorNode,constructorDef);
}
