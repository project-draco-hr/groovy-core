{
  AST constructorCallNode=node;
  ClassNode type=makeTypeWithArguments(constructorCallNode);
  if (isType(CTOR_CALL,node) || isType(LITERAL_new,node)) {
    node=node.getFirstChild();
  }
  AST elist=node.getNextSibling();
  if (elist == null && isType(ELIST,node)) {
    elist=node;
    if ("(".equals(type.getName())) {
      type=classNode;
    }
  }
  if (isType(ARRAY_DECLARATOR,elist)) {
    AST expressionNode=elist.getFirstChild();
    if (expressionNode == null) {
      throw new ASTRuntimeException(elist,"No expression for the array constructor call");
    }
    List size=arraySizeExpression(expressionNode);
    ArrayExpression arrayExpression=new ArrayExpression(type,null,size);
    configureAST(arrayExpression,constructorCallNode);
    return arrayExpression;
  }
  Expression arguments=arguments(elist);
  ClassNode innerClass=getAnonymousInnerClassNode(arguments);
  ConstructorCallExpression ret=new ConstructorCallExpression(type,arguments);
  if (innerClass != null) {
    ret.setType(innerClass);
    ret.setUsingAnonymousInnerClass(true);
    innerClass.setUnresolvedSuperClass(type);
  }
  configureAST(ret,constructorCallNode);
  return ret;
}
