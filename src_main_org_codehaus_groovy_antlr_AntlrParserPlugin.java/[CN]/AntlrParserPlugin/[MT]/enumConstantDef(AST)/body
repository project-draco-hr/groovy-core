{
  enumConstantBeingDef=true;
  assertNodeType(ENUM_CONSTANT_DEF,node);
  AST element=node.getFirstChild();
  if (isType(ANNOTATIONS,element)) {
    element=element.getNextSibling();
  }
  String identifier=identifier(element);
  int savedLine=element.getLine();
  int savedColumn=element.getColumn();
  Expression init=null;
  element=element.getNextSibling();
  if (element != null) {
    init=expression(element);
    ClassNode innerClass;
    if (element.getNextSibling() == null) {
      innerClass=getAnonymousInnerClassNode(init);
      if (innerClass != null) {
        init=null;
      }
    }
 else {
      element=element.getNextSibling();
      Expression next=expression(element);
      innerClass=getAnonymousInnerClassNode(next);
    }
    if (innerClass != null) {
      innerClass.setSuperClass(classNode.getPlainNodeReference());
      innerClass.setModifiers(classNode.getModifiers() | Opcodes.ACC_FINAL);
      Expression inner=new ClassExpression(innerClass);
      if (init == null) {
        init=inner;
      }
 else {
        if (init instanceof ListExpression) {
          ((ListExpression)init).addExpression(inner);
        }
 else {
          ListExpression le=new ListExpression();
          le.addExpression(init);
          le.addExpression(inner);
          init=le;
        }
      }
      classNode.setModifiers(classNode.getModifiers() & ~Opcodes.ACC_FINAL);
    }
 else     if (isType(ELIST,element)) {
      if (init instanceof ListExpression && !((ListExpression)init).isWrapped()) {
        ListExpression le=new ListExpression();
        le.addExpression(init);
        init=le;
      }
    }
  }
  EnumHelper.addEnumConstant(classNode,identifier,init,savedLine,savedColumn);
  enumConstantBeingDef=false;
}
