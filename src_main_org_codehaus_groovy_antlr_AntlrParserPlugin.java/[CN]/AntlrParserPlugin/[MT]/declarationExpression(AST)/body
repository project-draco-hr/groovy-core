{
  AST node=variableDef.getFirstChild();
  ClassNode type=null;
  List annotations=new ArrayList();
  if (isType(MODIFIERS,node)) {
    modifiers(node,annotations,0);
    node=node.getNextSibling();
  }
  if (isType(TYPE,node)) {
    type=makeTypeWithArguments(node);
    node=node.getNextSibling();
  }
  Expression leftExpression;
  Expression rightExpression=ConstantExpression.NULL;
  int nodeType;
  if (isType(ASSIGN,node)) {
    node=node.getFirstChild();
    AST left=node.getFirstChild();
    ArgumentListExpression alist=new ArgumentListExpression();
    for (AST varDef=left; varDef != null; varDef=varDef.getNextSibling()) {
      assertNodeType(VARIABLE_DEF,varDef);
      DeclarationExpression de=(DeclarationExpression)declarationExpression(varDef);
      alist.addExpression(de.getVariableExpression());
    }
    leftExpression=alist;
    nodeType=LIST_CONSTRUCTOR;
  }
 else {
    String name=identifier(node);
    leftExpression=new VariableExpression(name,type);
    nodeType=ASSIGN;
  }
  configureAST(leftExpression,node);
  node=node.getNextSibling();
  if (node != null) {
    assertNodeType(nodeType,node);
    rightExpression=expression(node.getFirstChild());
  }
  Token token=makeToken(Types.ASSIGN,variableDef);
  DeclarationExpression expression=new DeclarationExpression(leftExpression,token,rightExpression);
  configureAST(expression,variableDef);
  ExpressionStatement expressionStatement=new ExpressionStatement(expression);
  configureAST(expressionStatement,variableDef);
  return expression;
}
