{
  AST node=variableDef.getFirstChild();
  ClassNode type=null;
  List<AnnotationNode> annotations=new ArrayList<AnnotationNode>();
  boolean staticVariable=false;
  AST modifierNode=null;
  if (isType(MODIFIERS,node)) {
    int modifiers=modifiers(node,annotations,0);
    if ((modifiers & Opcodes.ACC_STATIC) != 0) {
      modifierNode=node;
      staticVariable=true;
    }
    node=node.getNextSibling();
  }
  if (isType(TYPE,node)) {
    type=makeTypeWithArguments(node);
    node=node.getNextSibling();
  }
  Expression leftExpression;
  Expression rightExpression=ConstantExpression.NULL;
  AST right;
  if (isType(ASSIGN,node)) {
    node=node.getFirstChild();
    AST left=node.getFirstChild();
    ArgumentListExpression alist=new ArgumentListExpression();
    for (AST varDef=left; varDef != null; varDef=varDef.getNextSibling()) {
      assertNodeType(VARIABLE_DEF,varDef);
      DeclarationExpression de=(DeclarationExpression)declarationExpression(varDef);
      alist.addExpression(de.getVariableExpression());
    }
    leftExpression=alist;
    right=node.getNextSibling();
    if (right != null)     rightExpression=expression(right);
  }
 else {
    if (staticVariable) {
      throw new ASTRuntimeException(modifierNode,"Variable definition has an incorrect modifier 'static'.");
    }
    String name=identifier(node);
    VariableExpression ve=new VariableExpression(name,type);
    ve.addAnnotations(annotations);
    leftExpression=ve;
    right=node.getNextSibling();
    if (right != null) {
      assertNodeType(ASSIGN,right);
      rightExpression=expression(right.getFirstChild());
    }
  }
  configureAST(leftExpression,node);
  Token token=makeToken(Types.ASSIGN,variableDef);
  DeclarationExpression expression=new DeclarationExpression(leftExpression,token,rightExpression);
  configureAST(expression,variableDef);
  ExpressionStatement expressionStatement=new ExpressionStatement(expression);
  configureAST(expressionStatement,variableDef);
  return expression;
}
