{
  Token token=makeToken(type,node);
  AST leftNode=node.getFirstChild();
  Expression leftExpression=expression(leftNode);
  AST rightNode=leftNode.getNextSibling();
  if (rightNode == null) {
    return leftExpression;
  }
  if (Types.ofType(type,Types.ASSIGNMENT_OPERATOR)) {
    if (leftExpression instanceof VariableExpression || leftExpression.getClass() == PropertyExpression.class || leftExpression instanceof FieldExpression || leftExpression instanceof AttributeExpression || leftExpression instanceof DeclarationExpression) {
    }
 else     if (leftExpression instanceof ConstantExpression) {
      throw new ASTRuntimeException(node,"\n[" + ((ConstantExpression)leftExpression).getValue() + "] is a constant expression, but it should be a variable expression");
    }
 else     if (leftExpression instanceof BinaryExpression) {
      Expression leftexp=((BinaryExpression)leftExpression).getLeftExpression();
      int lefttype=((BinaryExpression)leftExpression).getOperation().getType();
      if (!Types.ofType(lefttype,Types.ASSIGNMENT_OPERATOR) && lefttype != Types.LEFT_SQUARE_BRACKET) {
        throw new ASTRuntimeException(node,"\n" + ((BinaryExpression)leftExpression).getText() + " is a binary expression, but it should be a variable expression");
      }
    }
 else     if (leftExpression instanceof GStringExpression) {
      throw new ASTRuntimeException(node,"\n\"" + ((GStringExpression)leftExpression).getText() + "\" is a GString expression, but it should be a variable expression");
    }
 else     if (leftExpression instanceof MethodCallExpression) {
      throw new ASTRuntimeException(node,"\n\"" + ((MethodCallExpression)leftExpression).getText() + "\" is a method call expression, but it should be a variable expression");
    }
 else     if (leftExpression instanceof MapExpression) {
      throw new ASTRuntimeException(node,"\n'" + ((MapExpression)leftExpression).getText() + "' is a map expression, but it should be a variable expression");
    }
 else {
      throw new ASTRuntimeException(node,"\n" + leftExpression.getClass() + ", with its value '"+ leftExpression.getText()+ "', is a bad expression as the left hand side of an assignment operator");
    }
  }
  Expression rightExpression=expression(rightNode);
  BinaryExpression binaryExpression=new BinaryExpression(leftExpression,token,rightExpression);
  configureAST(binaryExpression,node);
  return binaryExpression;
}
