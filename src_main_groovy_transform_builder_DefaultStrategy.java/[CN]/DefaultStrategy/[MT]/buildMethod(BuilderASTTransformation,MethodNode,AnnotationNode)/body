{
  if (transform.getMemberValue(anno,"includes") != null || transform.getMemberValue(anno,"includes") != null) {
    transform.addError("Error during " + BuilderASTTransformation.MY_TYPE_NAME + " processing: includes/excludes only allowed on classes",anno);
  }
  ClassNode buildee=mNode.getDeclaringClass();
  ClassNode builder=createBuilder(anno,buildee);
  createBuilderFactoryMethod(anno,buildee,builder);
  for (  Parameter parameter : mNode.getParameters()) {
    builder.addField(createFieldCopy(buildee,parameter));
    builder.addMethod(createBuilderMethodForProp(builder,new PropertyInfo(parameter.getName(),parameter.getType()),getPrefix(anno)));
  }
  builder.addMethod(createBuildMethodForMethod(anno,buildee,mNode,mNode.getParameters()));
}
