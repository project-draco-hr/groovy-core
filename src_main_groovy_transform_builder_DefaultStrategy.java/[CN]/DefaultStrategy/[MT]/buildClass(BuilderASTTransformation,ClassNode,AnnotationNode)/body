{
  List<String> excludes=new ArrayList<String>();
  List<String> includes=new ArrayList<String>();
  if (!getIncludeExclude(transform,anno,buildee,excludes,includes))   return;
  String prefix=transform.getMemberStringValue(anno,"prefix","");
  if (unsupportedAttribute(transform,anno,"forClass"))   return;
  final int visibility=ACC_PUBLIC | ACC_STATIC;
  String builderClassName=transform.getMemberStringValue(anno,"builderClassName",buildee.getName() + "Builder");
  final String fullName=buildee.getName() + "$" + builderClassName;
  ClassNode builder=new InnerClassNode(buildee,fullName,visibility,ClassHelper.OBJECT_TYPE);
  buildee.getModule().addClass(builder);
  buildee.addMethod(createBuilderMethod(transform,anno,builder));
  List<FieldNode> fields=getInstancePropertyFields(buildee);
  List<FieldNode> filteredFields=selectFieldsFromExistingClass(fields,includes,excludes);
  for (  FieldNode fieldNode : filteredFields) {
    Map<String,ClassNode> genericsSpec=createGenericsSpec(fieldNode.getDeclaringClass());
    extractSuperClassGenerics(fieldNode.getType(),buildee,genericsSpec);
    ClassNode correctedType=correctToGenericsSpecRecurse(genericsSpec,fieldNode.getType());
    String fieldName=fieldNode.getName();
    builder.addField(createFieldCopy(buildee,fieldName,correctedType));
    builder.addMethod(createBuilderMethodForProp(builder,new PropertyInfo(fieldName,correctedType),prefix));
  }
  builder.addMethod(createBuildMethod(transform,anno,buildee,filteredFields));
}
