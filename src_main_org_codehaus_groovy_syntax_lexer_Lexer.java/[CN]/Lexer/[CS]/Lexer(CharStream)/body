{
  this.charStream=new CharStream(){
    private final char[] buf=new char[5];
    private final int[] charWidth=new int[buf.length];
    private int cur=0;
    private int charsInBuffer=0;
    private boolean eosRead=false;
    private boolean escapeLookahead=false;
    private char escapeLookaheadChar;
    public String getDescription(){
      return charStream.getDescription();
    }
    public char la() throws IOException {
      return la(1);
    }
    public char la(    int k) throws IOException {
      if (k > this.charsInBuffer) {
        if (k > this.buf.length)         throw new LookAheadExhaustionException(k);
        for (int i=0; i != this.charsInBuffer; i++, this.cur++) {
          this.buf[i]=this.buf[this.cur];
          this.charWidth[i]=this.charWidth[this.cur];
        }
        fillBuffer();
      }
      return this.buf[this.cur + k - 1];
    }
    public char consume() throws IOException {
      if (this.charsInBuffer == 0)       fillBuffer();
      this.charsInBuffer--;
      Lexer.this.column+=this.charWidth[this.cur];
      this.charWidth[this.cur]=1;
      return this.buf[this.cur++];
    }
    public void close() throws IOException {
      charStream.close();
    }
    private void fillBuffer() throws IOException {
      this.cur=0;
      do {
        if (this.eosRead) {
          this.buf[this.charsInBuffer]=CharStream.EOS;
        }
 else {
          char c=this.escapeLookahead ? this.escapeLookaheadChar : charStream.consume();
          this.escapeLookahead=false;
          if (c == CharStream.EOS)           this.eosRead=true;
          if (c == '\\') {
            c=charStream.consume();
            if (c == 'u') {
              do {
                c=charStream.consume();
              }
 while (c == 'u');
              try {
                c=(char)Integer.parseInt(new String(new char[]{c,charStream.consume(),charStream.consume(),charStream.consume()}),16);
              }
 catch (              NumberFormatException e) {
                throw new IOException("Bad Unicode escape sequence");
              }
            }
 else {
              this.escapeLookahead=true;
              this.escapeLookaheadChar=c;
              c='\\';
            }
          }
          this.buf[this.charsInBuffer]=c;
        }
      }
 while (++this.charsInBuffer != this.buf.length);
    }
  }
;
  this.line=1;
  this.column=1;
}
