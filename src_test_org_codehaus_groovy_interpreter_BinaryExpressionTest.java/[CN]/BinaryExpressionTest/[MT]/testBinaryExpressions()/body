{
  Object a=new Integer(2);
  Object b=new Integer(3);
  Object c=new Integer(2);
  assertBinaryExpression(true,a,Token.COMPARE_IDENTICAL,a);
  assertBinaryExpression(false,a,Token.COMPARE_IDENTICAL,b);
  assertBinaryExpression(false,a,Token.COMPARE_IDENTICAL,c);
  assertBinaryExpression(true,a,Token.COMPARE_EQUAL,a);
  assertBinaryExpression(true,a,Token.COMPARE_EQUAL,c);
  assertBinaryExpression(false,a,Token.COMPARE_EQUAL,b);
  assertBinaryExpression(true,a,Token.COMPARE_NOT_EQUAL,b);
  assertBinaryExpression(false,a,Token.COMPARE_NOT_EQUAL,a);
  assertBinaryExpression(false,a,Token.COMPARE_NOT_EQUAL,c);
  assertBinaryExpression(true,b,Token.COMPARE_GREATER_THAN,a);
  assertBinaryExpression(false,a,Token.COMPARE_GREATER_THAN,b);
  assertBinaryExpression(false,a,Token.COMPARE_GREATER_THAN,c);
  assertBinaryExpression(false,a,Token.COMPARE_GREATER_THAN,a);
  assertBinaryExpression(true,b,Token.COMPARE_GREATER_THAN_EQUAL,b);
  assertBinaryExpression(true,b,Token.COMPARE_GREATER_THAN_EQUAL,a);
  assertBinaryExpression(false,a,Token.COMPARE_GREATER_THAN_EQUAL,b);
  assertBinaryExpression(true,a,Token.COMPARE_LESS_THAN,b);
  assertBinaryExpression(false,a,Token.COMPARE_LESS_THAN,c);
  assertBinaryExpression(false,a,Token.COMPARE_LESS_THAN,a);
  assertBinaryExpression(true,a,Token.COMPARE_LESS_THAN_EQUAL,a);
  assertBinaryExpression(true,a,Token.COMPARE_LESS_THAN_EQUAL,b);
  assertBinaryExpression(true,a,Token.COMPARE_LESS_THAN_EQUAL,c);
  assertBinaryExpression(false,b,Token.COMPARE_LESS_THAN_EQUAL,a);
}
